[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/Routes.js",
    "memberof": null,
    "longname": "js/base/Routes.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Configure routes for base application\r\n* Do not configure tool specific routes here!\r\n*/\r\nvar Routes = ($routeProvider, $compileProvider) => {\r\n\r\n\t// Allow cordova files for image src\r\n\t$compileProvider.imgSrcSanitizationWhitelist(/^\\s*(https?|ftp|file|cdvfile|ms-appx|x-wmapp0e):|data:image\\//);\r\n\t$compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|file|ghttps?|ms-appx|x-wmapp0):/);\r\n\r\n\t$routeProvider\r\n\t.when('/boot',\t\t\t\t\t\t{templateUrl : 'base/partials/boot.html',\t\t\t\tcontroller : 'BootCtrl'})\r\n\t.when('/boot/:moduleId',\t\t\t{templateUrl : 'base/partials/boot.html',\t\t\t\tcontroller : 'BootCtrl'})\r\n\t.when('/home',\t\t\t\t\t\t{templateUrl : 'base/partials/toolSelect.html',\t\t\tcontroller : 'HomeCtrl'})\r\n\t.when('/settings', \t\t\t\t\t{templateUrl : 'base/partials/settings.html',\t\t\tcontroller : 'SettingsCtrl' })\r\n\t.when('/settings-push', \t\t\t{templateUrl : 'base/partials/settings-push.html',\t\tcontroller : 'SettingsPushCtrl' })\r\n\t.when('/sync', \t\t\t\t\t\t{templateUrl : 'base/partials/sync.html',\t\t\t\tcontroller : 'SyncCtrl' })\r\n\t.when('/sync-configure', \t\t\t{templateUrl : 'base/partials/sync-configure.html',\t\tcontroller : 'SyncConfigureCtrl' })\r\n\t.when('/sync-progress', \t\t\t{templateUrl : 'base/partials/sync-progress.html',\t\tcontroller : 'SyncProgressCtrl' })\r\n\t.when('/register', \t\t\t\t\t{templateUrl : 'base/partials/login.html',\t\t\t\tcontroller : 'RegisterCtrl' })\r\n\t.when('/register-selectModules',\t{templateUrl : 'base/partials/selectModules.html',\t\tcontroller : 'RegisterSelectModuleCtrl' })\r\n\t.when('/register-modulesRegistration', {templateUrl : 'base/partials/registerModules.html',\tcontroller : 'RegisterModuleRegistrationCtrl' })\r\n\t.otherwise({ redirectTo : '/boot' });\r\n};\r\nRoutes.$inject = ['$routeProvider', '$compileProvider'];\r\nexport default Routes;\r\n"
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Routes",
    "memberof": "js/base/Routes.js",
    "longname": "js/base/Routes.js~Routes",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/Routes.js",
    "importStyle": "Routes",
    "description": "Configure routes for base application\nDo not configure tool specific routes here!",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/Utilities.js",
    "memberof": null,
    "longname": "js/base/Utilities.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n * Class for utility methods.\r\n * This class should only be used for simple utility methods.\r\n * DO NOT use this class to call services or to do tool specific\r\n * manipulations - these kind of functionality should be written in controllers or services\r\n * for the tool\r\n */\r\nexport function getNumberOfProperties(object, field){\r\n\tif (object === undefined){\r\n\t\treturn 0;\r\n\t}\r\n\tvar toTest = object;\r\n\tif (field){\r\n\t\ttoTest = object[field];\r\n\t}\r\n\treturn Object.keys(toTest).length;\r\n}\r\n\r\n/**\r\n * Convert an unknown jsonData type to an JSON Object\r\n */\r\nexport function convertToString(jsonData){\r\n\tif (typeof jsonData === 'string'){\r\n\t\treturn jsonData;\r\n\t}\r\n\telse if (typeof jsonData === 'object'){\r\n\t\treturn JSON.stringify(jsonData);\r\n\t}\r\n\telse{\r\n\t\treturn '';\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Convert an unknown jsonData type to an JSON Object\r\n */\r\nexport function convertToObject(jsonData){\r\n\tif (typeof jsonData === 'string'){\r\n\t\treturn JSON.parse(jsonData);\r\n\t}\r\n\telse if (typeof jsonData === 'object'){\r\n\t\treturn jsonData;\r\n\t}\r\n\telse{\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Returns a unique ID immediately\r\n */\r\nexport function generateUID(){\r\n\treturn 'UNIPOOLE_xxxxxxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n\t\tvar r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;\r\n\t\treturn v.toString(16);\r\n\t});\r\n}\r\n"
  },
  {
    "__docId__": 3,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getNumberOfProperties",
    "memberof": "js/base/Utilities.js",
    "longname": "js/base/Utilities.js~getNumberOfProperties",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/Utilities.js",
    "importStyle": "{getNumberOfProperties}",
    "description": "Class for utility methods.\nThis class should only be used for simple utility methods.\nDO NOT use this class to call services or to do tool specific\nmanipulations - these kind of functionality should be written in controllers or services\nfor the tool",
    "lineNumber": 9,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 4,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "convertToString",
    "memberof": "js/base/Utilities.js",
    "longname": "js/base/Utilities.js~convertToString",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/Utilities.js",
    "importStyle": "{convertToString}",
    "description": "Convert an unknown jsonData type to an JSON Object",
    "lineNumber": 23,
    "params": [
      {
        "name": "jsonData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 5,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "convertToObject",
    "memberof": "js/base/Utilities.js",
    "longname": "js/base/Utilities.js~convertToObject",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/Utilities.js",
    "importStyle": "{convertToObject}",
    "description": "Convert an unknown jsonData type to an JSON Object",
    "lineNumber": 39,
    "params": [
      {
        "name": "jsonData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "generateUID",
    "memberof": "js/base/Utilities.js",
    "longname": "js/base/Utilities.js~generateUID",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/Utilities.js",
    "importStyle": "{generateUID}",
    "description": "Returns a unique ID immediately",
    "lineNumber": 55,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/boot/BootCtrl.js",
    "memberof": null,
    "longname": "js/base/boot/BootCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar BootCtrl = ($q, $rootScope, $location, $routeParams, $timeout, DataService, UserService,\r\n\tHomeService, SyncAPIService, SynthErrorHandler, SyncService, PushService,\r\n\tUserSettings, ModuleService) => {\r\n\t$rootScope.activePage = 'boot';\r\n\t$rootScope.breadcrumbs = null;\r\n\tnavigator.splashscreen.show();\r\n\tlet disableListener = $rootScope.$on('$locationChangeSuccess', function(){\r\n\t\tdisableListener();\r\n\t\t$timeout(function(){\r\n\t\t\tnavigator.splashscreen.hide();\r\n\t\t}, 1500);\r\n\t});\r\n\r\n\tvar settings;\r\n\t// Make sure there is a no media scan file in place\r\n\tvar funcGetSettings = function(){\r\n\t\t\treturn UserSettings.getSettings().then(function(userSettings){\r\n\t\t\t\tsettings = userSettings;\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tfuncCheckNoMediaFile = function(){\r\n\t\t\treturn DataService.ensureNoMediaScanFiles();\r\n\t\t},\r\n\t\t// Check if the user is registered\r\n\t\tfuncCheckRegistrationProgress = function(){\r\n\t\t\treturn UserService.getRegistrationProgress();\r\n\t\t},\r\n\t\tfuncGoHomePromise = function(){\r\n\t\t\treturn HomeService.getHomeTools()\r\n\t\t\t.then(function(modules){\r\n\t\t\t\t/*\r\n\t\t\t\t* If there is only one tool, then we can go directly to that tool if the settings\r\n\t\t\t\t* indicate that we may\r\n\t\t\t\t*/\r\n\t\t\t\tif(modules.length === 1 && modules[0].tools.length === 1 && settings.singleToolMenu === false){\r\n\t\t\t\t\thistory.pushState(null, 'Home', '#/home'); // Fake coming from home\r\n\t\t\t\t\t$location.path(`/tool/${modules[0].tools[0].key}/${modules[0].id}`);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t$location.path('/home');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tfuncGetProgressPromise = function(progress){\r\n\t\t\tif(UserService.PROGRESS_COMPLETED === progress){\r\n\t\t\t\t// If the user is registered we will start the background sync\r\n\t\t\t\tSyncService.startBackgroundSync();\r\n\r\n\t\t\t\t// We don't need to wait for this to complete, it must just happen\r\n\t\t\t\tPushService.registerDevice();\r\n\r\n\t\t\t\t// Check if there are new modules for the user\r\n\t\t\t\tModuleService.hasNewModules().then((hasNewModules) => {\r\n\t\t\t\t\tif(hasNewModules){\r\n\t\t\t\t\t\thistory.pushState(null, 'Home', '#/home'); // Fake coming from home\r\n\t\t\t\t\t\t$location.path('/register-selectModules');\r\n\t\t\t\t\t\treturn $q.when(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// If not, check where \"home\" is going to be\r\n\t\t\t\t\t\treturn funcGoHomePromise();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, () => {\r\n\t\t\t\t\t// If we couldn't check online for new modules, we go back home\r\n\t\t\t\t\treturn funcGoHomePromise();\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t}\r\n\t\t\telse if(UserService.PROGRESS_SELECT_MODULES === progress){\r\n\t\t\t\t$location.path('/register-selectModules');\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t$location.path('/register');\r\n\t\t\t}\r\n\t\t};\r\n\r\n\tfuncGetSettings()\r\n\t.then(funcCheckNoMediaFile)\r\n\t.then(funcCheckRegistrationProgress)\r\n\t.then(funcGetProgressPromise, (reason) =>{\r\n\t\tnavigator.splashscreen.hide();\r\n\t\tdisableListener();\r\n\t\treturn SynthErrorHandler(reason);\r\n\t});\r\n};\r\nBootCtrl.$inject = ['$q', '$rootScope', '$location', '$routeParams', '$timeout', 'DataService',\r\n 'UserService', 'HomeService', 'SyncAPIService', 'SynthErrorHandler', 'SyncService',\r\n 'PushService', 'UserSettings', 'ModuleService'];\r\n\r\nexport default BootCtrl;\r\n"
  },
  {
    "__docId__": 8,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "BootCtrl",
    "memberof": "js/base/boot/BootCtrl.js",
    "longname": "js/base/boot/BootCtrl.js~BootCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/boot/BootCtrl.js",
    "importStyle": "BootCtrl",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/controllers/AppController.js",
    "memberof": null,
    "longname": "js/base/controllers/AppController.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nclass AppController {\r\n\r\n\tconstructor($scope, $routeParams, UserSession, UserService, SynthConfig, SyncService, SynthError){\r\n\t\t// This is not a real error, this only initialises the SynthError class\r\n\t\tSynthError(1000);\r\n\r\n\t\t/**\r\n\t\t* Callback function to open the vendor website\r\n\t\t*/\r\n\t\t$scope.linkVendor = function(){\r\n\t\t\twindow.open(SynthConfig.vendorURL, '_system');\r\n\t\t};\r\n\r\n\t\t// Name of the vendor for the application\r\n\t\t$scope.vendorName = SynthConfig.vendorName;\r\n\r\n\t\t// Name of the application\r\n\t\t$scope.applicationName = SynthConfig.applicationName;\r\n\r\n\t\t// User session object\r\n\t\t$scope.userSession = UserSession;\r\n\r\n\t\t// The initial sync background task is started by the boot process\r\n\t\tfunction onPaused(){\r\n\t\t\tSyncService.stopBackgroundSync();\r\n\t\t}\r\n\r\n\t\tfunction onResume(){\r\n\t\t\tSyncService.startBackgroundSync();\r\n\t\t}\r\n\r\n\t\tdocument.addEventListener('pause', onPaused, false);\r\n\t\tdocument.addEventListener('resume', onResume, false);\r\n\r\n\t\t// Set default options for some scrollers\r\n\t\t$scope.myScrollOptions = $scope.myScrollOptions || {};\r\n\t\t$scope.myScrollOptions.menuScroll = {\r\n\t\t\tscrollbars : true\r\n\t\t};\r\n\t\t$scope.myScrollOptions.mainScroll = {\r\n\t\t\tscrollbars : true,\r\n\t\t\tscrollX : true\r\n\t\t};\r\n\r\n\t\tvar showingExitPrompt = false;\r\n\r\n\t\t/**\r\n\t\t* Function to go back from the button on the screen\r\n\t\t*/\r\n\t\t$scope.goBack = function(){\r\n\t\t\tif ($scope.activePage === 'home' || $scope.activePage === 'register' || $scope.activePage === 'boot'){\r\n\t\t\t\t// iOS cannot exit an application\r\n\t\t\t\tif(!showingExitPrompt && device.platform !== 'iOS'){\r\n\t\t\t\t\tnavigator.notification.confirm(\r\n\t\t\t\t\t\t\t'Are you sure you want to exit the application?',\r\n\t\t\t\t\t\t\tfunction(index){\r\n\t\t\t\t\t\t\t\tshowingExitPrompt = false;\r\n\t\t\t\t\t\t\t\tif (index === 2){\r\n\t\t\t\t\t\t\t\t\tnavigator.app.exitApp();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'Exit Application',\r\n\t\t\t\t\t\t\t['No', 'Yes']);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnavigator.app.backHistory();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t* Redirect the native back button to the same handler when the user\r\n\t\t* clicks the back button on the application\r\n\t\t*/\r\n\t\tdocument.addEventListener('backbutton', function(){\r\n\t\t\t$scope.goBack();\r\n\t\t}, false);\r\n\t}\r\n}\r\nAppController.$inject = ['$scope', '$routeParams', 'UserSession', 'UserService', 'SynthConfig', 'SyncService', 'SynthError'];\r\nexport default AppController;\r\n"
  },
  {
    "__docId__": 10,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AppController",
    "memberof": "js/base/controllers/AppController.js",
    "longname": "js/base/controllers/AppController.js~AppController",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/controllers/AppController.js",
    "importStyle": "AppController",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 11,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/controllers/AppController.js~AppController",
    "longname": "js/base/controllers/AppController.js~AppController#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "$scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "$routeParams",
        "types": [
          "*"
        ]
      },
      {
        "name": "UserSession",
        "types": [
          "*"
        ]
      },
      {
        "name": "UserService",
        "types": [
          "*"
        ]
      },
      {
        "name": "SynthConfig",
        "types": [
          "*"
        ]
      },
      {
        "name": "SyncService",
        "types": [
          "*"
        ]
      },
      {
        "name": "SynthError",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/directives/AnimatedEllipse.js",
    "memberof": null,
    "longname": "js/base/directives/AnimatedEllipse.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n * Directive creating a texual animation of ellipse ... .. .\r\n */\r\nclass AnimatedEllipse{\r\n\r\n\t/**\r\n\t * Creates a new instance of this directive\r\n\t */\r\n\tconstructor($interval){\r\n\t\t/**\r\n\t\t * A reference to $interval.\r\n\t\t */\r\n\t\tthis.$interval = $interval;\r\n\r\n\t\t/**\r\n\t\t * Directive restricted to Element\r\n\t\t */\r\n\t\tthis.restrict = 'E';\r\n\r\n\t\t/**\r\n\t\t * Isolated scope for directive.\r\n\t\t */\r\n\t\tthis.scope = false;\r\n\r\n\t\tconst self = this;\r\n\r\n\t\t/**\r\n\t\t * Linking function.\r\n\t\t */\r\n\t\tthis.link = function(){\r\n\t\t\tself.linkDirective(...arguments);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Link function for the directive\r\n\t */\r\n\tlinkDirective(scope, element, attrs){\r\n\r\n\t\tvar timerId = null,\r\n\t\t\trunning = false,\r\n\t\t\tstate = 0;\r\n\t\tconst $interval = this.$interval;\r\n\r\n\t\telement.text('\\u00a0\\u00a0\\u00a0');\r\n\r\n\t\t// Watch for change in the busy flag\r\n\t\tscope.$watch(attrs.busy, function(value) {\r\n\t\t\ttoggleTimer(value);\r\n\t\t});\r\n\r\n\t\t// Make sure to stop timers when the element gets destroyed\r\n\t\telement.on('$destroy', function() {\r\n\t\t\ttoggleTimer(false);\r\n\t\t});\r\n\r\n\r\n\t\tfunction toggleTimer(run){\r\n\t\t\t// If we need to run, and we are not yet running\r\n\t\t\tif(run && !running){\r\n\t\t\t\trunning = true;\r\n\t\t\t\tstate = 0;\r\n\t\t\t\ttimerId = $interval(function() {\r\n\t\t\t\t\tupdateAnimation(); // update DOM\r\n\t\t\t\t}, 1100);\r\n\t\t\t}\r\n\t\t\t// Else id we need to stop and we are running\r\n\t\t\telse if(!run && running){\r\n\t\t\t\t$interval.cancel(timerId);\r\n\t\t\t\telement.text('\\u00a0\\u00a0\\u00a0');\r\n\t\t\t\trunning = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tfunction updateAnimation(){\r\n\t\t\tswitch(state){\r\n\t\t\tcase 0:\r\n\t\t\t\telement.text('.\\u00a0\\u00a0');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\telement.text('..\\u00a0');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\telement.text('...');\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif(state == 2){\r\n\t\t\t\tstate = 0;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tstate = state + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create an instance of the directive\r\n */\r\nvar AnimatedEllipseFactory = function(){\r\n\treturn new AnimatedEllipse(...arguments);\r\n};\r\nAnimatedEllipseFactory.$inject = ['$interval'];\r\nexport default AnimatedEllipseFactory;\r\n"
  },
  {
    "__docId__": 13,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AnimatedEllipse",
    "memberof": "js/base/directives/AnimatedEllipse.js",
    "longname": "js/base/directives/AnimatedEllipse.js~AnimatedEllipse",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/directives/AnimatedEllipse.js",
    "importStyle": null,
    "description": "Directive creating a texual animation of ellipse ... .. .",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 14,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/directives/AnimatedEllipse.js~AnimatedEllipse",
    "longname": "js/base/directives/AnimatedEllipse.js~AnimatedEllipse#constructor",
    "access": null,
    "description": "Creates a new instance of this directive",
    "lineNumber": 11,
    "params": [
      {
        "name": "$interval",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$interval",
    "memberof": "js/base/directives/AnimatedEllipse.js~AnimatedEllipse",
    "longname": "js/base/directives/AnimatedEllipse.js~AnimatedEllipse#$interval",
    "access": null,
    "description": "A reference to $interval.",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "restrict",
    "memberof": "js/base/directives/AnimatedEllipse.js~AnimatedEllipse",
    "longname": "js/base/directives/AnimatedEllipse.js~AnimatedEllipse#restrict",
    "access": null,
    "description": "Directive restricted to Element",
    "lineNumber": 20,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scope",
    "memberof": "js/base/directives/AnimatedEllipse.js~AnimatedEllipse",
    "longname": "js/base/directives/AnimatedEllipse.js~AnimatedEllipse#scope",
    "access": null,
    "description": "Isolated scope for directive.",
    "lineNumber": 25,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "linkDirective",
    "memberof": "js/base/directives/AnimatedEllipse.js~AnimatedEllipse",
    "longname": "js/base/directives/AnimatedEllipse.js~AnimatedEllipse#linkDirective",
    "access": null,
    "description": "Link function for the directive",
    "lineNumber": 40,
    "params": [
      {
        "name": "scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrs",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "AnimatedEllipseFactory",
    "memberof": "js/base/directives/AnimatedEllipse.js",
    "longname": "js/base/directives/AnimatedEllipse.js~AnimatedEllipseFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/directives/AnimatedEllipse.js",
    "importStyle": "AnimatedEllipseFactory",
    "description": "Factory to create an instance of the directive",
    "lineNumber": 104,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/directives/CurrentModuleName.js",
    "memberof": null,
    "longname": "js/base/directives/CurrentModuleName.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Directive that will display the module name from the module code if available\r\n*/\r\nclass CurrentModuleName {\r\n\r\n\t/**\r\n\t * Creates a new instance of the CurrentModuleName directive\r\n\t */\r\n\tconstructor($rootScope, $route, registrationService){\r\n\t\t/**\r\n\t\t * A reference to $rootScope.\r\n\t\t */\r\n\t\tthis.$rootScope = $rootScope;\r\n\r\n\t\t/**\r\n\t\t * A reference to $route.\r\n\t\t */\r\n\t\tthis.$route = $route;\r\n\r\n\t\t/**\r\n\t\t * A reference to RegistrationService.\r\n\t\t */\r\n\t\tthis.registrationService = registrationService;\r\n\r\n\t\t/**\r\n\t\t * Directive restricted to Attribute.\r\n\t\t */\r\n\t\tthis.restrict = 'A';\r\n\r\n\t\t/**\r\n\t\t * Isolated scope for directive.\r\n\t\t */\r\n\t\tthis.scope = {\r\n\t\t\t'moduleName' : '='\r\n\t\t};\r\n\r\n\t\tconst self = this;\r\n\t\t/**\r\n\t\t * Linking function.\r\n\t\t */\r\n\t\tthis.link = function(){\r\n\t\t\tself.linkDirective(...arguments);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Link function for the directive\r\n\t */\r\n\tlinkDirective(scope, element){\r\n\t\tthis.$rootScope.$on('$locationChangeSuccess', () => {\r\n\t\t\tvar newModuleId = this.$route.current.params ? this.$route.current.params.moduleId : null;\r\n\r\n\t\t\t// If there is no new value, we blank\r\n\t\t\tif(newModuleId == null || newModuleId == ''){\r\n\t\t\t\telement.text('');\r\n\t\t\t}\r\n\t\t\t// Else we need to lookup the new value\r\n\t\t\telse{\r\n\t\t\t\tthis.registrationService.getRegistration().then((registrationData) => {\r\n\t\t\t\t\tvar moduleName = '';\r\n\t\t\t\t\tif(registrationData && registrationData.modules && registrationData.modules[newModuleId]){\r\n\t\t\t\t\t\tmoduleName = registrationData.modules[newModuleId].name;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement.text(moduleName);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create a new instance of the directive\r\n */\r\nvar CurrentModuleNameFactory = function() {\r\n\treturn new CurrentModuleName(...arguments);\r\n};\r\nCurrentModuleNameFactory.$inject = ['$rootScope', '$route', 'RegistrationService'];\r\nexport default CurrentModuleNameFactory;\r\n"
  },
  {
    "__docId__": 21,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CurrentModuleName",
    "memberof": "js/base/directives/CurrentModuleName.js",
    "longname": "js/base/directives/CurrentModuleName.js~CurrentModuleName",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/directives/CurrentModuleName.js",
    "importStyle": null,
    "description": "Directive that will display the module name from the module code if available",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 22,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/directives/CurrentModuleName.js~CurrentModuleName",
    "longname": "js/base/directives/CurrentModuleName.js~CurrentModuleName#constructor",
    "access": null,
    "description": "Creates a new instance of the CurrentModuleName directive",
    "lineNumber": 11,
    "params": [
      {
        "name": "$rootScope",
        "types": [
          "*"
        ]
      },
      {
        "name": "$route",
        "types": [
          "*"
        ]
      },
      {
        "name": "registrationService",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$rootScope",
    "memberof": "js/base/directives/CurrentModuleName.js~CurrentModuleName",
    "longname": "js/base/directives/CurrentModuleName.js~CurrentModuleName#$rootScope",
    "access": null,
    "description": "A reference to $rootScope.",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$route",
    "memberof": "js/base/directives/CurrentModuleName.js~CurrentModuleName",
    "longname": "js/base/directives/CurrentModuleName.js~CurrentModuleName#$route",
    "access": null,
    "description": "A reference to $route.",
    "lineNumber": 20,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "registrationService",
    "memberof": "js/base/directives/CurrentModuleName.js~CurrentModuleName",
    "longname": "js/base/directives/CurrentModuleName.js~CurrentModuleName#registrationService",
    "access": null,
    "description": "A reference to RegistrationService.",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "restrict",
    "memberof": "js/base/directives/CurrentModuleName.js~CurrentModuleName",
    "longname": "js/base/directives/CurrentModuleName.js~CurrentModuleName#restrict",
    "access": null,
    "description": "Directive restricted to Attribute.",
    "lineNumber": 30,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scope",
    "memberof": "js/base/directives/CurrentModuleName.js~CurrentModuleName",
    "longname": "js/base/directives/CurrentModuleName.js~CurrentModuleName#scope",
    "access": null,
    "description": "Isolated scope for directive.",
    "lineNumber": 35,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "linkDirective",
    "memberof": "js/base/directives/CurrentModuleName.js~CurrentModuleName",
    "longname": "js/base/directives/CurrentModuleName.js~CurrentModuleName#linkDirective",
    "access": null,
    "description": "Link function for the directive",
    "lineNumber": 51,
    "params": [
      {
        "name": "scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "CurrentModuleNameFactory",
    "memberof": "js/base/directives/CurrentModuleName.js",
    "longname": "js/base/directives/CurrentModuleName.js~CurrentModuleNameFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/directives/CurrentModuleName.js",
    "importStyle": "CurrentModuleNameFactory",
    "description": "Factory to create a new instance of the directive",
    "lineNumber": 76,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/directives/ModuleCollapse.js",
    "memberof": null,
    "longname": "js/base/directives/ModuleCollapse.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n * Directive to collapse a module\r\n */\r\nclass ModuleCollapse {\r\n\r\n\t/**\r\n\t * Creates a new instance of the ModuleCollapse directive\r\n\t */\r\n\tconstructor($rootScope){\r\n\t\t/**\r\n\t\t * A reference to $rootScope.\r\n\t\t */\r\n\t\tthis.$rootScope = $rootScope;\r\n\r\n\t\t/**\r\n\t\t * Directive restricted to Attribute.\r\n\t\t */\r\n\t\tthis.restrict = 'A';\r\n\r\n\t\t/**\r\n\t\t * Isolated scope for directive.\r\n\t\t */\r\n\t\tthis.scope = false;\r\n\t\tconst self = this;\r\n\t\t/**\r\n\t\t * Linking function.\r\n\t\t */\r\n\t\tthis.link = function(){\r\n\t\t\tself.linkDirective(...arguments);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Link function for the directive\r\n\t */\r\n\tlinkDirective(scope, element){\r\n\r\n\t\tvar collapseButton = $(element.find('a')[0]), toCollapse = $(element.find('.collapse')[0]);\r\n\t\tconst self = this;\r\n\r\n\t\t/**\r\n\t\t* Refresh the scrolle before and after modules has been collapsed\r\n\t\t*/\r\n\t\tfunction refreshScoller(){\r\n\t\t\tself.$rootScope.$broadcast('iScrollRefresh', {'scollerId' : 'mainScroll'});\r\n\t\t}\r\n\r\n\t\ttoCollapse.on('shown.bs.collapse', refreshScoller);\r\n\t\ttoCollapse.on('hidden.bs.collapse', refreshScoller);\r\n\r\n\t\t/**\r\n\t\t* Toggles the collapse of a module at the specified index\r\n\t\t*/\r\n\t\tcollapseButton.on('click', function(){\r\n\t\t\ttoCollapse.collapse('toggle');\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create a new instance of the directive\r\n */\r\nvar ModuleCollapseFactory = function() {\r\n\treturn new ModuleCollapse(...arguments);\r\n};\r\nModuleCollapseFactory.$inject = ['$rootScope'];\r\nexport default ModuleCollapseFactory;\r\n"
  },
  {
    "__docId__": 31,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ModuleCollapse",
    "memberof": "js/base/directives/ModuleCollapse.js",
    "longname": "js/base/directives/ModuleCollapse.js~ModuleCollapse",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/directives/ModuleCollapse.js",
    "importStyle": null,
    "description": "Directive to collapse a module",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 32,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/directives/ModuleCollapse.js~ModuleCollapse",
    "longname": "js/base/directives/ModuleCollapse.js~ModuleCollapse#constructor",
    "access": null,
    "description": "Creates a new instance of the ModuleCollapse directive",
    "lineNumber": 11,
    "params": [
      {
        "name": "$rootScope",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$rootScope",
    "memberof": "js/base/directives/ModuleCollapse.js~ModuleCollapse",
    "longname": "js/base/directives/ModuleCollapse.js~ModuleCollapse#$rootScope",
    "access": null,
    "description": "A reference to $rootScope.",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "restrict",
    "memberof": "js/base/directives/ModuleCollapse.js~ModuleCollapse",
    "longname": "js/base/directives/ModuleCollapse.js~ModuleCollapse#restrict",
    "access": null,
    "description": "Directive restricted to Attribute.",
    "lineNumber": 20,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scope",
    "memberof": "js/base/directives/ModuleCollapse.js~ModuleCollapse",
    "longname": "js/base/directives/ModuleCollapse.js~ModuleCollapse#scope",
    "access": null,
    "description": "Isolated scope for directive.",
    "lineNumber": 25,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "linkDirective",
    "memberof": "js/base/directives/ModuleCollapse.js~ModuleCollapse",
    "longname": "js/base/directives/ModuleCollapse.js~ModuleCollapse#linkDirective",
    "access": null,
    "description": "Link function for the directive",
    "lineNumber": 38,
    "params": [
      {
        "name": "scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ModuleCollapseFactory",
    "memberof": "js/base/directives/ModuleCollapse.js",
    "longname": "js/base/directives/ModuleCollapse.js~ModuleCollapseFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/directives/ModuleCollapse.js",
    "importStyle": "ModuleCollapseFactory",
    "description": "Factory to create a new instance of the directive",
    "lineNumber": 65,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/directives/ModuleName.js",
    "memberof": null,
    "longname": "js/base/directives/ModuleName.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Directive that will display the module name from the module code if available\r\n*/\r\nclass ModuleName{\r\n\r\n\t/**\r\n\t * Creates a new instance of the ModuleName directive\r\n\t */\r\n\tconstructor(moduleService){\r\n\t\t/**\r\n\t\t * A reference to ModuleService.\r\n\t\t */\r\n\t\tthis.moduleService = moduleService;\r\n\r\n\t\t/**\r\n\t\t * Directive restricted to Attribute.\r\n\t\t */\r\n\t\tthis.restrict = 'A';\r\n\r\n\t\t/**\r\n\t\t * Isolated scope for directive.\r\n\t\t */\r\n\t\tthis.scope = {\r\n\t\t\t'moduleName' : '='\r\n\t\t};\r\n\r\n\t\tconst self = this;\r\n\t\t/**\r\n\t\t * Linking function.\r\n\t\t */\r\n\t\tthis.link = function(){\r\n\t\t\tself.linkDirective(...arguments);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Link function for the directive\r\n\t */\r\n\tlinkDirective(scope, element){\r\n\t\tconst self = this;\r\n\t\tscope.$watch('moduleName', function(moduleId){\r\n\t\t\tif(moduleId == null){\r\n\t\t\t\telement.text('');\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.moduleService.getModuleName(moduleId).then(function(name){\r\n\t\t\t\t\telement.text(name ? name : 'unknown');\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create a new instance of the directive\r\n */\r\nvar ModuleNameFactory = function() {\r\n\treturn new ModuleName(...arguments);\r\n};\r\nModuleNameFactory.$inject = ['ModuleService'];\r\nexport default ModuleNameFactory;\r\n"
  },
  {
    "__docId__": 39,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ModuleName",
    "memberof": "js/base/directives/ModuleName.js",
    "longname": "js/base/directives/ModuleName.js~ModuleName",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/directives/ModuleName.js",
    "importStyle": null,
    "description": "Directive that will display the module name from the module code if available",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 40,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/directives/ModuleName.js~ModuleName",
    "longname": "js/base/directives/ModuleName.js~ModuleName#constructor",
    "access": null,
    "description": "Creates a new instance of the ModuleName directive",
    "lineNumber": 11,
    "params": [
      {
        "name": "moduleService",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "moduleService",
    "memberof": "js/base/directives/ModuleName.js~ModuleName",
    "longname": "js/base/directives/ModuleName.js~ModuleName#moduleService",
    "access": null,
    "description": "A reference to ModuleService.",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "restrict",
    "memberof": "js/base/directives/ModuleName.js~ModuleName",
    "longname": "js/base/directives/ModuleName.js~ModuleName#restrict",
    "access": null,
    "description": "Directive restricted to Attribute.",
    "lineNumber": 20,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scope",
    "memberof": "js/base/directives/ModuleName.js~ModuleName",
    "longname": "js/base/directives/ModuleName.js~ModuleName#scope",
    "access": null,
    "description": "Isolated scope for directive.",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "linkDirective",
    "memberof": "js/base/directives/ModuleName.js~ModuleName",
    "longname": "js/base/directives/ModuleName.js~ModuleName#linkDirective",
    "access": null,
    "description": "Link function for the directive",
    "lineNumber": 41,
    "params": [
      {
        "name": "scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ModuleNameFactory",
    "memberof": "js/base/directives/ModuleName.js",
    "longname": "js/base/directives/ModuleName.js~ModuleNameFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/directives/ModuleName.js",
    "importStyle": "ModuleNameFactory",
    "description": "Factory to create a new instance of the directive",
    "lineNumber": 60,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/directives/OverallSyncStatus.js",
    "memberof": null,
    "longname": "js/base/directives/OverallSyncStatus.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nclass OverallSyncStatus{\r\n\r\n\t/**\r\n\t * Creates a new instance of the OverallSyncStatus directive\r\n\t */\r\n\tconstructor(syncAPIService){\r\n\t\t/**\r\n\t\t * A reference to SyncAPIService.\r\n\t\t */\r\n\t\tthis.syncAPIService = syncAPIService;\r\n\r\n\t\t/**\r\n\t\t * Directive restricted to Class.\r\n\t\t */\r\n\t\tthis.restrict = 'C';\r\n\r\n\t\t/**\r\n\t\t * Isolated scope for directive.\r\n\t\t */\r\n\t\tthis.scope = {\r\n\t\t\t'tool' : '='\r\n\t\t};\r\n\t\tconst self = this;\r\n\t\t/**\r\n\t\t * Linking function.\r\n\t\t */\r\n\t\tthis.link = function(){\r\n\t\t\tself.linkDirective(...arguments);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Link function for the directive\r\n\t */\r\n\tlinkDirective(scope, element){\r\n\t\tvar cloudElement = $(element.find('.glyphicon')[0]);\r\n\t\tvar self = this;\r\n\t\tfunction updateSyncIndicator(sync){\r\n\r\n\t\t\t/**\r\n\t\t\t* If there is no sync status, or if no sync action or state exists, we\r\n\t\t\t* have to perform a sync check our self to find out what the status is\r\n\t\t\t*/\r\n\t\t\tif(sync == null || (sync.state == null && sync.action == null)){\r\n\t\t\t\tself.syncAPIService.getSyncStatusModulesOffline().then(function(syncStatus){\r\n\t\t\t\t\tupdateSyncIndicator({'action' : null, 'state' : (syncStatus.inSync ? 'inSync' : 'outSync')});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t* If there is a sync action, we use that first\r\n\t\t\t*/\r\n\t\t\telse if(sync.action != null && sync.action !== 'none'){\r\n\t\t\t\tcloudElement.addClass('syncBusy');\r\n\t\t\t\tcloudElement.removeClass('glyphicon-cloud');\r\n\t\t\t\tcloudElement.removeClass('inSync');\r\n\t\t\t\tcloudElement.addClass('outSync');\r\n\t\t\t\tif(sync.action === 'downloading'){\r\n\t\t\t\t\tcloudElement.addClass('glyphicon-cloud-download');\r\n\t\t\t\t\tcloudElement.removeClass('glyphicon-cloud-upload');\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if(sync.action === 'uploading'){\r\n\t\t\t\t\tcloudElement.removeClass('glyphicon-cloud-download');\r\n\t\t\t\t\tcloudElement.addClass('glyphicon-cloud-upload');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// We are only working with the state\r\n\t\t\telse{\r\n\t\t\t\tcloudElement.removeClass('glyphicon-cloud-download');\r\n\t\t\t\tcloudElement.removeClass('glyphicon-cloud-upload');\r\n\t\t\t\tcloudElement.removeClass('syncBusy');\r\n\t\t\t\tcloudElement.addClass('glyphicon-cloud');\r\n\t\t\t\tif(sync.state === 'inSync'){\r\n\t\t\t\t\tcloudElement.addClass('inSync');\r\n\t\t\t\t\tcloudElement.removeClass('outSync');\r\n\t\t\t\t}\r\n\t\t\t\telse if(sync.state === 'outSync'){\r\n\t\t\t\t\tcloudElement.removeClass('inSync');\r\n\t\t\t\t\tcloudElement.addClass('outSync');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tupdateSyncIndicator(null);\r\n\r\n\t\t// Listen for sync state broadcasts\r\n\t\tscope.$on('syncStatusChanged', (event, state) => {\r\n\t\t\tupdateSyncIndicator(state);\r\n\t\t});\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create a new instance of the directive\r\n */\r\nvar OverallSyncStatusFactory = function(){\r\n\treturn new OverallSyncStatus(...arguments);\r\n};\r\nOverallSyncStatusFactory.$inject = ['SyncAPIService'];\r\nexport default OverallSyncStatusFactory;\r\n"
  },
  {
    "__docId__": 47,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "OverallSyncStatus",
    "memberof": "js/base/directives/OverallSyncStatus.js",
    "longname": "js/base/directives/OverallSyncStatus.js~OverallSyncStatus",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/directives/OverallSyncStatus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 48,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/directives/OverallSyncStatus.js~OverallSyncStatus",
    "longname": "js/base/directives/OverallSyncStatus.js~OverallSyncStatus#constructor",
    "access": null,
    "description": "Creates a new instance of the OverallSyncStatus directive",
    "lineNumber": 8,
    "params": [
      {
        "name": "syncAPIService",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "syncAPIService",
    "memberof": "js/base/directives/OverallSyncStatus.js~OverallSyncStatus",
    "longname": "js/base/directives/OverallSyncStatus.js~OverallSyncStatus#syncAPIService",
    "access": null,
    "description": "A reference to SyncAPIService.",
    "lineNumber": 12,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "restrict",
    "memberof": "js/base/directives/OverallSyncStatus.js~OverallSyncStatus",
    "longname": "js/base/directives/OverallSyncStatus.js~OverallSyncStatus#restrict",
    "access": null,
    "description": "Directive restricted to Class.",
    "lineNumber": 17,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scope",
    "memberof": "js/base/directives/OverallSyncStatus.js~OverallSyncStatus",
    "longname": "js/base/directives/OverallSyncStatus.js~OverallSyncStatus#scope",
    "access": null,
    "description": "Isolated scope for directive.",
    "lineNumber": 22,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "linkDirective",
    "memberof": "js/base/directives/OverallSyncStatus.js~OverallSyncStatus",
    "longname": "js/base/directives/OverallSyncStatus.js~OverallSyncStatus#linkDirective",
    "access": null,
    "description": "Link function for the directive",
    "lineNumber": 37,
    "params": [
      {
        "name": "scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "OverallSyncStatusFactory",
    "memberof": "js/base/directives/OverallSyncStatus.js",
    "longname": "js/base/directives/OverallSyncStatus.js~OverallSyncStatusFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/directives/OverallSyncStatus.js",
    "importStyle": "OverallSyncStatusFactory",
    "description": "Factory to create a new instance of the directive",
    "lineNumber": 99,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/directives/SynthAttachments.js",
    "memberof": null,
    "longname": "js/base/directives/SynthAttachments.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Directive to display a button with a list of attachments\r\n*/\r\nclass SynthAttachments{\r\n\r\n\t/**\r\n\t * Creates a new instance of the SynthAttachments directive\r\n\t */\r\n\tconstructor($filter){\r\n\r\n\t\t/**\r\n\t\t * Directive restricted to Element.\r\n\t\t */\r\n\t\tthis.restrict = 'E';\r\n\r\n\t\t/**\r\n\t\t * URL of template to use.\r\n\t\t */\r\n\t\tthis.templateUrl = 'base/partials/directives/attachments.html';\r\n\r\n\t\t/**\r\n\t\t * Isolated scope for directive.\r\n\t\t */\r\n\t\tthis.scope = {\r\n\t\t\t'attachments' : '='\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * A reference to $filter.\r\n\t\t */\r\n\t\tthis.$filter = $filter;\r\n\r\n\t\tconst self = this;\r\n\t\t/**\r\n\t\t * Linking function.\r\n\t\t */\r\n\t\tthis.link = function(){\r\n\t\t\tself.linkDirective(...arguments);\r\n\t\t};\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Link function for the directive\r\n\t */\r\n\tlinkDirective(scope, element, attr){\r\n\t\t// Open an attachment natively on the device\r\n\t\tscope.openAttachment = function(attachment){\r\n\r\n\t\t\twindow.plugins.FileOpener.open(attachment.downloadPath,\r\n\t\t\t\tfunction(){\r\n\r\n\t\t\t\t},\r\n\t\t\t\tfunction(){\r\n\t\t\t\t\t//alert(error);\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t\t// The attachments we need to handle\r\n\t\tscope.attachments = this.$filter('attachments')(scope.attachments);\r\n\r\n\t\t// If the button needs to be pulled in a direction\r\n\t\tif (attr.pull){\r\n\t\t\tif (attr.pull === 'right'){\r\n\t\t\t\tscope.buttonPull = 'pull-right';\r\n\t\t\t}\r\n\t\t\telse if (attr.pull === 'left'){\r\n\t\t\t\tscope.buttonPull = 'pull-left';\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tscope.buttonPull = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tscope.buttonPull = null;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create new instances of the SynthAttachments directive.\r\n */\r\nvar SynthAttachmentsFactory = function(){\r\n\treturn new SynthAttachments(...arguments);\r\n};\r\nSynthAttachmentsFactory.$inject = ['$filter'];\r\nexport default SynthAttachmentsFactory;\r\n"
  },
  {
    "__docId__": 55,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SynthAttachments",
    "memberof": "js/base/directives/SynthAttachments.js",
    "longname": "js/base/directives/SynthAttachments.js~SynthAttachments",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/directives/SynthAttachments.js",
    "importStyle": null,
    "description": "Directive to display a button with a list of attachments",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 56,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/directives/SynthAttachments.js~SynthAttachments",
    "longname": "js/base/directives/SynthAttachments.js~SynthAttachments#constructor",
    "access": null,
    "description": "Creates a new instance of the SynthAttachments directive",
    "lineNumber": 10,
    "params": [
      {
        "name": "$filter",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "restrict",
    "memberof": "js/base/directives/SynthAttachments.js~SynthAttachments",
    "longname": "js/base/directives/SynthAttachments.js~SynthAttachments#restrict",
    "access": null,
    "description": "Directive restricted to Element.",
    "lineNumber": 15,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "templateUrl",
    "memberof": "js/base/directives/SynthAttachments.js~SynthAttachments",
    "longname": "js/base/directives/SynthAttachments.js~SynthAttachments#templateUrl",
    "access": null,
    "description": "URL of template to use.",
    "lineNumber": 20,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scope",
    "memberof": "js/base/directives/SynthAttachments.js~SynthAttachments",
    "longname": "js/base/directives/SynthAttachments.js~SynthAttachments#scope",
    "access": null,
    "description": "Isolated scope for directive.",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$filter",
    "memberof": "js/base/directives/SynthAttachments.js~SynthAttachments",
    "longname": "js/base/directives/SynthAttachments.js~SynthAttachments#$filter",
    "access": null,
    "description": "A reference to $filter.",
    "lineNumber": 32,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "linkDirective",
    "memberof": "js/base/directives/SynthAttachments.js~SynthAttachments",
    "longname": "js/base/directives/SynthAttachments.js~SynthAttachments#linkDirective",
    "access": null,
    "description": "Link function for the directive",
    "lineNumber": 47,
    "params": [
      {
        "name": "scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "attr",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "SynthAttachmentsFactory",
    "memberof": "js/base/directives/SynthAttachments.js",
    "longname": "js/base/directives/SynthAttachments.js~SynthAttachmentsFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/directives/SynthAttachments.js",
    "importStyle": "SynthAttachmentsFactory",
    "description": "Factory to create new instances of the SynthAttachments directive.",
    "lineNumber": 84,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/directives/SynthFooter.js",
    "memberof": null,
    "longname": "js/base/directives/SynthFooter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Directive to create the footer for the application\r\n*/\r\nclass SynthFooter{\r\n\r\n\t/**\r\n\t * Creates a new instance of the SynthFooter directive\r\n\t */\r\n\tconstructor(){\r\n\t\t/**\r\n\t\t * Directive restricted to Element.\r\n\t\t */\r\n\t\tthis.restrict = 'E';\r\n\r\n\t\t/**\r\n\t\t * Isolated scope for directive.\r\n\t\t */\r\n\t\tthis.scope = false;\r\n\r\n\t\t/**\r\n\t\t * URL of template to use.\r\n\t\t */\r\n\t\tthis.templateUrl = 'base/partials/directives/footer.html';\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create new instances of the SynthFooter directive.\r\n */\r\nvar SynthFooterFactory = () => {\r\n\treturn new SynthFooter();\r\n};\r\n\r\nexport default SynthFooterFactory;\r\n"
  },
  {
    "__docId__": 64,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SynthFooter",
    "memberof": "js/base/directives/SynthFooter.js",
    "longname": "js/base/directives/SynthFooter.js~SynthFooter",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/directives/SynthFooter.js",
    "importStyle": null,
    "description": "Directive to create the footer for the application",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/directives/SynthFooter.js~SynthFooter",
    "longname": "js/base/directives/SynthFooter.js~SynthFooter#constructor",
    "access": null,
    "description": "Creates a new instance of the SynthFooter directive",
    "lineNumber": 10,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "restrict",
    "memberof": "js/base/directives/SynthFooter.js~SynthFooter",
    "longname": "js/base/directives/SynthFooter.js~SynthFooter#restrict",
    "access": null,
    "description": "Directive restricted to Element.",
    "lineNumber": 14,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scope",
    "memberof": "js/base/directives/SynthFooter.js~SynthFooter",
    "longname": "js/base/directives/SynthFooter.js~SynthFooter#scope",
    "access": null,
    "description": "Isolated scope for directive.",
    "lineNumber": 19,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "templateUrl",
    "memberof": "js/base/directives/SynthFooter.js~SynthFooter",
    "longname": "js/base/directives/SynthFooter.js~SynthFooter#templateUrl",
    "access": null,
    "description": "URL of template to use.",
    "lineNumber": 24,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SynthFooterFactory",
    "memberof": "js/base/directives/SynthFooter.js",
    "longname": "js/base/directives/SynthFooter.js~SynthFooterFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/directives/SynthFooter.js",
    "importStyle": "SynthFooterFactory",
    "description": "Factory to create new instances of the SynthFooter directive.",
    "lineNumber": 31,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/directives/SynthMenu.js",
    "memberof": null,
    "longname": "js/base/directives/SynthMenu.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nclass SynthMenu {\r\n\r\n\t/**\r\n\t * Creates a new instance of the SynthMenu directive\r\n\t */\r\n\tconstructor($location, userService){\r\n\t\t/**\r\n\t\t * Directive restricted to Element.\r\n\t\t */\r\n\t\tthis.restrict = 'E';\r\n\r\n\t\t/**\r\n\t\t * Isolated scope for directive.\r\n\t\t */\r\n\t\tthis.scope = false;\r\n\r\n\t\t/**\r\n\t\t * URL of template to use.\r\n\t\t */\r\n\t\tthis.templateUrl = 'base/partials/directives/menu.html';\r\n\r\n\t\t/**\r\n\t\t * A reference to $location.\r\n\t\t */\r\n\t\tthis.$location = $location;\r\n\r\n\t\t/**\r\n\t\t * A reference to UserService.\r\n\t\t */\r\n\t\tthis.userService = userService;\r\n\t\tconst self = this;\r\n\r\n\t\t/**\r\n\t\t * Linking function.\r\n\t\t */\r\n\t\tthis.link = function(){\r\n\t\t\tself.linkDirective(...arguments);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Link function for the directive\r\n\t */\r\n\tlinkDirective(scope){\r\n\t\tconst $location = this.$location,\r\n\t\t\tself = this;\r\n\t\tscope.menuOpen = false;\r\n\t\tscope.isRegistered = false;\r\n\r\n\t\tscope.toggleMenu = () => {\r\n\t\t\tscope.menuOpen = !scope.menuOpen;\r\n\t\t};\r\n\t\tscope.openLink = (link) => {\r\n\t\t\tscope.menuOpen = false;\r\n\t\t\t$location.path(link);\r\n\t\t};\r\n\r\n\t\tfunction updateCompleteFlag(){\r\n\t\t\tself.userService.isRegistrationComplete().then((iscomplete) => {\r\n\t\t\t\tif(scope.isRegistered !== iscomplete){\r\n\t\t\t\t\tscope.isRegistered = iscomplete;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tupdateCompleteFlag();\r\n\r\n\t\tscope.$on('registrationDataChanged', () => {\r\n\t\t\tupdateCompleteFlag();\r\n\t\t});\r\n\r\n\r\n\t\t// Open sync page if user is registered\r\n\t\tscope.openSync = () => {\r\n\t\t\t// Make sure the close the menu that could maybe be open\r\n\t\t\tscope.menuOpen = false;\r\n\r\n\t\t\tif(scope.isRegistered){\r\n\t\t\t\t$location.path('/sync');\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create new instances of the SynthMenu directive\r\n */\r\nvar SynthMenuFactory = function() {\r\n\treturn new SynthMenu(...arguments);\r\n};\r\nSynthMenuFactory.$inject = ['$location', 'UserService'];\r\nexport default SynthMenuFactory;\r\n"
  },
  {
    "__docId__": 71,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SynthMenu",
    "memberof": "js/base/directives/SynthMenu.js",
    "longname": "js/base/directives/SynthMenu.js~SynthMenu",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/directives/SynthMenu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/directives/SynthMenu.js~SynthMenu",
    "longname": "js/base/directives/SynthMenu.js~SynthMenu#constructor",
    "access": null,
    "description": "Creates a new instance of the SynthMenu directive",
    "lineNumber": 8,
    "params": [
      {
        "name": "$location",
        "types": [
          "*"
        ]
      },
      {
        "name": "userService",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "restrict",
    "memberof": "js/base/directives/SynthMenu.js~SynthMenu",
    "longname": "js/base/directives/SynthMenu.js~SynthMenu#restrict",
    "access": null,
    "description": "Directive restricted to Element.",
    "lineNumber": 12,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scope",
    "memberof": "js/base/directives/SynthMenu.js~SynthMenu",
    "longname": "js/base/directives/SynthMenu.js~SynthMenu#scope",
    "access": null,
    "description": "Isolated scope for directive.",
    "lineNumber": 17,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "templateUrl",
    "memberof": "js/base/directives/SynthMenu.js~SynthMenu",
    "longname": "js/base/directives/SynthMenu.js~SynthMenu#templateUrl",
    "access": null,
    "description": "URL of template to use.",
    "lineNumber": 22,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$location",
    "memberof": "js/base/directives/SynthMenu.js~SynthMenu",
    "longname": "js/base/directives/SynthMenu.js~SynthMenu#$location",
    "access": null,
    "description": "A reference to $location.",
    "lineNumber": 27,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "userService",
    "memberof": "js/base/directives/SynthMenu.js~SynthMenu",
    "longname": "js/base/directives/SynthMenu.js~SynthMenu#userService",
    "access": null,
    "description": "A reference to UserService.",
    "lineNumber": 32,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "linkDirective",
    "memberof": "js/base/directives/SynthMenu.js~SynthMenu",
    "longname": "js/base/directives/SynthMenu.js~SynthMenu#linkDirective",
    "access": null,
    "description": "Link function for the directive",
    "lineNumber": 46,
    "params": [
      {
        "name": "scope",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "SynthMenuFactory",
    "memberof": "js/base/directives/SynthMenu.js",
    "longname": "js/base/directives/SynthMenu.js~SynthMenuFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/directives/SynthMenu.js",
    "importStyle": "SynthMenuFactory",
    "description": "Factory to create new instances of the SynthMenu directive",
    "lineNumber": 90,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/directives/ToolName.js",
    "memberof": null,
    "longname": "js/base/directives/ToolName.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nclass ToolName {\r\n\r\n\t/**\r\n\t * Creates a new instance of the ToolName directive\r\n\t */\r\n\tconstructor(moduleService){\r\n\t\t/**\r\n\t\t * Directive restricted to Attribute.\r\n\t\t */\r\n\t\tthis.restrict = 'A';\r\n\r\n\t\t/**\r\n\t\t * Isolated scope for directive.\r\n\t\t */\r\n\t\tthis.scope = {\r\n\t\t\t'moduleId' : '=',\r\n\t\t\t'toolName' : '='\r\n\t\t};\r\n\t\tconst self = this;\r\n\r\n\t\t/**\r\n\t\t * Linking function.\r\n\t\t */\r\n\t\tthis.link = function(){\r\n\t\t\tself.linkDirective(...arguments);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * A reference to ModuleService.\r\n\t\t */\r\n\t\tthis.moduleService = moduleService;\r\n\t}\r\n\r\n\t/**\r\n\t * Link function for the directive\r\n\t */\r\n\tlinkDirective(scope, element, attrs){\r\n\t\tif(!angular.isDefined(attrs.moduleId)){\r\n\t\t\tthrow '\"moduleId\" should be an attribute of this directive.';\r\n\t\t}\r\n\t\tconst self = this;\r\n\t\tfunction update(){\r\n\t\t\tif(scope.moduleId == null || scope.toolName == null){\r\n\t\t\t\telement.text('');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tself.moduleService.getToolName(scope.moduleId, scope.toolName)\r\n\t\t\t\t\t.then(function(name){\r\n\t\t\t\t\t\telement.text(name ? name : 'unknown');\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tscope.$watch('moduleName', update);\r\n\t\tscope.$watch('toolName', update);\r\n\t}\r\n}\r\n/**\r\n * Factory to create a new instance of the directive\r\n */\r\nvar ToolNameFactory = function(){\r\n\treturn new ToolName(...arguments);\r\n};\r\nToolNameFactory.$inject = ['ModuleService'];\r\nexport default ToolNameFactory;\r\n"
  },
  {
    "__docId__": 81,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ToolName",
    "memberof": "js/base/directives/ToolName.js",
    "longname": "js/base/directives/ToolName.js~ToolName",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/directives/ToolName.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/directives/ToolName.js~ToolName",
    "longname": "js/base/directives/ToolName.js~ToolName#constructor",
    "access": null,
    "description": "Creates a new instance of the ToolName directive",
    "lineNumber": 8,
    "params": [
      {
        "name": "moduleService",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "restrict",
    "memberof": "js/base/directives/ToolName.js~ToolName",
    "longname": "js/base/directives/ToolName.js~ToolName#restrict",
    "access": null,
    "description": "Directive restricted to Attribute.",
    "lineNumber": 12,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scope",
    "memberof": "js/base/directives/ToolName.js~ToolName",
    "longname": "js/base/directives/ToolName.js~ToolName#scope",
    "access": null,
    "description": "Isolated scope for directive.",
    "lineNumber": 17,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "moduleService",
    "memberof": "js/base/directives/ToolName.js~ToolName",
    "longname": "js/base/directives/ToolName.js~ToolName#moduleService",
    "access": null,
    "description": "A reference to ModuleService.",
    "lineNumber": 33,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "linkDirective",
    "memberof": "js/base/directives/ToolName.js~ToolName",
    "longname": "js/base/directives/ToolName.js~ToolName#linkDirective",
    "access": null,
    "description": "Link function for the directive",
    "lineNumber": 39,
    "params": [
      {
        "name": "scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrs",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ToolNameFactory",
    "memberof": "js/base/directives/ToolName.js",
    "longname": "js/base/directives/ToolName.js~ToolNameFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/directives/ToolName.js",
    "importStyle": "ToolNameFactory",
    "description": "Factory to create a new instance of the directive",
    "lineNumber": 63,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/directives/ToolSyncStatus.js",
    "memberof": null,
    "longname": "js/base/directives/ToolSyncStatus.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n * Directive to show the sync status of a tool\r\n */\r\nclass ToolSyncStatus{\r\n\r\n\t/**\r\n\t * Creates a new instance of the ToolSyncStatus directive\r\n\t */\r\n\tconstructor(syncAPIService){\r\n\r\n\t\t/**\r\n\t\t * A reference to SyncAPIService.\r\n\t\t */\r\n\t\tthis.syncAPIService = syncAPIService;\r\n\r\n\t\t/**\r\n\t\t * Directive restricted to Class.\r\n\t\t */\r\n\t\tthis.restrict = 'C';\r\n\r\n\t\t/**\r\n\t\t * Isolated scope for directive.\r\n\t\t */\r\n\t\tthis.scope = {\r\n\t\t\t'tool' : '='\r\n\t\t};\r\n\t\tconst self = this;\r\n\r\n\t\t/**\r\n\t\t * Linking function.\r\n\t\t */\r\n\t\tthis.link = function(){\r\n\t\t\tself.linkDirective(...arguments);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Link function for the directive\r\n\t */\r\n\tlinkDirective(scope, element){\r\n\t\tvar tool = scope.tool;\r\n\t\tconst self = this;\r\n\r\n\t\tfunction updateToolSyncIndicator(){\r\n\t\t\tself.syncAPIService.getSyncStatusToolOffline(tool.moduleId, tool.key).then((syncStatus) => {\r\n\t\t\t\tif(syncStatus.inSync){\r\n\t\t\t\t\telement.addClass('inSync');\r\n\t\t\t\t\telement.removeClass('outSync');\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\telement.removeClass('inSync');\r\n\t\t\t\t\telement.addClass('outSync');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tupdateToolSyncIndicator();\r\n\r\n\t\tscope.$on('syncStatusChanged', () => {\r\n\t\t\tupdateToolSyncIndicator();\r\n\t\t});\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create new instances of the ToolSyncStatus directive\r\n */\r\nvar ToolSyncStatusFactory = function(){\r\n\treturn new ToolSyncStatus(...arguments);\r\n};\r\nToolSyncStatusFactory.$inject = ['SyncAPIService'];\r\nexport default ToolSyncStatusFactory;\r\n"
  },
  {
    "__docId__": 89,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ToolSyncStatus",
    "memberof": "js/base/directives/ToolSyncStatus.js",
    "longname": "js/base/directives/ToolSyncStatus.js~ToolSyncStatus",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/directives/ToolSyncStatus.js",
    "importStyle": null,
    "description": "Directive to show the sync status of a tool",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 90,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/directives/ToolSyncStatus.js~ToolSyncStatus",
    "longname": "js/base/directives/ToolSyncStatus.js~ToolSyncStatus#constructor",
    "access": null,
    "description": "Creates a new instance of the ToolSyncStatus directive",
    "lineNumber": 10,
    "params": [
      {
        "name": "syncAPIService",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "syncAPIService",
    "memberof": "js/base/directives/ToolSyncStatus.js~ToolSyncStatus",
    "longname": "js/base/directives/ToolSyncStatus.js~ToolSyncStatus#syncAPIService",
    "access": null,
    "description": "A reference to SyncAPIService.",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "restrict",
    "memberof": "js/base/directives/ToolSyncStatus.js~ToolSyncStatus",
    "longname": "js/base/directives/ToolSyncStatus.js~ToolSyncStatus#restrict",
    "access": null,
    "description": "Directive restricted to Class.",
    "lineNumber": 20,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scope",
    "memberof": "js/base/directives/ToolSyncStatus.js~ToolSyncStatus",
    "longname": "js/base/directives/ToolSyncStatus.js~ToolSyncStatus#scope",
    "access": null,
    "description": "Isolated scope for directive.",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "linkDirective",
    "memberof": "js/base/directives/ToolSyncStatus.js~ToolSyncStatus",
    "longname": "js/base/directives/ToolSyncStatus.js~ToolSyncStatus#linkDirective",
    "access": null,
    "description": "Link function for the directive",
    "lineNumber": 41,
    "params": [
      {
        "name": "scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ToolSyncStatusFactory",
    "memberof": "js/base/directives/ToolSyncStatus.js",
    "longname": "js/base/directives/ToolSyncStatus.js~ToolSyncStatusFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/directives/ToolSyncStatus.js",
    "importStyle": "ToolSyncStatusFactory",
    "description": "Factory to create new instances of the ToolSyncStatus directive",
    "lineNumber": 69,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/factories/AppSyncStatus.js",
    "memberof": null,
    "longname": "js/base/factories/AppSyncStatus.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Factory that contains the application's sync status.\r\n* This object is ONLY entended to be used to indicate if the application\r\n* is in sync. DO NOT use this object as a pass-through object between sync controllers/services\r\n*/\r\nclass AppSyncStatus {\r\n\tconstructor() {\r\n\t\t// Flag if the app is overall in sync\r\n\t\tthis.inSync = false;\r\n\t\t// Array of tools which each will have an inSync flag\r\n\t\tthis.tools = {};\r\n\t}\r\n\r\n\t// Function to mark all as out of sync\r\n\tallOutSync(){\r\n\t\tthis.inSync = false;\r\n\t\tthis.tools = {};\r\n\t}\r\n\r\n\t/*\r\n\t* Function to update the sync status of a tool\r\n\t* If no tool is specified, it will update the overall status\r\n\t*/\r\n\tupdate(inSync, tool){\r\n\t\tif (tool == null){\r\n\t\t\tthis.inSync = false;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.tools = this.tools || {};\r\n\t\t\tthis.tools[tool] = this.tools[tool] || {};\r\n\t\t\tthis.tools[tool].inSync = inSync;\r\n\t\t}\r\n\t}\r\n\r\n\t// Function to update the sync status of all the tools\r\n\tupdateTools(tools){\r\n\t\tif(tools == null){\r\n\t\t\tthis.tools = {};\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.tools = tools;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory function to create the Object\r\n */\r\nexport default function AppSyncStatusFactory(){\r\n\treturn new AppSyncStatus();\r\n}\r\n"
  },
  {
    "__docId__": 97,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AppSyncStatus",
    "memberof": "js/base/factories/AppSyncStatus.js",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/factories/AppSyncStatus.js",
    "importStyle": null,
    "description": "Factory that contains the application's sync status.\nThis object is ONLY entended to be used to indicate if the application\nis in sync. DO NOT use this object as a pass-through object between sync controllers/services",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 98,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "inSync",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#inSync",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tools",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#tools",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "allOutSync",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#allOutSync",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "inSync",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#inSync",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tools",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#tools",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#update",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "inSync",
        "types": [
          "*"
        ]
      },
      {
        "name": "tool",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "inSync",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#inSync",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tools",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#tools",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateTools",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#updateTools",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "tools",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tools",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#tools",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tools",
    "memberof": "js/base/factories/AppSyncStatus.js~AppSyncStatus",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatus#tools",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "AppSyncStatusFactory",
    "memberof": "js/base/factories/AppSyncStatus.js",
    "longname": "js/base/factories/AppSyncStatus.js~AppSyncStatusFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/factories/AppSyncStatus.js",
    "importStyle": "AppSyncStatusFactory",
    "description": "Factory function to create the Object",
    "lineNumber": 50,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/factories/Lock.js",
    "memberof": null,
    "longname": "js/base/factories/Lock.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n * A class providing a synchronisation lock\r\n */\r\nclass Lock{\r\n\r\n\tconstructor($q, $timeout){\r\n\t\tthis.$q = $q;\r\n\t\tthis.$timeout = $timeout;\r\n\t\tthis.lockMap = {}; // Map of pending \"threads\" for a lock\r\n\t}\r\n\r\n\t/**\r\n\t * @param key They key we are locking on\r\n\t * @param failOnLocked Flag if the promise should immediatly reject if we are not exclusively locking\r\n\t */\r\n\tgetLock(key, failOnLocked = false){\r\n\t\tif(this.lockMap[key] == null){\r\n\t\t\tthis.lockMap[key] = [];\r\n\t\t}\r\n\t\t// Add ourself to the lock map\r\n\t\tthis.lockMap[key][this.lockMap[key].length] = this.$q.defer();\r\n\r\n\t\t// If we are the only pending promise, we can resolve\r\n\t\tif(this.lockMap[key].length === 1){\r\n\t\t\tlet resolveKey = key;\r\n\t\t\tthis.$timeout(() => {\r\n\t\t\t\tthis.lockMap[resolveKey][0].resolve();\r\n\t\t\t}, 1);\r\n\t\t}\r\n\t\telse if(failOnLocked === true){\r\n\t\t\tlet resolveKey = key;\r\n\t\t\tthis.$timeout(() => {\r\n\t\t\t\tthis.lockMap[resolveKey][0].reject();\r\n\t\t\t}, 1);\r\n\t\t}\r\n\t\treturn this.lockMap[key][this.lockMap[key].length - 1].promise;\r\n\t}\r\n\r\n\t/**\r\n\t * Resolves the promise of the next queued \"thread\" waiting for a lock\r\n\t */\r\n\t_resolveNextLock(key){\r\n\t\tif(this.lockMap[key] != null){\r\n\t\t\tif(this.lockMap[key].length === 0){\r\n\t\t\t\tdelete this.lockMap[key];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlet resolveKey = key;\r\n\t\t\t\tthis.$timeout(() => {\r\n\t\t\t\t\tthis.lockMap[resolveKey][0].resolve();\r\n\t\t\t\t}, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a aquired lock\r\n\t * @param key The Key of the lock to return\r\n\t * @param returnData the data to return with the resolved promise\r\n\t * @param resolve If true, the promise will be resolve, if false, a rejected promise will be returns\r\n\t */\r\n\treturnLock(key, returnData = true, resolve = true){\r\n\t\tthis.lockMap[key].splice(0, 1);\r\n\t\tthis._resolveNextLock(key);\r\n\t\tif(resolve){\r\n\t\t\treturn this.$q.when(returnData);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn this.$q.reject(returnData);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create a Lock\r\n*/\r\nvar LockFactory = function(){\r\n\treturn new Lock(...arguments);\r\n};\r\nLockFactory.$inject = ['$q', '$timeout'];\r\nexport default LockFactory;\r\n"
  },
  {
    "__docId__": 112,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Lock",
    "memberof": "js/base/factories/Lock.js",
    "longname": "js/base/factories/Lock.js~Lock",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/factories/Lock.js",
    "importStyle": null,
    "description": "A class providing a synchronisation lock",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/factories/Lock.js~Lock",
    "longname": "js/base/factories/Lock.js~Lock#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "$q",
        "types": [
          "*"
        ]
      },
      {
        "name": "$timeout",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$q",
    "memberof": "js/base/factories/Lock.js~Lock",
    "longname": "js/base/factories/Lock.js~Lock#$q",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$timeout",
    "memberof": "js/base/factories/Lock.js~Lock",
    "longname": "js/base/factories/Lock.js~Lock#$timeout",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "lockMap",
    "memberof": "js/base/factories/Lock.js~Lock",
    "longname": "js/base/factories/Lock.js~Lock#lockMap",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLock",
    "memberof": "js/base/factories/Lock.js~Lock",
    "longname": "js/base/factories/Lock.js~Lock#getLock",
    "access": null,
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "They key we are locking on"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "failOnLocked",
        "description": "Flag if the promise should immediatly reject if we are not exclusively locking"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveNextLock",
    "memberof": "js/base/factories/Lock.js~Lock",
    "longname": "js/base/factories/Lock.js~Lock#_resolveNextLock",
    "access": null,
    "description": "Resolves the promise of the next queued \"thread\" waiting for a lock",
    "lineNumber": 44,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "returnLock",
    "memberof": "js/base/factories/Lock.js~Lock",
    "longname": "js/base/factories/Lock.js~Lock#returnLock",
    "access": null,
    "description": "Returns a aquired lock",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The Key of the lock to return"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "returnData",
        "description": "the data to return with the resolved promise"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "resolve",
        "description": "If true, the promise will be resolve, if false, a rejected promise will be returns"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "LockFactory",
    "memberof": "js/base/factories/Lock.js",
    "longname": "js/base/factories/Lock.js~LockFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/factories/Lock.js",
    "importStyle": "LockFactory",
    "description": "Factory to create a Lock",
    "lineNumber": 79,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/factories/SynthAuthenticateUser.js",
    "memberof": null,
    "longname": "js/base/factories/SynthAuthenticateUser.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Helper to authenticate a user\r\n* The success callback of the promise will receive the following object\r\n*\r\n* {\r\n*\t'code' \t : 'success code ',\r\n*\t'username' : 'the username',\r\n*\t'password' : 'the password'\r\n* }\r\n*\r\n* The success code can be compared with the following variables:\r\n* SynthAuthenticateUser.SUCCESS\t- 0\r\n* SynthAuthenticateUser.FAILED\t - 1\r\n* SynthAuthenticateUser.CANCELLED  - 2\r\n*/\r\nvar SynthAuthenticateUser = ($q, RegistrationService, $injector, $rootScope) => {\r\n\tvar SynthesisRESTClient;\r\n\treturn {\r\n\t\t'FAILED' : '1',\r\n\t\t'SUCCESS' : '0',\r\n\t\t'CANCELLED' : '2',\r\n\t\t'login' : function(titleText = 'Please enter password', submitText = 'Authenticate'){\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\t// If we don't have an instance yet, lets inject one now\r\n\t\t\tif(SynthesisRESTClient == null){\r\n\t\t\t\tSynthesisRESTClient = $injector.get('SynthesisRESTClient'); // Used injector to avoid runtime dependency circles\r\n\t\t\t}\r\n\r\n\t\t\tRegistrationService.getRegistration().then((registrationData) => {\r\n\t\t\t\t// If we have the password, just check if it is still valid\r\n\t\t\t\tif (registrationData.authToken != null){\r\n\t\t\t\t\tSynthesisRESTClient\r\n\t\t\t\t\t.authenticateUser(registrationData.username, registrationData.authToken, true)\r\n\t\t\t\t\t.then(\r\n\t\t\t\t\t\t(result) => {\r\n\t\t\t\t\t\t\tif(result.authenticated){\r\n\t\t\t\t\t\t\t\tdeferred.resolve({'code' : 0,\r\n\t\t\t\t\t\t\t\t'username' : result.username,\r\n\t\t\t\t\t\t\t\t'authToken' : result.authToken}); // SUCCESS\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tshowAuthenticationDialog(registrationData.username);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t(error) => {\r\n\t\t\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t// If we don't have an auth token, we need to start off\r\n\t\t\t\t// by showing the authentication dialog\r\n\t\t\t\telse {\r\n\t\t\t\t\tshowAuthenticationDialog(registrationData.username);\r\n\t\t\t\t}\r\n\t\t\t}, (error) => {\r\n\t\t\t\tdeferred.reject(error);\r\n\t\t\t});\r\n\r\n\r\n\t\t\tfunction cleanup(){\r\n\t\t\t\t$rootScope.authenticationModel = null;\r\n\t\t\t\t$rootScope.authenticationOk = null;\r\n\t\t\t\t$rootScope.authenticationCancelled = null;\r\n\t\t\t}\r\n\r\n\t\t\t// Show the authentication dialog and register all the callbacks\r\n\t\t\tfunction showAuthenticationDialog(username){\r\n\t\t\t\t// Reset model used for login\r\n\t\t\t\t$rootScope.authenticationModel = {\r\n\t\t\t\t\t// Username of the current user\r\n\t\t\t\t\t'username' : username,\r\n\r\n\t\t\t\t\t// Password of the current user\r\n\t\t\t\t\t'password' : null,\r\n\r\n\t\t\t\t\t// Flag if the authentication failed\r\n\t\t\t\t\t'authFailed' : false,\r\n\r\n\t\t\t\t\t// Message to show if authentication failed\r\n\t\t\t\t\t'message' : null,\r\n\r\n\t\t\t\t\t// Instruction to show if the authentication failed\r\n\t\t\t\t\t'instruction' : null,\r\n\r\n\t\t\t\t\t// Text to display on the submit button\r\n\t\t\t\t\t'submitText' : submitText,\r\n\r\n\t\t\t\t\t// Title to display for the login\r\n\t\t\t\t\t'titleText' : titleText\r\n\t\t\t\t};\r\n\r\n\r\n\t\t\t\t// Callback when the user presses OK to authenticate\r\n\t\t\t\t$rootScope.authenticationOk = function(){\r\n\t\t\t\t\tSynthesisRESTClient\r\n\t\t\t\t\t.authenticateUser($rootScope.authenticationModel.username, $rootScope.authenticationModel.password)\r\n\t\t\t\t\t.then(\r\n\t\t\t\t\t\tfunction success(result){\r\n\t\t\t\t\t\t\tif(result.authenticated){\r\n\t\t\t\t\t\t\t\t$('#synthAuthenticationModal').modal('hide');\r\n\t\t\t\t\t\t\t\tdeferred.resolve({'code' : 0,\r\n\t\t\t\t\t\t\t\t'username' : $rootScope.authenticationModel.username,\r\n\t\t\t\t\t\t\t\t'password' : $rootScope.authenticationModel.password}); // SUCCESS\r\n\t\t\t\t\t\t\t\tcleanup();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t// Get the message and instruction from the result and display\r\n\t\t\t\t\t\t\t\t$rootScope.authenticationModel.message = result.message;\r\n\t\t\t\t\t\t\t\t$rootScope.authenticationModel.instruction = result.instruction;\r\n\t\t\t\t\t\t\t\t$rootScope.authenticationModel.password = null;\r\n\t\t\t\t\t\t\t\t$rootScope.authenticationModel.authFailed = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tfunction errorHandler (error){\r\n\t\t\t\t\t\t\t$('#synthAuthenticationModal').modal('hide');\r\n\t\t\t\t\t\t\tcleanup();\r\n\t\t\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Callback when the user cancelled Authentication\r\n\t\t\t\t$rootScope.authenticationCancelled = function(){\r\n\t\t\t\t\t$('#synthAuthenticationModal').modal('hide');\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tdeferred.resolve({'code' : 2}); // Cancelled\r\n\t\t\t\t};\r\n\t\t\t\t// Show the error dialog\r\n\t\t\t\t$('#synthAuthenticationModal').modal('show');\r\n\t\t\t}\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\t};\r\n};\r\nSynthAuthenticateUser.$inject = ['$q', 'RegistrationService', '$injector', '$rootScope'];\r\nexport default SynthAuthenticateUser;\r\n"
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SynthAuthenticateUser",
    "memberof": "js/base/factories/SynthAuthenticateUser.js",
    "longname": "js/base/factories/SynthAuthenticateUser.js~SynthAuthenticateUser",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/factories/SynthAuthenticateUser.js",
    "importStyle": "SynthAuthenticateUser",
    "description": "Helper to authenticate a user\nThe success callback of the promise will receive the following object\n\n{\n'code' \t : 'success code ',\n'username' : 'the username',\n'password' : 'the password'\n}\n\nThe success code can be compared with the following variables:\nSynthAuthenticateUser.SUCCESS\t- 0\nSynthAuthenticateUser.FAILED\t - 1\nSynthAuthenticateUser.CANCELLED  - 2",
    "lineNumber": 18,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/factories/SynthCheckResponseError.js",
    "memberof": null,
    "longname": "js/base/factories/SynthCheckResponseError.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Default fail method that rejects a deferred\r\n* by passing the error as the reason.\r\n*/\r\nvar SynthCheckResponseError = (SynthError, LoggerService, RegistrationService) => {\r\n\r\n\tvar LOG = LoggerService('SynthCheckResponseError');\r\n\r\n\treturn function(deferred, response){\r\n\r\n\t\t/*\r\n\t\t* If authentication failed, we will remove the auth token\r\n\t\t* from our saved file and from the UserSession\r\n\t\t*/\r\n\t\tif(response.errorCode === 2002){\r\n\t\t\tvar newData = {\r\n\t\t\t\t'authToken' : null\r\n\t\t\t};\r\n\t\t\tRegistrationService.mergeRegistration(newData);// There might be a little sync issue here\r\n\t\t}\r\n\r\n\t\t/* If there is no status field, all is good */\r\n\t\tif (response.status === undefined) {\r\n\t\t\t// Return false; there was no error\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t/* If the response from the server had a status of 'SUCCESS', all is\r\n\t\t* good and no need to reject */\r\n\t\telse if (response.status === 'SUCCESS') {\r\n\t\t\t// Return false; there was no error\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t/* If the response from the server did not have a status of 'SUCCESS'\r\n\t\t* we have to reject the promise. We create a new SynthError by passing\r\n\t\t* the server response. */\r\n\t\telse{\r\n\t\t\tif(LOG.isWARN()){\r\n\t\t\t\tLOG.warn('Got error response : ' + JSON.stringify(response));\r\n\t\t\t}\r\n\t\t\tif(deferred != null){\r\n\t\t\t\tdeferred.reject(SynthError(response));\r\n\t\t\t}\r\n\t\t\t// Return true; there was an error\r\n\t\t\treturn true;\r\n\t\t}\r\n\t};\r\n};\r\nSynthCheckResponseError.$inject = ['SynthError', 'LoggerService', 'RegistrationService'];\r\nexport default SynthCheckResponseError;\r\n"
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SynthCheckResponseError",
    "memberof": "js/base/factories/SynthCheckResponseError.js",
    "longname": "js/base/factories/SynthCheckResponseError.js~SynthCheckResponseError",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/factories/SynthCheckResponseError.js",
    "importStyle": "SynthCheckResponseError",
    "description": "Default fail method that rejects a deferred\nby passing the error as the reason.",
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/factories/SynthError.js",
    "memberof": null,
    "longname": "js/base/factories/SynthError.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Factory to create error with\r\n*/\r\nvar SynthError = () => {\r\n\r\n\t// Map of errors\r\n\tvar errors = {\r\n\t\t'1000' : {\r\n\t\t\t'id' : 1000,\r\n\t\t\t'errorMessage' : 'Exception occurred',\r\n\t\t\t'errorDescription' : 'Your request could not be completed. Something unexpected had happened',\r\n\t\t\t'errorInstructions' : 'Please contact your administrator'\r\n\t\t},\r\n\t\t'1001' : {\r\n\t\t\t'id' : 1001,\r\n\t\t\t'errorMessage' : 'Error parsing json object',\r\n\t\t\t'errorDescription' : 'An error occurred while trying to parse a json object. These could be the possible causes: <ul><li>Character encoding is not supported</li><li>Invalid content mapping</li><li>Content could not be parsed</li><li>Could not write to an object</li></ul>',\r\n\t\t\t'errorInstruction' : 'Please contact your administrator'\r\n\t\t},\r\n\t\t'1002' : {\r\n\t\t\t'id' : 1002,\r\n\t\t\t'errorMessage' : 'Error parsing json object',\r\n\t\t\t'errorDescription' : 'An error occurred while trying to parse a json object. These could be the possible causes:<ul><li>Invalid content mapping</li><li>Could not write content to json file</li><li>Could not write object to json file</li></ul>',\r\n\t\t\t'errorInstruction' : 'Please contact your administrator'\r\n\t\t},\r\n\t\t'1003' : {\r\n\t\t\t'id' : 1003,\r\n\t\t\t'errorMessage' : 'Could not post event',\r\n\t\t\t'errorDescription' : 'Could not post the event. These could be the possible causes:<ul><li>The LMS service is down</li><li>Your login credentials are invalid</li></u;>',\r\n\t\t\t'errorInstruction' : 'Please ensure that the LMS service is up and running and that your log in credentials are valid'\r\n\t\t},\r\n\t\t'1004' : {\r\n\t\t\t'id' : 1004,\r\n\t\t\t'errorMessage' : 'File manipulation failed',\r\n\t\t\t'errorDescription' : 'File manipulation failed. These could be the possible causes:<ul><li>Could not create the directory structure for the code location</li><li>Could not copy the tool code to the code location</li></ul>',\r\n\t\t\t'errorInstruction' : 'Check that the code location property is correct'\r\n\t\t},\r\n\t\t'1005' : {\r\n\t\t\t'id' : 1005,\r\n\t\t\t'errorMessage' : 'Log in failed',\r\n\t\t\t'errorDescription' : 'Could not log in to LMS for user. These could be the posible causes: <ul><li>The Sakia service is down</li><li>Your log in credentials are invalid</li></ul>',\r\n\t\t\t'errorInstruction' : 'Check that the Sakia service is running and that your log in credentials are valid.'\r\n\t\t},\r\n\t\t'1006' : {\r\n\t\t\t'id' : 1006,\r\n\t\t\t'errorMessage' : 'Retrieval failed',\r\n\t\t\t'errorDescription' : 'Could not retrieve modules from the LMS service. These could be the possible causes:<ul><li>The LMS service is down</li><li>There was a problem retrieving modules</li></ul>',\r\n\t\t\t'errorInstruction' : 'Check that the LMS service is running.'\r\n\t\t},\r\n\t\t'1007' : {\r\n\t\t\t'id' : 1007,\r\n\t\t\t'errorMessage' : 'Problem reading the sites xml',\r\n\t\t\t'errorDescription' : 'There was a problem reading the sites xml. These could be the possible causes:<ul><li>Could not compile the xpath expression</li><li>No data was found for the site</li></ul>',\r\n\t\t\t'errorInstruction' : 'Please contact your administrator'\r\n\t\t},\r\n\t\t'1008' : {\r\n\t\t\t'id' : 1008,\r\n\t\t\t'errorMessage' : 'Retrieval failed',\r\n\t\t\t'errorDescription' : 'The pages and tools could not be retreived from the LMS engine',\r\n\t\t\t'errorInstruction' : 'Please ensure that the LMS engine is up and running'\r\n\t\t},\r\n\t\t'1009' : {\r\n\t\t\t'id' : 1009,\r\n\t\t\t'errorMessage' : 'Configuration failure',\r\n\t\t\t'errorDescription' : 'The sax parser could not be configured',\r\n\t\t\t'errorInstruction' : 'Please contact the administrator'\r\n\t\t},\r\n\t\t'1010' : {\r\n\t\t\t'id' : 1010,\r\n\t\t\t'errorMessage' : 'Invalid xml document',\r\n\t\t\t'errorDescription' : 'The xml doucment returned from the LMS service is invalid',\r\n\t\t\t'errorInstruction' : 'Please contact administrator'\r\n\t\t},\r\n\t\t'1011' : {\r\n\t\t\t'id' : 1011,\r\n\t\t\t'errorMessage' : 'Device not recognised',\r\n\t\t\t'errorDescription' : 'The is no data in the database for this device',\r\n\t\t\t'errorInstruction' : 'Check that the device is registered and valid on the Unipoole service.'\r\n\t\t},\r\n\t\t'1012' : {\r\n\t\t\t'id' : 1012,\r\n\t\t\t'errorMessage' : 'Registration tool not found',\r\n\t\t\t'errorDescription' : 'The is no registration tool found. The device is registered but the tool is not',\r\n\t\t\t'errorInstruction' : 'Check that the tool is registered  and valid on the Unipoole service.'\r\n\t\t},\r\n\t\t'1013' : {\r\n\t\t\t'id' : 1013,\r\n\t\t\t'errorMessage' : 'Module Registration not found',\r\n\t\t\t'errorDescription' : 'The module registration could not be found. The device is registered but the module for the device is not',\r\n\t\t\t'errorInstruction' : 'Check that the module is registered and valid on the Unipoole service.'\r\n\t\t},\r\n\t\t'1014' : {\r\n\t\t\t'id' : 1014,\r\n\t\t\t'errorMessage' : 'Invalid location',\r\n\t\t\t'errorDescription' : 'The location is not valid',\r\n\t\t\t'errorInstruction' : 'The location must be a directory or zip file containing the tool code in the root.'\r\n\t\t},\r\n\t\t'2002' : {\r\n\t\t\t'id' : 2002,\r\n\t\t\t'errorMessage' : 'Invalid login',\r\n\t\t\t'errorDescription' : 'The log in credentials provided are invalid.',\r\n\t\t\t'errorInstruction' : 'Please provide valid credentials'\r\n\t\t},\r\n\t\t'2003' : {\r\n\t\t\t'id' : 2003,\r\n\t\t\t'errorMessage' : 'Invalid session',\r\n\t\t\t'errorDescription' : 'The session is invalid. These could be the possible causes:<ul><li>The session does not exist</li><li>The session was not valid</li></ul>',\r\n\t\t\t'errorInstruction' : ''\r\n\t\t},\r\n\t\t'2004' : {\r\n\t\t\t'id' : 2004,\r\n\t\t\t'errorMessage' : 'No tools found',\r\n\t\t\t'errorDescription' : '',\r\n\t\t\t'errorInstruction' : ''\r\n\t\t},\r\n\t\t'3000' : {\r\n\t\t\t'id' : 3000,\r\n\t\t\t'errorMessage' : 'You need to authenticate to perform this action',\r\n\t\t\t'errorDescription' : 'The action your requested cannot be performed without authentications',\r\n\t\t\t'errorInstruction' : 'Please authenticate, and try again'\r\n\t\t},\r\n\t\t'4001' : {\r\n\t\t\t'id' : 4001,\r\n\t\t\t'errorMessage' : 'No application available',\r\n\t\t\t'errorDescription' : 'You do not have an application installed that can open the requested file',\r\n\t\t\t'errorInstruction' : 'Please install an application supporting the file.'\r\n\t\t},\r\n\t\t'4002' : {\r\n\t\t\t'id' : 4002,\r\n\t\t\t'errorMessage' : 'Failed to open file',\r\n\t\t\t'errorDescription' : 'The requested file could not be opened by an application',\r\n\t\t\t'errorInstruction' : 'Please make sure a supported application is installed'\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t* Return a function that will create an error that\r\n\t* can be used by the SynthErrorHandler.\r\n\t*\r\n\t* Params:\r\n\t* errorCode - an int representing the error code, or an object that represent the error\r\n\t* additional (optional) - a string with additional info about the error.\r\n\t*/\r\n\treturn function(errorCode, additional){\r\n\r\n\t\t/*\r\n\t\t* Check if the error is an exception\r\n\t\t*/\r\n\t\tif(errorCode instanceof Error){\r\n\t\t\tlet error = angular.copy(errors[1000]);\r\n\t\t\terror.additional = errorCode.message;\r\n\t\t\treturn error;\r\n\t\t}\r\n\t\t/* Check if the error Code is an object.\r\n\t\t* if it is an object, it is a error like response from\r\n\t\t* a server, we will then create a proper error from it */\r\n\t\telse if (typeof(errorCode) === 'object'){\r\n\t\t\treturn {\r\n\t\t\t\t'id' : errorCode.errorCode,\r\n\t\t\t\t'errorMessage' : errorCode.message,\r\n\t\t\t\t'errorInstruction' : errorCode.instruction,\r\n\t\t\t\t'additional' : additional\r\n\t\t\t};\r\n\t\t}\r\n\t\telse{\r\n\t\t\tlet error = angular.copy(errors[errorCode]);\r\n\t\t\t// This will only happen if an error happened before the ajax to get\r\n\t\t\t// the error list was completed\r\n\t\t\tif(error == null){\r\n\t\t\t\terror = {\r\n\t\t\t\t\t'id' : 1000,\r\n\t\t\t\t\t'errorMessage' : 'Exception occurred',\r\n\t\t\t\t\t'errorDescription' : 'Your request could not be completed. Something unexpected had happened',\r\n\t\t\t\t\t'errorInstructions' : 'Please contact your administrator'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif (additional){\r\n\t\t\t\terror.additional = additional;\r\n\t\t\t}\r\n\t\t\treturn error;\r\n\t\t}\r\n\r\n\t};\r\n};\r\nSynthError.$inject = [];\r\nexport default SynthError;\r\n"
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SynthError",
    "memberof": "js/base/factories/SynthError.js",
    "longname": "js/base/factories/SynthError.js~SynthError",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/factories/SynthError.js",
    "importStyle": "SynthError",
    "description": "Factory to create error with",
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/factories/SynthErrorHandler.js",
    "memberof": null,
    "longname": "js/base/factories/SynthErrorHandler.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Factory method for the error handler.\r\n* This error handler will display the error modal dialog with the error message.\r\n* When this factory is called, it will always return a rejected promise\r\n* with the error that it handles.\r\n*/\r\nvar SynthErrorHandler = ($q, $rootScope, SynthError) => {\r\n\treturn function(synthError){\r\n\r\n\t\t/*\r\n\t\t* If the synthError is not really a synth error.\r\n\t\t* We convert it to one.\r\n\t\t*/\r\n\t\tif(synthError instanceof Error){\r\n\t\t\tsynthError = SynthError(synthError);\r\n\t\t}\r\n\r\n\t\t/* On the root scope there is an object 'synthError' which\r\n\t\t* is used by the error dialog */\r\n\t\t$rootScope.synthError = synthError;\r\n\r\n\t\t// Show the error dialog\r\n\t\t$('#synthErrorModal').modal('show');\r\n\r\n\t\t/* You must return a rejected promise, else if you had\r\n\t\t* a chain of promised, the chain will continue on with a\r\n\t\t* successfull promise */\r\n\t\treturn $q.reject(synthError);\r\n\t};\r\n};\r\nSynthErrorHandler.$inject = ['$q', '$rootScope', 'SynthError'];\r\nexport default SynthErrorHandler;\r\n"
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SynthErrorHandler",
    "memberof": "js/base/factories/SynthErrorHandler.js",
    "longname": "js/base/factories/SynthErrorHandler.js~SynthErrorHandler",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/factories/SynthErrorHandler.js",
    "importStyle": "SynthErrorHandler",
    "description": "Factory method for the error handler.\nThis error handler will display the error modal dialog with the error message.\nWhen this factory is called, it will always return a rejected promise\nwith the error that it handles.",
    "lineNumber": 8,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/factories/SynthFail.js",
    "memberof": null,
    "longname": "js/base/factories/SynthFail.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Default fail method that rejects a deferred\r\n* by passing the error as the reason.\r\n*/\r\nvar SynthFail = () => {\r\n\treturn function(deferred){\r\n\t\treturn function(error){\r\n\t\t\tdeferred.reject(error);\r\n\t\t};\r\n\t};\r\n};\r\nSynthFail.$inject = [];\r\nexport default SynthFail;\r\n"
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SynthFail",
    "memberof": "js/base/factories/SynthFail.js",
    "longname": "js/base/factories/SynthFail.js~SynthFail",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/factories/SynthFail.js",
    "importStyle": "SynthFail",
    "description": "Default fail method that rejects a deferred\nby passing the error as the reason.",
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/factories/UserSession.js",
    "memberof": null,
    "longname": "js/base/factories/UserSession.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Session object used for logins\r\n*/\r\nclass UserSession {\r\n\tconstructor() {\r\n\t\t/**\r\n\t\t * Username of the active user\r\n\t\t */\r\n\t\tthis.username = null;\r\n\r\n\t\t/**\r\n\t\t * Authentication token to synthesis service\r\n\t\t */\r\n\t\tthis.authToken = null;\r\n\r\n\t\t/**\r\n\t\t * ID of this device\r\n\t\t */\r\n\t\tthis.deviceId = null;\r\n\r\n\t\t/**\r\n\t\t * Map of modules the user is registered for\r\n\t\t */\r\n\t\tthis.modules = {};\r\n\r\n\t\t/**\r\n\t\t * Flag if the user is registered for atleast one module\r\n\t\t */\r\n\t\tthis.registered = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Update more complex attributes of the user session\r\n\t */\r\n\tupdateSession(userSession){\r\n\t\tfor(var prop in userSession){\r\n\t\t\tthis[prop] = userSession[prop];\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t * Clear entire session\r\n\t */\r\n\tclearSession(){\r\n\t\tfor(var prop in this){\r\n\t\t\tif(typeof(this[prop]) === 'function'){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tthis[prop] = null;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create instances of the UserSession class\r\n */\r\nexport default function UserSessionFactory(){\r\n\treturn new UserSession();\r\n}\r\n"
  },
  {
    "__docId__": 132,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "UserSession",
    "memberof": "js/base/factories/UserSession.js",
    "longname": "js/base/factories/UserSession.js~UserSession",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/factories/UserSession.js",
    "importStyle": null,
    "description": "Session object used for logins",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/factories/UserSession.js~UserSession",
    "longname": "js/base/factories/UserSession.js~UserSession#constructor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "username",
    "memberof": "js/base/factories/UserSession.js~UserSession",
    "longname": "js/base/factories/UserSession.js~UserSession#username",
    "access": null,
    "description": "Username of the active user",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "authToken",
    "memberof": "js/base/factories/UserSession.js~UserSession",
    "longname": "js/base/factories/UserSession.js~UserSession#authToken",
    "access": null,
    "description": "Authentication token to synthesis service",
    "lineNumber": 16,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "deviceId",
    "memberof": "js/base/factories/UserSession.js~UserSession",
    "longname": "js/base/factories/UserSession.js~UserSession#deviceId",
    "access": null,
    "description": "ID of this device",
    "lineNumber": 21,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "modules",
    "memberof": "js/base/factories/UserSession.js~UserSession",
    "longname": "js/base/factories/UserSession.js~UserSession#modules",
    "access": null,
    "description": "Map of modules the user is registered for",
    "lineNumber": 26,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "registered",
    "memberof": "js/base/factories/UserSession.js~UserSession",
    "longname": "js/base/factories/UserSession.js~UserSession#registered",
    "access": null,
    "description": "Flag if the user is registered for atleast one module",
    "lineNumber": 31,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateSession",
    "memberof": "js/base/factories/UserSession.js~UserSession",
    "longname": "js/base/factories/UserSession.js~UserSession#updateSession",
    "access": null,
    "description": "Update more complex attributes of the user session",
    "lineNumber": 37,
    "params": [
      {
        "name": "userSession",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearSession",
    "memberof": "js/base/factories/UserSession.js~UserSession",
    "longname": "js/base/factories/UserSession.js~UserSession#clearSession",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "UserSessionFactory",
    "memberof": "js/base/factories/UserSession.js",
    "longname": "js/base/factories/UserSession.js~UserSessionFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/factories/UserSession.js",
    "importStyle": "UserSessionFactory",
    "description": "Factory to create instances of the UserSession class",
    "lineNumber": 59,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/factories/safo.js",
    "memberof": null,
    "longname": "js/base/factories/safo.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Synthesis Add Fields to Object\r\n*/\r\nvar safo = () => {\r\n\r\n\tfunction addFieldsToObject(){\r\n\r\n\r\n\t\t// Get the object that we will be modifying\r\n\t\tvar obj = arguments[0];\r\n\r\n\t\t// Continue while there are enough groups of fieldname and values left\r\n\t\tfor(var idx = 1; idx + 2 <= arguments.length; idx += 2){\r\n\t\t\tvar key = arguments[idx];\r\n\t\t\tvar value = arguments[idx + 1];\r\n\t\t\tobj[key] = value;\r\n\t\t}\r\n\r\n\t\treturn obj;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* First parameter is the object, the next parameters are in sets\r\n\t* of 2 where the first is the name of the field, and the second the value.\r\n\t* This function will modify the object that was passed to the function,\r\n\t* it will not return any value\r\n\t*\r\n\t* Example:\r\n\t* var myObject = {};\r\n\t* function(myObject, \"age\", 21, \"gender\", \"male\");\r\n\t*\r\n\t* Result:\r\n\t* myObject = {\r\n\t* \t\t'age' : 21,\r\n\t* \t\t'gender' : \"male\"\r\n\t*  }\r\n\t*\r\n\t* You can also pass an array as the first parameter, then all objects\r\n\t* in that array will have the fields set to them\r\n\t*\r\n\t* Example:\r\n\t* var myObjectArray = [{}, {}];\r\n\t* function(myObjectArray, \"age\", 21, \"gender\", \"male\");\r\n\t*\r\n\t* Result:\r\n\t* myObjectArray = [{\r\n\t* \t\t'age' : 21,\r\n\t* \t\t'gender' : \"male\"\r\n\t*  },\r\n\t*  {\r\n\t* \t\t'age' : 21,\r\n\t* \t\t'gender' : \"male\"\r\n\t*  }]\r\n\t*/\r\n\treturn function(){\r\n\r\n\t\t// If we didn't get any params\r\n\t\tif(arguments.length == 0){\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t* If there is not enough arguments to make any changes to the\r\n\t\t* object, just return the object itself\r\n\t\t*/\r\n\t\tif(arguments.length < 3){\r\n\t\t\treturn arguments[0];\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t*  The array of objects that we will be adding fields to\r\n\t\t*  even if there was a single object passed as the first\r\n\t\t*  argument, we will use an array with one element\r\n\t\t*/\r\n\t\tvar arrayOfObjects = null;\r\n\r\n\t\t/*\r\n\t\t* If the first object is an array, we will do\r\n\t\t* it for each object\r\n\t\t*/\r\n\t\tif ($.isArray(arguments[0])){\r\n\t\t\tarrayOfObjects = arguments[0];\r\n\t\t}\r\n\t\telse{\r\n\t\t\tarrayOfObjects = [arguments[0]];\r\n\t\t}\r\n\r\n\t\t// Arguments that we will be passing the the function that does the work\r\n\t\tvar args = ['']; // Create blank placeholder\r\n\t\targs = args.concat(Array.prototype.slice.call(arguments, 1)); // Get out the field name and values from the arguments\r\n\r\n\t\t// Continue while there are enough groups of field name and values left\r\n\t\tfor(var idx = 0; idx < arrayOfObjects.length; idx++){\r\n\t\t\targs[0] = arrayOfObjects[idx]; // Now add the real object to the arguments list\r\n\t\t\taddFieldsToObject.apply(this, args);\r\n\t\t}\r\n\t\treturn arrayOfObjects;\r\n\r\n\t};\r\n};\r\nsafo.$inject = [];\r\nexport default safo;\r\n"
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "safo",
    "memberof": "js/base/factories/safo.js",
    "longname": "js/base/factories/safo.js~safo",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/factories/safo.js",
    "importStyle": "safo",
    "description": "Synthesis Add Fields to Object",
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/filters/ArrayToObjectFilter.js",
    "memberof": null,
    "longname": "js/base/filters/ArrayToObjectFilter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n * Filter to convert an array into a map\r\n * @param input input Array\r\n * @param srcIdName name of the field in the source array that contains the id\r\n */\r\nvar ArrayToObjectFilter = function(input, srcIdName) {\r\n\tvar out = {};\r\n\tsrcIdName = srcIdName || 'id';\r\n\tfor(var idx = 0 ; idx < input.length; idx++){\r\n\t\tvar srcObject = input[idx];\r\n\t\tout[srcObject[srcIdName]] = srcObject;\r\n\t}\r\n\treturn out;\r\n};\r\n\r\n/**\r\n * Factory to create new instances of the ArrayToObjectFilter\r\n */\r\nexport default function ArrayToObjectFilterFactory(){\r\n\treturn ArrayToObjectFilter;\r\n}\r\n"
  },
  {
    "__docId__": 145,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ArrayToObjectFilter",
    "memberof": "js/base/filters/ArrayToObjectFilter.js",
    "longname": "js/base/filters/ArrayToObjectFilter.js~ArrayToObjectFilter",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/filters/ArrayToObjectFilter.js",
    "importStyle": null,
    "description": "Filter to convert an array into a map",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "input Array"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "srcIdName",
        "description": "name of the field in the source array that contains the id"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ArrayToObjectFilterFactory",
    "memberof": "js/base/filters/ArrayToObjectFilter.js",
    "longname": "js/base/filters/ArrayToObjectFilter.js~ArrayToObjectFilterFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/filters/ArrayToObjectFilter.js",
    "importStyle": "ArrayToObjectFilterFactory",
    "description": "Factory to create new instances of the ArrayToObjectFilter",
    "lineNumber": 20,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 147,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/filters/AttachmentsFilter.js",
    "memberof": null,
    "longname": "js/base/filters/AttachmentsFilter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Filter to get all the attachments from an array\r\n*/\r\nvar AttachmentsFilter = function(attachmentsArray) {\r\n\tvar out = [];\r\n\tfor(var aId in attachmentsArray){\r\n\t\tvar attachment = attachmentsArray[aId];\r\n\t\tif (attachment.link === false){\r\n\t\t\tout.push(attachment);\r\n\t\t}\r\n\t}\r\n\treturn out;\r\n};\r\n\r\n/**\r\n* Factory to create new instances of the AttachmentsFilter\r\n*/\r\nexport default function AttachmentsFilterFactory(){\r\n\treturn AttachmentsFilter;\r\n}\r\n"
  },
  {
    "__docId__": 148,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "AttachmentsFilter",
    "memberof": "js/base/filters/AttachmentsFilter.js",
    "longname": "js/base/filters/AttachmentsFilter.js~AttachmentsFilter",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/filters/AttachmentsFilter.js",
    "importStyle": null,
    "description": "Filter to get all the attachments from an array",
    "lineNumber": 5,
    "params": [
      {
        "name": "attachmentsArray",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "AttachmentsFilterFactory",
    "memberof": "js/base/filters/AttachmentsFilter.js",
    "longname": "js/base/filters/AttachmentsFilter.js~AttachmentsFilterFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/filters/AttachmentsFilter.js",
    "importStyle": "AttachmentsFilterFactory",
    "description": "Factory to create new instances of the AttachmentsFilter",
    "lineNumber": 19,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/filters/BytesToSizeFilter.js",
    "memberof": null,
    "longname": "js/base/filters/BytesToSizeFilter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Filter to convert bytes to a size\r\n*/\r\nvar BytesToSizeFilter = function(bytes, showZero) {\r\n\tvar sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n\r\n\tif (showZero && bytes === 0){\r\n\t\treturn '0';\r\n\t}\r\n\r\n\tif (bytes === undefined || bytes === 0 ) {\r\n\t\treturn 'n/a';\r\n\t}\r\n\tvar i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n\tif (i === 0) {\r\n\t\treturn bytes + ' ' + sizes[i];\r\n\t}\r\n\treturn (bytes / Math.pow(1024, i)).toFixed(1) + ' ' + sizes[i];\r\n};\r\n\r\n/**\r\n * Factory to create new instances of the BytesToSizeFilter\r\n */\r\nexport default function BytesToSizeFilterFactory(){\r\n\treturn BytesToSizeFilter;\r\n}\r\n"
  },
  {
    "__docId__": 151,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "BytesToSizeFilter",
    "memberof": "js/base/filters/BytesToSizeFilter.js",
    "longname": "js/base/filters/BytesToSizeFilter.js~BytesToSizeFilter",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/filters/BytesToSizeFilter.js",
    "importStyle": null,
    "description": "Filter to convert bytes to a size",
    "lineNumber": 5,
    "params": [
      {
        "name": "bytes",
        "types": [
          "*"
        ]
      },
      {
        "name": "showZero",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "BytesToSizeFilterFactory",
    "memberof": "js/base/filters/BytesToSizeFilter.js",
    "longname": "js/base/filters/BytesToSizeFilter.js~BytesToSizeFilterFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/filters/BytesToSizeFilter.js",
    "importStyle": "BytesToSizeFilterFactory",
    "description": "Factory to create new instances of the BytesToSizeFilter",
    "lineNumber": 25,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/filters/FormatDateFilter.js",
    "memberof": null,
    "longname": "js/base/filters/FormatDateFilter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n * Filter to format a date\r\n */\r\nvar FormatDateFilter = function(date, format) {\r\n\r\n\t// If there is no format use a default format\r\n\tif (!format) {\r\n\t\tformat = 'YYYY-MM-DD h:mm a';\r\n\t}\r\n\r\n\t// If there is no date, return an empty string\r\n\tif (date === null || date === '') {\r\n\t\treturn '';\r\n\t}\r\n\treturn moment(date).format(format);\r\n};\r\n\r\n/**\r\n * Factory to create new instances of the FormatDateFilter\r\n */\r\nexport default function FormatDateFilterFactory(){\r\n\treturn FormatDateFilter;\r\n}\r\n"
  },
  {
    "__docId__": 154,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "FormatDateFilter",
    "memberof": "js/base/filters/FormatDateFilter.js",
    "longname": "js/base/filters/FormatDateFilter.js~FormatDateFilter",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/filters/FormatDateFilter.js",
    "importStyle": null,
    "description": "Filter to format a date",
    "lineNumber": 5,
    "params": [
      {
        "name": "date",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 155,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "FormatDateFilterFactory",
    "memberof": "js/base/filters/FormatDateFilter.js",
    "longname": "js/base/filters/FormatDateFilter.js~FormatDateFilterFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/filters/FormatDateFilter.js",
    "importStyle": "FormatDateFilterFactory",
    "description": "Factory to create new instances of the FormatDateFilter",
    "lineNumber": 22,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 156,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/filters/NoEscapeFilter.js",
    "memberof": null,
    "longname": "js/base/filters/NoEscapeFilter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Factory to create new instances of the NoEscapeFilter\r\n* Filter to avoid angular from escaping content\r\n*/\r\nvar NoEscapeFilterFactory = ($sce) => {\r\n\treturn function(val) {\r\n\t\treturn $sce.trustAsHtml(val);\r\n\t};\r\n};\r\nNoEscapeFilterFactory.$inject = ['$sce'];\r\nexport default NoEscapeFilterFactory;\r\n"
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "NoEscapeFilterFactory",
    "memberof": "js/base/filters/NoEscapeFilter.js",
    "longname": "js/base/filters/NoEscapeFilter.js~NoEscapeFilterFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/filters/NoEscapeFilter.js",
    "importStyle": "NoEscapeFilterFactory",
    "description": "Factory to create new instances of the NoEscapeFilter\nFilter to avoid angular from escaping content",
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/filters/Object2ArrayFilter.js",
    "memberof": null,
    "longname": "js/base/filters/Object2ArrayFilter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n * Filter to convert a object's keys to a map\r\n */\r\nvar Object2ArrayFilter = function(input) {\r\n\tvar out = [];\r\n\tfor(var i in input){\r\n\t\tvar obj = input[i];\r\n\t\tobj.key = i;\r\n\t\tout.push(obj);\r\n\t}\r\n\treturn out;\r\n};\r\n\r\n/**\r\n * Factory to create new instances of the Object2ArrayFilter\r\n */\r\nexport default function Object2ArrayFilterFactory(){\r\n\treturn Object2ArrayFilter;\r\n}\r\n"
  },
  {
    "__docId__": 159,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "Object2ArrayFilter",
    "memberof": "js/base/filters/Object2ArrayFilter.js",
    "longname": "js/base/filters/Object2ArrayFilter.js~Object2ArrayFilter",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/filters/Object2ArrayFilter.js",
    "importStyle": null,
    "description": "Filter to convert a object's keys to a map",
    "lineNumber": 5,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "Object2ArrayFilterFactory",
    "memberof": "js/base/filters/Object2ArrayFilter.js",
    "longname": "js/base/filters/Object2ArrayFilter.js~Object2ArrayFilterFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/filters/Object2ArrayFilter.js",
    "importStyle": "Object2ArrayFilterFactory",
    "description": "Factory to create new instances of the Object2ArrayFilter",
    "lineNumber": 18,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 161,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/handlers/SynthAttachmentMinerProvider.js",
    "memberof": null,
    "longname": "js/base/handlers/SynthAttachmentMinerProvider.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n * An object that manages handlers that have tool specific handlers to manage\r\n * the mining of attachments in tool specific data.\r\n *\r\n * Params:\r\n * toolName - name of the tool locally to SynthMobile - not SynthService name\r\n * funcHandler - function for handler - or the word \"default\" to use default implementation\r\n *\r\n * The handler method should conform to the following rules:\r\n * 1) Accept the tool data as the first parameter of the handler method and the download path as the second.\r\n * 2) The handler must update the data to include the full local path for the attachments\r\n * 3) Return an array of files to download. The data structure for these files are:\r\n *\t{\r\n *\t  'downloadKey' : '<the key>',\r\n *\t  'downloadPath' : '<full cdv-file:// path>'\r\n *\r\n *\t}\r\n * 4) Return an empty array if there are no attachments to download\r\n *\r\n */\r\nvar SynthAttachmentMinerProvider = function(){\r\n\r\n\t// Map of registered handlers\r\n\tvar handlersMap = {};\r\n\r\n\t/**\r\n\t * Adds a handler to the list map of attachments miners\r\n\t * @param toolName Name of the tool this handler is for.\r\n\t * @param funcHandler Handler function to use.\r\n\t */\r\n\tthis.addHandler = (toolName, handlerName) =>{\r\n\t\tif (handlersMap[toolName] == null){\r\n\t\t\thandlersMap[toolName] = handlerName;\r\n\t\t}\r\n\t};\r\n\r\n\r\n\tthis.$get = ['$q', '$injector', '$timeout', 'DataService',\r\n\t\tfunction($q, $injector, $timeout, DataService){\r\n\r\n\t\t\t/**\r\n\t\t\t * Gets the handler for a tool.\r\n\t\t\t * @param toolName Name of the tool to get a handler for\r\n\t\t\t * @returns The configured handler for the tool.\r\n\t\t\t */\r\n\t\t\tlet parseArray = (attachArray = []) => {\r\n\t\t\t\t\t// If there is no array, we can return right now\r\n\t\t\t\tif (!attachArray || attachArray.size === 0) {\r\n\t\t\t\t\treturn $q.when([]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet promise = $q.when();\r\n\t\t\t\tlet filesToDownload = [];\r\n\t\t\t\tangular.forEach(attachArray, function(attachment){\r\n\t\t\t\t\t// Only if the attachment has a download key\r\n\t\t\t\t\tif(attachment.downloadKey != null){\r\n\t\t\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\t\t\treturn DataService.createNewFile(attachment.name)\r\n\t\t\t\t\t\t\t\t.then((fileEntry) => {\r\n\t\t\t\t\t\t\t\t\tattachment.downloadPath = fileEntry.toInternalURL();\r\n\t\t\t\t\t\t\t\t\tfilesToDownload.push(attachment);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn promise.then(() => {\r\n\t\t\t\t\treturn filesToDownload;\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\r\n\t\t\t/*\r\n\t\t\t * Default implementation for downloading attachments\r\n\t\t\t * This implementation assumes that the attachments are\r\n\t\t\t * on the root level of the content data.\r\n\t\t\t */\r\n\t\t\tvar defaultHandler = (contentData) => {\r\n\t\t\t\tlet promise = $q.when();\r\n\t\t\t\tlet keys = Object.keys(contentData);\r\n\t\t\t\tlet filesToDownload = [];\r\n\t\t\t\tangular.forEach(keys, function(key){\r\n\t\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\t\treturn parseArray(contentData[key].attachments)\r\n\t\t\t\t\t\t\t.then((downloadEntries)=>{\r\n\t\t\t\t\t\t\t\tfilesToDownload = filesToDownload.concat(downloadEntries);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t});\r\n\t\t\t\treturn promise.then(function(){\r\n\t\t\t\t\treturn filesToDownload;\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\treturn {\r\n\t\t\t\tgetHandler : function(toolName){\r\n\t\t\t\t\tvar handlerName = handlersMap[toolName];\r\n\t\t\t\t\tif(handlerName == null){\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (handlerName === 'default'){\r\n\t\t\t\t\t\treturn defaultHandler;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn $injector.get(handlerName);\r\n\t\t\t\t},\r\n\t\t\t\tparseArray : parseArray\r\n\t\t\t};\r\n\t\t}];\r\n};\r\n\r\nexport default SynthAttachmentMinerProvider;\r\n"
  },
  {
    "__docId__": 162,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "SynthAttachmentMinerProvider",
    "memberof": "js/base/handlers/SynthAttachmentMinerProvider.js",
    "longname": "js/base/handlers/SynthAttachmentMinerProvider.js~SynthAttachmentMinerProvider",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/handlers/SynthAttachmentMinerProvider.js",
    "importStyle": "SynthAttachmentMinerProvider",
    "description": "An object that manages handlers that have tool specific handlers to manage\nthe mining of attachments in tool specific data.\n\nParams:\ntoolName - name of the tool locally to SynthMobile - not SynthService name\nfuncHandler - function for handler - or the word \"default\" to use default implementation\n\nThe handler method should conform to the following rules:\n1) Accept the tool data as the first parameter of the handler method and the download path as the second.\n2) The handler must update the data to include the full local path for the attachments\n3) Return an array of files to download. The data structure for these files are:\n{\n  'downloadKey' : '<the key>',\n  'downloadPath' : '<full cdv-file:// path>'\n\n}\n4) Return an empty array if there are no attachments to download",
    "lineNumber": 23,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/handlers/SynthDeleteHandlerProvider.js",
    "memberof": null,
    "longname": "js/base/handlers/SynthDeleteHandlerProvider.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Handlers to find content that needs to be deleted.\r\n* The handler function will be called with the following parameters (dataDir\r\n*/\r\nvar SynthDeleteHandlerProvider = function(){\r\n\t// Map of registered handler names\r\n\tvar handlersMap = {};\r\n\r\n\t/**\r\n\t * Adds a handler to the list map of attachments miners\r\n\t * @param toolName Name of the tool this handler is for.\r\n\t * @param funcHandler Handler function to use.\r\n\t */\r\n\tthis.addHandler = (toolName, handlerName) =>{\r\n\t\tif (handlersMap[toolName] == null){\r\n\t\t\thandlersMap[toolName] = handlerName;\r\n\t\t}\r\n\t};\r\n\r\n\tthis.$get = ['$injector', function($injector){\r\n\t\treturn {\r\n\t\t\t// Get a handler\r\n\t\t\tgetHandler : function(toolName){\r\n\t\t\t\tvar handlerName = handlersMap[toolName];\r\n\t\t\t\tif(handlerName == null){\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn $injector.get(handlerName);\r\n\t\t\t}\r\n\t\t};\r\n\t}];\r\n\r\n};\r\nexport default SynthDeleteHandlerProvider;\r\n"
  },
  {
    "__docId__": 164,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "SynthDeleteHandlerProvider",
    "memberof": "js/base/handlers/SynthDeleteHandlerProvider.js",
    "longname": "js/base/handlers/SynthDeleteHandlerProvider.js~SynthDeleteHandlerProvider",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/handlers/SynthDeleteHandlerProvider.js",
    "importStyle": "SynthDeleteHandlerProvider",
    "description": "Handlers to find content that needs to be deleted.\nThe handler function will be called with the following parameters (dataDir",
    "lineNumber": 7,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/handlers/SynthEmbeddedImageHandlerProvider.js",
    "memberof": null,
    "longname": "js/base/handlers/SynthEmbeddedImageHandlerProvider.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* These handlers go through the newly downloaded content of a tool\r\n* and update the links to the actual location of the file on the device\r\n*\r\n* The handler will be called with the following parameters\r\n* $1 - toolContent - the new delta of tool content\r\n* $2 - dataPath - The proper root path for attachments\r\n*\r\n* The function must return the object with the fields updated\r\n*\r\n* Example\r\n*\r\n* function myHandler(toolContent){\r\n*   var html = toolContent.fieldThatHasImage;\r\n*   toolContent.fieldThatHasImage = .fixForHtmlElement(html);\r\n*   return toolContent;\r\n* }\r\n*\r\n*/\r\nvar SynthEmbeddedImageHandlerProvider = function(){\r\n\r\n\t// Map of registered handlers\r\n\tvar handlersMap = {};\r\n\r\n\t// Add a handler\r\n\tthis.addHandler = function(toolName, funcHandler){\r\n\t\tif (handlersMap[toolName] == null){ // Do not use === here\r\n\t\t\thandlersMap[toolName] = funcHandler;\r\n\t\t}\r\n\t};\r\n\r\n\tthis.$get = ['$q', '$injector', '$timeout',\r\n\t\tfunction($q, $injector, $timeout){\r\n\r\n\r\n\t\t\treturn {\r\n\t\t\t\t// Get a handler\r\n\t\t\t\tgetHandler : function(toolName){\r\n\t\t\t\t\tvar handlerName = handlersMap[toolName];\r\n\t\t\t\t\tif(handlerName == null){\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn $injector.get(handlerName);\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t* Fix the url of all embedded images\r\n\t\t\t\t* This function creates a pseudo jquery html element, and finds all img tags\r\n\t\t\t\t* inside the dom.\r\n\t\t\t\t* This will replace the image path with a directive that will search for\r\n\t\t\t\t* image by referencing \"attachements\" on the scope where this html is displayed\r\n\t\t\t\t*\r\n\t\t\t\t* resolveImageFunction(imagePath): returns a promise that resolves to the\r\n\t\t\t\t* local path of the image in question\r\n\t\t\t\t*/\r\n\t\t\t\tfixForHtmlElement : function(htmlContent, resolveImageFunction){\r\n\t\t\t\t\tvar dummyData = $('<div/>').html(htmlContent);\r\n\t\t\t\t\tvar images = dummyData.find('img');\r\n\r\n\t\t\t\t\t// If there is no images, there is nothing to change\r\n\t\t\t\t\tif(images.length === 0){\r\n\t\t\t\t\t\treturn $q.when(htmlContent);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet promise = $q.when();\r\n\t\t\t\t\tangular.forEach(images, function(image){\r\n\t\t\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\t\t\tlet currentImage = $(image);\r\n\t\t\t\t\t\t\t// Get the current path of the image\r\n\t\t\t\t\t\t\tvar currentImagePath = currentImage.attr('src');\r\n\t\t\t\t\t\t\treturn resolveImageFunction(currentImagePath).then((localpath) => {\r\n\t\t\t\t\t\t\t\tcurrentImage.attr('src', localpath);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\treturn promise.then(()=>{\r\n\t\t\t\t\t\treturn dummyData.html();\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tresolveImageLocalPathFromAttachments : function(imagePath, attachments){\r\n\r\n\t\t\t\t\t// There is no attachments, so we will never find it!\r\n\t\t\t\t\tif(attachments.length === 0){\r\n\t\t\t\t\t\treturn $q.when(null);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Take out only the filename\r\n\t\t\t\t\tvar imageName = imagePath.substr(imagePath.lastIndexOf('/') + 1);\r\n\t\t\t\t\tvar deferred = $q.defer();\r\n\t\t\t\t\t$timeout(() => {\r\n\t\t\t\t\t\t// Loop through all the attachments untill we find the one\r\n\t\t\t\t\t\tfor(var idx in attachments){\r\n\t\t\t\t\t\t\tif(attachments[idx].name === imageName){\r\n\t\t\t\t\t\t\t\tdeferred.resolve(attachments[idx].downloadPath);\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// We could not find an image that matches the requested image\r\n\t\t\t\t\t\tdeferred.resolve(null);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\treturn deferred.promise;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t}];\r\n\r\n};\r\n\r\nexport default SynthEmbeddedImageHandlerProvider;\r\n"
  },
  {
    "__docId__": 166,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "SynthEmbeddedImageHandlerProvider",
    "memberof": "js/base/handlers/SynthEmbeddedImageHandlerProvider.js",
    "longname": "js/base/handlers/SynthEmbeddedImageHandlerProvider.js~SynthEmbeddedImageHandlerProvider",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/handlers/SynthEmbeddedImageHandlerProvider.js",
    "importStyle": "SynthEmbeddedImageHandlerProvider",
    "description": "These handlers go through the newly downloaded content of a tool\nand update the links to the actual location of the file on the device\n\nThe handler will be called with the following parameters\n$1 - toolContent - the new delta of tool content\n$2 - dataPath - The proper root path for attachments\n\nThe function must return the object with the fields updated\n\nExample\n\nfunction myHandler(toolContent){\n  var html = toolContent.fieldThatHasImage;\n  toolContent.fieldThatHasImage = .fixForHtmlElement(html);\n  return toolContent;\n}",
    "lineNumber": 22,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/handlers/SynthLinkHandlerProvider.js",
    "memberof": null,
    "longname": "js/base/handlers/SynthLinkHandlerProvider.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Handlers to replace links embedded in tool content to links that open\r\n* in an external browser. The problem with embedded links is that they will\r\n* 'takeover' your webview (i.e. your app!)\r\n*\r\n* These handlers will need to find all the links and fix thems\r\n*/\r\nvar SynthLinkHandlerProvider = function(){\r\n\t// Map of registered handler names\r\n\tvar handlersMap = {};\r\n\r\n\t/**\r\n\t * Adds a handler to the list map of attachments miners\r\n\t * @param toolName Name of the tool this handler is for.\r\n\t * @param funcHandler Handler function to use.\r\n\t */\r\n\tthis.addHandler = (toolName, handlerName) =>{\r\n\t\tif (handlersMap[toolName] == null){\r\n\t\t\thandlersMap[toolName] = handlerName;\r\n\t\t}\r\n\t};\r\n\r\n\tthis.$get = ['$injector', '$q', '$timeout', function($injector, $q, $timeout){\r\n\t\treturn {\r\n\t\t\t// Get a handler\r\n\t\t\tgetHandler : function(toolName){\r\n\t\t\t\tvar handlerName = handlersMap[toolName];\r\n\t\t\t\tif(handlerName == null){\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn $injector.get(handlerName);\r\n\t\t\t},\r\n\t\t\t/*\r\n\t\t\t* Fixes all the links in the content string, and return back to fix\r\n\t\t\t* html string\r\n\t\t\t*/\r\n\t\t\tfixContent : function(contentString){\r\n\t\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\t\t$timeout(()=>{\r\n\t\t\t\t\tvar dummyData = $('<div/>').html(contentString);\r\n\r\n\t\t\t\t\t// Replace all the links, with javascript to open it externally\r\n\t\t\t\t\tdummyData.find('a[href]').each(function() {\r\n\t\t\t\t\t\tvar url = $(this).attr('href');\r\n\t\t\t\t\t\t$(this).attr('href', `javascript:window.open('${url}', '_system');`);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Return the new fixed html\r\n\t\t\t\t\tdeferred.resolve(dummyData.html());\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn deferred.promise;\r\n\t\t\t}\r\n\t\t};\r\n\t}];\r\n};\r\nexport default SynthLinkHandlerProvider;\r\n"
  },
  {
    "__docId__": 168,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "SynthLinkHandlerProvider",
    "memberof": "js/base/handlers/SynthLinkHandlerProvider.js",
    "longname": "js/base/handlers/SynthLinkHandlerProvider.js~SynthLinkHandlerProvider",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/handlers/SynthLinkHandlerProvider.js",
    "importStyle": "SynthLinkHandlerProvider",
    "description": "Handlers to replace links embedded in tool content to links that open\nin an external browser. The problem with embedded links is that they will\n'takeover' your webview (i.e. your app!)\n\nThese handlers will need to find all the links and fix thems",
    "lineNumber": 10,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/handlers/SynthUploadResponseHandlerProvider.js",
    "memberof": null,
    "longname": "js/base/handlers/SynthUploadResponseHandlerProvider.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n\r\n/**\r\n* Handlers for responses to uploads.\r\n* Some tools will have to fix ids for generated content to ids\r\n* returned by the server.\r\n*\r\n* The handler will be called with the following parameters\r\n* $1 - sentObject\t\t- The original data String\r\n* $2 - responseObject\t- The response from the server after the upload\r\n*\r\n* The handler should return a string or object representing the\r\n* fixed data.\r\n*\r\n* Example\r\n* function myUploadHandler(sentObject, responseObject){\r\n* \t\tvar string = JSON.stringify(sentObject);\r\n*\t\t// Replace Ids\r\n*\t\tfor(var oldKey in responseObject){\r\n*\t\t\tvar newKey = responseObject[oldKey];\r\n*\t\t\tvar regEx = new RegExp(oldKey, 'g');\r\n*\t\t\t// Replace all instances of the old key with the new key\r\n*\t\t\tstring = string.replace(regEx, newKey);\r\n*\t\t}\r\n*\t\treturn string;\r\n* }\r\n*\r\n*/\r\nvar SynthAttachmentMinerProvider = function(){\r\n\r\n\t// Map of registered handlers\r\n\tvar handlersMap = {};\r\n\r\n\t/**\r\n\t * Adds a handler to the list map of attachments miners\r\n\t * @param toolName Name of the tool this handler is for.\r\n\t * @param funcHandler Handler function to use.\r\n\t */\r\n\tthis.addHandler = (toolName, handlerName) =>{\r\n\t\tif (handlersMap[toolName] == null){\r\n\t\t\thandlersMap[toolName] = handlerName;\r\n\t\t}\r\n\t};\r\n\r\n\r\n\tthis.$get = ['$injector', function($injector){\r\n\t\treturn {\r\n\t\t\tgetHandler : function(toolName){\r\n\t\t\t\tvar handlerName = handlersMap[toolName];\r\n\t\t\t\tif(handlerName == null){\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn $injector.get(handlerName);\r\n\t\t\t},\r\n\t\t\thasHandlers : function(){\r\n\t\t\t\treturn Object.keys(handlersMap).length > 0;\r\n\t\t\t}\r\n\t\t};\r\n\t}];\r\n};\r\n\r\nexport default SynthAttachmentMinerProvider;\r\n"
  },
  {
    "__docId__": 170,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "SynthAttachmentMinerProvider",
    "memberof": "js/base/handlers/SynthUploadResponseHandlerProvider.js",
    "longname": "js/base/handlers/SynthUploadResponseHandlerProvider.js~SynthAttachmentMinerProvider",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/handlers/SynthUploadResponseHandlerProvider.js",
    "importStyle": "SynthAttachmentMinerProvider",
    "description": "Handlers for responses to uploads.\nSome tools will have to fix ids for generated content to ids\nreturned by the server.\n\nThe handler will be called with the following parameters\n$1 - sentObject\t\t- The original data String\n$2 - responseObject\t- The response from the server after the upload\n\nThe handler should return a string or object representing the\nfixed data.\n\nExample\nfunction myUploadHandler(sentObject, responseObject){\n\t\tvar string = JSON.stringify(sentObject);\n\t// Replace Ids\n\tfor(var oldKey in responseObject){\n\t\tvar newKey = responseObject[oldKey];\n\t\tvar regEx = new RegExp(oldKey, 'g');\n\t\t// Replace all instances of the old key with the new key\n\t\tstring = string.replace(regEx, newKey);\n\t}\n\treturn string;\n}",
    "lineNumber": 30,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 171,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/home/HomeCtrl.js",
    "memberof": null,
    "longname": "js/base/home/HomeCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "content": "/**\r\n * Controller for the home screen\r\n */\r\nclass HomeCtrl{\r\n\r\n\tconstructor(HomeService, $scope, $rootScope, SynthErrorHandler){\r\n\t\t$rootScope.activePage = 'home';\r\n\t\t$rootScope.breadcrumbs = null;\r\n\t\t$scope.searchText = '';\r\n\r\n\t\t// Add the tools to the UI\r\n\t\tHomeService\r\n\t\t\t.getHomeTools()\r\n\t\t\t.then(\r\n\t\t\t// Success\r\n\t\t\tfunction(modules){\r\n\t\t\t\t$scope.modules = modules;\r\n\t\t\t},\r\n\t\t\t// Failed\r\n\t\t\tSynthErrorHandler\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\nHomeCtrl.$inject = ['HomeService', '$scope', '$rootScope', 'SynthErrorHandler'];\r\nexport default HomeCtrl;\r\n"
  },
  {
    "__docId__": 172,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HomeCtrl",
    "memberof": "js/base/home/HomeCtrl.js",
    "longname": "js/base/home/HomeCtrl.js~HomeCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/home/HomeCtrl.js",
    "importStyle": "HomeCtrl",
    "description": "Controller for the home screen",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 173,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/home/HomeCtrl.js~HomeCtrl",
    "longname": "js/base/home/HomeCtrl.js~HomeCtrl#constructor",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "HomeService",
        "types": [
          "*"
        ]
      },
      {
        "name": "$scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "$rootScope",
        "types": [
          "*"
        ]
      },
      {
        "name": "SynthErrorHandler",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/home/HomeService.js",
    "memberof": null,
    "longname": "js/base/home/HomeService.js",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "content": "/**\r\n * Service for the home screen\r\n */\r\nclass HomeService{\r\n\r\n\tconstructor(ModuleService){\r\n\t\tthis.moduleService = ModuleService;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the tools to display on the home screen\r\n\t */\r\n\tgetHomeTools(){\r\n\t\treturn this.moduleService.getAllHomeToolsSorted();\r\n\t}\r\n}\r\n\r\n/**\r\n * Export a factory to create a new HomeService\r\n */\r\nvar HomeServiceFactory = function (){\r\n\treturn new HomeService(...arguments);\r\n};\r\nHomeServiceFactory.$inject = ['ModuleService'];\r\nexport default HomeServiceFactory;\r\n"
  },
  {
    "__docId__": 175,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HomeService",
    "memberof": "js/base/home/HomeService.js",
    "longname": "js/base/home/HomeService.js~HomeService",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/home/HomeService.js",
    "importStyle": null,
    "description": "Service for the home screen",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 176,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/home/HomeService.js~HomeService",
    "longname": "js/base/home/HomeService.js~HomeService#constructor",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "ModuleService",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "moduleService",
    "memberof": "js/base/home/HomeService.js~HomeService",
    "longname": "js/base/home/HomeService.js~HomeService#moduleService",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getHomeTools",
    "memberof": "js/base/home/HomeService.js~HomeService",
    "longname": "js/base/home/HomeService.js~HomeService#getHomeTools",
    "access": null,
    "description": "Get the tools to display on the home screen",
    "lineNumber": 13,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 179,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "HomeServiceFactory",
    "memberof": "js/base/home/HomeService.js",
    "longname": "js/base/home/HomeService.js~HomeServiceFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/home/HomeService.js",
    "importStyle": "HomeServiceFactory",
    "description": "Export a factory to create a new HomeService",
    "lineNumber": 21,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 180,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/index.js",
    "memberof": null,
    "longname": "js/base/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n// Import base controllers\r\nimport BootCtrl from './boot/BootCtrl';\r\nimport HomeCtrl from './home/HomeCtrl';\r\nimport RegisterCtrl from './register/RegisterCtrl';\r\nimport RegisterModuleRegistrationCtrl from './register/RegisterModuleRegistrationCtrl';\r\nimport RegisterSelectModuleCtrl from './register/RegisterSelectModuleCtrl';\r\nimport SettingsCtrl from './settings/SettingsCtrl';\r\nimport SettingsPushCtrl from './settings/SettingsPushCtrl';\r\nimport SyncCtrl from './sync/SyncCtrl';\r\nimport SyncConfigureCtrl from './sync/SyncConfigureCtrl';\r\nimport SyncProgressCtrl from './sync/SyncProgressCtrl';\r\nimport AppController from './controllers/AppController';\r\n\r\n// Import base factories\r\nimport HomeService from './home/HomeService';\r\nimport RegisterService from './register/RegisterService';\r\nimport RegistrationService from './services/RegistrationService';\r\nimport DataService from './services/DataService';\r\nimport LoggerService from './services/LoggerService';\r\nimport ModuleService from './services/ModuleService';\r\nimport PushService from './services/PushService';\r\nimport SyncAPIService from './services/SyncAPIService';\r\nimport UserService from './services/UserService';\r\nimport UserSettings from './services/UserSettings';\r\nimport SyncService from './sync/SyncService';\r\nimport SyncSelection from './sync/SyncSelection';\r\nimport SynthesisRESTClient from './services/SynthesisRESTClient';\r\n\r\nimport safo from './factories/safo';\r\nimport SynthError from './factories/SynthError';\r\nimport SynthFail from './factories/SynthFail';\r\nimport SynthCheckResponseError from './factories/SynthCheckResponseError';\r\nimport SynthErrorHandler from './factories/SynthErrorHandler';\r\nimport SynthAuthenticateUser from './factories/SynthAuthenticateUser';\r\nimport UserSession from './factories/UserSession';\r\nimport Lock from './factories/Lock';\r\n\r\n\r\n// Import base filters\r\nimport NoEscapeFilter from './filters/NoEscapeFilter';\r\nimport Object2ArrayFilter from './filters/Object2ArrayFilter';\r\nimport ArrayToObjectFilter from './filters/ArrayToObjectFilter';\r\nimport FormatDateFilter from './filters/FormatDateFilter';\r\nimport BytesToSizeFilter from './filters/BytesToSizeFilter';\r\nimport AttachmentsFilter from './filters/AttachmentsFilter';\r\n\r\n// Import providers\r\nimport SynthAttachmentMinerProvider from './handlers/SynthAttachmentMinerProvider';\r\nimport SynthEmbeddedImageHandlerProvider from './handlers/SynthEmbeddedImageHandlerProvider';\r\nimport SynthDeleteHandlerProvider from './handlers/SynthDeleteHandlerProvider';\r\nimport SynthLinkHandlerProvider from './handlers/SynthLinkHandlerProvider';\r\nimport SynthUploadResponseHandlerProvider from './handlers/SynthUploadResponseHandlerProvider';\r\n\r\n\r\n// Import base directives\r\nimport SynthMenu from './directives/SynthMenu';\r\nimport SynthFooter from './directives/SynthFooter';\r\nimport ToolSyncStatus from './directives/ToolSyncStatus';\r\nimport OverallSyncStatus from './directives/OverallSyncStatus';\r\nimport SynthAttachments from './directives/SynthAttachments';\r\nimport ModuleCollapse from './directives/ModuleCollapse';\r\nimport AnimatedEllipse from './directives/AnimatedEllipse';\r\nimport CurrentModuleName from './directives/CurrentModuleName';\r\nimport ModuleName from './directives/ModuleName';\r\nimport ToolName from './directives/ToolName';\r\n\r\nimport Routes from './Routes';\r\n\r\nvar base = 'synthesis.base',\r\n\tcontrollers = 'synthesis.controllers',\r\n\tfactories = 'synthesis.factories',\r\n\tfilters = 'synthesis.filters',\r\n\tdirectives = 'synthesis.directives',\r\n\tproviders = 'synthesis.providers';\r\n\r\n// Register controllers\r\nangular.module(controllers, [])\r\n\t.controller('BootCtrl', BootCtrl)\r\n\t.controller('HomeCtrl', HomeCtrl)\r\n\t.controller('RegisterCtrl', RegisterCtrl)\r\n\t.controller('RegisterModuleRegistrationCtrl', RegisterModuleRegistrationCtrl)\r\n\t.controller('RegisterSelectModuleCtrl', RegisterSelectModuleCtrl)\r\n\t.controller('SettingsCtrl', SettingsCtrl)\r\n\t.controller('SettingsPushCtrl', SettingsPushCtrl)\r\n\t.controller('SyncCtrl', SyncCtrl)\r\n\t.controller('SyncConfigureCtrl', SyncConfigureCtrl)\r\n\t.controller('SyncProgressCtrl', SyncProgressCtrl)\r\n\t.controller('AppController', AppController);\r\n\r\n// Register factories\r\nangular.module(factories, [])\r\n\t.factory('HomeService', HomeService)\r\n\t.factory('RegisterService', RegisterService)\r\n\t.factory('RegistrationService', RegistrationService)\r\n\t.factory('DataService', DataService)\r\n\t.factory('LoggerService', LoggerService)\r\n\t.factory('ModuleService', ModuleService)\r\n\t.factory('PushService', PushService)\r\n\t.factory('SyncAPIService', SyncAPIService)\r\n\t.factory('UserService', UserService)\r\n\t.factory('UserSettings', UserSettings)\r\n\t.factory('UserSession', UserSession)\r\n\t.factory('SyncService', SyncService)\r\n\t.factory('SyncSelection', SyncSelection)\r\n\t.factory('safo', safo)\r\n\t.factory('SynthError', SynthError)\r\n\t.factory('SynthFail', SynthFail)\r\n\t.factory('SynthCheckResponseError', SynthCheckResponseError)\r\n\t.factory('SynthErrorHandler', SynthErrorHandler)\r\n\t.factory('SynthAuthenticateUser', SynthAuthenticateUser)\r\n\t.factory('SynthesisRESTClient', SynthesisRESTClient)\r\n\t.factory('Lock', Lock);\r\n\r\n// Register filters\r\nangular.module(filters, [])\r\n\t.filter('noEscape', NoEscapeFilter)\r\n\t.filter('object2Array', Object2ArrayFilter)\r\n\t.filter('array2Object', ArrayToObjectFilter)\r\n\t.filter('formatDate', FormatDateFilter)\r\n\t.filter('bytesToSize', BytesToSizeFilter)\r\n\t.filter('attachments', AttachmentsFilter);\r\n\r\n// Register directives\r\nangular.module(directives, [])\r\n\t.directive('synthMenu', SynthMenu)\r\n\t.directive('synthFooter', SynthFooter)\r\n\t.directive('toolSyncStatus', ToolSyncStatus)\r\n\t.directive('overallSyncStatus', OverallSyncStatus)\r\n\t.directive('synthAttachments', SynthAttachments)\r\n\t.directive('moduleCollapse', ModuleCollapse)\r\n\t.directive('animatedEllipse', AnimatedEllipse)\r\n\t.directive('currentModuleName', CurrentModuleName)\r\n\t.directive('moduleName', ModuleName)\r\n\t.directive('toolName', ToolName);\r\n\r\n// Register providers\r\nangular.module(providers, [])\r\n\t.provider('SynthAttachmentMiner', SynthAttachmentMinerProvider)\r\n\t.provider('SynthEmbeddedImageHandler', SynthEmbeddedImageHandlerProvider)\r\n\t.provider('SynthDeleteHandler', SynthDeleteHandlerProvider)\r\n\t.provider('SynthLinkHandler', SynthLinkHandlerProvider)\r\n\t.provider('SynthUploadResponseHandler', SynthUploadResponseHandlerProvider);\r\n\r\n// Create base module\r\nangular.module(base, [\r\n\tproviders,\r\n\tcontrollers,\r\n\tfactories,\r\n\tfilters,\r\n\tdirectives\r\n]).config(Routes);\r\n\r\nexport default base;\r\n"
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "base",
    "memberof": "js/base/index.js",
    "longname": "js/base/index.js~base",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/index.js",
    "importStyle": "base",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/register/RegisterCtrl.js",
    "memberof": null,
    "longname": "js/base/register/RegisterCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "content": "/*\r\n * base/js/register/RegisterCtrl.js\r\n */\r\nvar RegisterCtrl = ($scope, $rootScope, $location, $q, SynthesisRESTClient, DataService, SynthErrorHandler, SynthError, PushService) => {\r\n\t$rootScope.activePage = 'register';\r\n\t$rootScope.breadcrumbs = [{'name' : 'Register'}];\r\n\t$scope.authFailed = false;\r\n\t$scope.login = {username : '', password : ''};\r\n\t$scope.busyLogin = false;\r\n\t$scope.submitButtonTxt = 'Sign in';\r\n\r\n\tvar funcAuthenticateUser = function(){\r\n\t\t\tfuncSigningIn(true);\r\n\t\t\tvar username = $scope.login.username;\r\n\t\t\tvar password = $scope.login.password;\r\n\t\t\treturn SynthesisRESTClient\r\n\t\t\t\t.authenticateUser(username, password)\r\n\t\t\t\t.then((result) => {\r\n\t\t\t\t\tfuncSigningIn(false);\r\n\t\t\t\t\tif(!result.authenticated){\r\n\t\t\t\t\t\t// $scope.login.password = null; // Clear entered password\r\n\t\t\t\t\t\treturn $q.reject(SynthError(result));\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn undefined;\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tfuncCompleted = function(){\r\n\t\t\t// We don't need to wait for this to complete, it must just happen\r\n\t\t\tPushService.registerDevice();\r\n\t\t\t$location.path('/register-selectModules');\r\n\t\t},\r\n\t\tfuncFailed = function(reason){\r\n\t\t\tfuncSigningIn(false);\r\n\t\t\treturn SynthErrorHandler(reason);\r\n\t\t},\r\n\t\tfuncSigningIn = function(isBusy){\r\n\t\t\t$scope.submitButtonTxt = isBusy ? 'Signing in' : 'Sign in';\r\n\t\t\t$scope.busyLogin = isBusy;\r\n\t\t};\r\n\r\n\t// Submit handler\r\n\t$scope.submit = function(){\r\n\t\tfuncAuthenticateUser().then(funcCompleted, funcFailed);\r\n\t};\r\n};\r\nRegisterCtrl.$inject = ['$scope', '$rootScope', '$location', '$q', 'SynthesisRESTClient', 'DataService', 'SynthErrorHandler', 'SynthError', 'PushService'];\r\nexport default RegisterCtrl;\r\n"
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RegisterCtrl",
    "memberof": "js/base/register/RegisterCtrl.js",
    "longname": "js/base/register/RegisterCtrl.js~RegisterCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/register/RegisterCtrl.js",
    "importStyle": "RegisterCtrl",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/register/RegisterModuleRegistrationCtrl.js",
    "memberof": null,
    "longname": "js/base/register/RegisterModuleRegistrationCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Controller to register the modules with the sync engine\r\n*/\r\nvar RegisterModuleRegistrationCtrl = ($scope, $rootScope, $location, UserSession, DataService, RegisterService, LoggerService, SynthErrorHandler, SynthAuthenticateUser, ModuleService) =>{\r\n\tvar LOG = LoggerService('RegisterModuleRegistrationCtrl');\r\n\r\n\t$rootScope.activePage = 'register-moduleRegistration';\r\n\t$rootScope.breadcrumbs = [{'name' : 'Registering Modules'}];\r\n\t$scope.error = false;\r\n\t$scope.busy = true;\r\n\r\n\t/*\r\n\t* Check that the user still has a registration object on the user session.\r\n\t* This object might be deleted if the user presses back after completing a\r\n\t* registration\r\n\t*/\r\n\tif (UserSession.registration.modules == null){\r\n\t\tLOG.info('There are no modules for active user');\r\n\t\t$location.path('/register');\r\n\t\treturn;\r\n\t}\r\n\r\n\tModuleService.getLinkedModules().then((registeredModulesObj) => {\r\n\t\tvar modules = [];\r\n\r\n\t\tangular.forEach(UserSession.registration.modules, (module) => {\r\n\t\t\tif(!(registeredModulesObj[module.id] != null)){\r\n\t\t\t\tmodules.push(module);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// If there are no modules to register for, we are done\r\n\t\tif(modules.length == 0){\r\n\t\t\t$location.path('/home');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Add the modules to the scope and start the registration\r\n\t\t$scope.modules = modules;\r\n\t\tstartRegistrations();\r\n\t});\r\n\r\n\tvar funcInitModules = function(){\r\n\t\t\treturn RegisterService.initModules($scope.modules);\r\n\t\t},\r\n\t\tfuncRegisterModules = function(){\r\n\t\t\treturn RegisterService.registerModules($scope.modules);\r\n\t\t},\r\n\t\tfuncGoToSync = function(){\r\n\t\t\t$scope.busy = false;\r\n\t\t\t$location.path('/sync');\r\n\t\t},\r\n\t\tfuncHandleError = function(reason){\r\n\r\n\t\t\tif(reason.id === 2002){\r\n\t\t\t\tSynthAuthenticateUser\r\n\t\t\t\t.login('Please enter password', 'Sync')\r\n\t\t\t\t.then((result) => {\r\n\t\t\t\t\tif(SynthAuthenticateUser.FAILED == result.code){\r\n\t\t\t\t\t\tLOG.warn('Authentication failed');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(SynthAuthenticateUser.SUCCESS == result.code){\r\n\t\t\t\t\t\tstartRegistrations();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\t$scope.errorMessage = 'You need to authenticate';\r\n\t\t\t\t\t\t$scope.error = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tSynthErrorHandler(reason).then(() => {}, () =>{\r\n\t\t\t\t\tLOG.error('Error while trying to register for modules');\r\n\t\t\t\t\t$scope.error = true;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\tfunction startRegistrations(){\r\n\t\tfuncInitModules()\r\n\t\t.then(funcRegisterModules)\r\n\t\t.then(funcGoToSync, funcHandleError);\r\n\t}\r\n};\r\nRegisterModuleRegistrationCtrl.$inject = ['$scope', '$rootScope', '$location', 'UserSession', 'DataService', 'RegisterService', 'LoggerService', 'SynthErrorHandler', 'SynthAuthenticateUser', 'ModuleService'];\r\nexport default RegisterModuleRegistrationCtrl;\r\n"
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RegisterModuleRegistrationCtrl",
    "memberof": "js/base/register/RegisterModuleRegistrationCtrl.js",
    "longname": "js/base/register/RegisterModuleRegistrationCtrl.js~RegisterModuleRegistrationCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/register/RegisterModuleRegistrationCtrl.js",
    "importStyle": "RegisterModuleRegistrationCtrl",
    "description": "Controller to register the modules with the sync engine",
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/register/RegisterSelectModuleCtrl.js",
    "memberof": null,
    "longname": "js/base/register/RegisterSelectModuleCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Controller to allow the user to select modules that should be used by this application\r\n*/\r\nvar RegisterSelectModuleCtrl = ($q, $scope, $rootScope, $location, ModuleService, DataService, UserSession, LoggerService, SyncAPIService, SynthErrorHandler, SynthAuthenticateUser, RegistrationService) => {\r\n\tvar LOG = LoggerService('RegisterSelectModuleCtrl');\r\n\r\n\t$rootScope.activePage = 'register-selectModule';\r\n\t$rootScope.breadcrumbs = [{'name' : 'Select Modules'}];\r\n\r\n\t// Add properties to scope\r\n\tangular.extend($scope, {\r\n\t\terror : false,\r\n\t\terrorMessage : null,\r\n\t\tcanContinue : false,\r\n\t\tloadingModules : true,\r\n\t\tmodules : null,\r\n\t\t// Bind to function\r\n\t\thasSelectedModules : false,\r\n\t\thasNewModules : false\r\n\t});\r\n\tvar firstTime = true;\r\n\r\n\r\n\tvar getSelectedModules = function(){\r\n\t\t\tvar modules = $scope.modules;\r\n\r\n\t\t\t// If there is no modules, we have nothing\r\n\t\t\tif(modules == null){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tvar selectedModules = [];\r\n\r\n\t\t\t_.forEach(modules, (module) => {\r\n\t\t\t\tif (module.selected && !module.registered){\r\n\t\t\t\t\tvar newModule = angular.copy(module);\r\n\t\t\t\t\tdelete newModule.selected;\r\n\t\t\t\t\tselectedModules.push(newModule);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn selectedModules;\r\n\t\t},\r\n\t\t// Get the first module that the user selected\r\n\t\tgetFirstSelectedModule = function(){\r\n\t\t\tvar selectedModules = getSelectedModules();\r\n\t\t\treturn selectedModules == null ? null : selectedModules[0];\r\n\t\t},\r\n\t\tcheckSelectedModules = function(){\r\n\t\t\t$scope.hasSelectedModules = getFirstSelectedModule() != null;\r\n\r\n\t\t\tif(firstTime || $scope.hasSelectedModules){\r\n\t\t\t\t$scope.error = false;\r\n\t\t\t\t$scope.canContinue = true;\r\n\t\t\t\tfirstTime = false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\twarnSelectModule();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Warns the user that a module must be selected\r\n\t\twarnSelectModule = function(){\r\n\t\t\tangular.extend($scope, {\r\n\t\t\t\terror : true,\r\n\t\t\t\terrorMessage : 'You must select atleast one module',\r\n\t\t\t\tcanContinue : false\r\n\t\t\t});\r\n\t\t};\r\n\r\n\tfunction getModules(){\r\n\t\t$scope.loadingModules = true;\r\n\t\tvar currentModules, newModules;\r\n\r\n\t\t// Save the newly discover modules to our list of known modules\r\n\t\tfunction saveNewModules(){\r\n\r\n\t\t\t// If there is now new modules we don't have to save anything\r\n\t\t\tif(newModules.lenth === 0){\r\n\t\t\t\treturn $q.when([]);\r\n\t\t\t}\r\n\r\n\t\t\tvar mergeMap = { modules : {}};\r\n\r\n\t\t\t_.forEach(newModules, (newModule) => {\r\n\t\t\t\tmergeMap.modules[newModule.id] = newModule;\r\n\t\t\t});\r\n\r\n\t\t\treturn RegistrationService.mergeRegistration(mergeMap);\r\n\t\t}\r\n\r\n\t\tfunction getCurrentModules(){\r\n\t\t\treturn ModuleService.getCurrentModules().then((modules) => {\r\n\t\t\t\tcurrentModules = modules;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction getNewModules(){\r\n\t\t\treturn ModuleService.getNewModules().then((modules) => {\r\n\t\t\t\t$scope.hasNewModules = modules.length > 0;\r\n\t\t\t\tnewModules = modules;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction concatModules(){\r\n\t\t\t$scope.loadingModules = false;\r\n\t\t\treturn $q.when(currentModules.concat(newModules));\r\n\t\t}\r\n\r\n\t\tgetCurrentModules()\r\n\t\t\t.then(getNewModules)\r\n\t\t\t.then(saveNewModules)\r\n\t\t\t.then(concatModules)\r\n\t\t\t.then((modules) => {\r\n\t\t\t\t$scope.loadingModules = false;\r\n\t\t\t\t$scope.modules = modules;\r\n\t\t\t\tif($scope.modules.length == 0){\r\n\t\t\t\t\tangular.extend($scope, {\r\n\t\t\t\t\t\terror : true,\r\n\t\t\t\t\t\terrorMessage : 'You are not registered for any modules',\r\n\t\t\t\t\t\tcanContinue : false,\r\n\t\t\t\t\t\tmodules : null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tcheckSelectedModules();\r\n\t\t\t}, (reason) => {\r\n\t\t\t\t$scope.loadingModules = false;\r\n\r\n\t\t\t\tif(reason.id === 2002){\r\n\t\t\t\t\tSynthAuthenticateUser\r\n\t\t\t\t\t.login('Please enter password', 'Sync')\r\n\t\t\t\t\t.then(function(result){\r\n\t\t\t\t\t\tif(SynthAuthenticateUser.FAILED == result.code){\r\n\t\t\t\t\t\t\tLOG.warn('Authentication failed');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(SynthAuthenticateUser.SUCCESS == result.code){\r\n\t\t\t\t\t\t\tgetModules();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t$scope.errorMessage = 'You need to authenticate';\r\n\t\t\t\t\t\t\t$scope.error = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tSynthErrorHandler(reason).then(() => {}, () => {\r\n\t\t\t\t\t\t$scope.errorMessage = 'Failed to retrieve modules';\r\n\t\t\t\t\t\t$scope.error = true;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\r\n\t// Toggle the selection of a module\r\n\t$scope.toggleModule = function(module){\r\n\r\n\t\t// Do nothing if the user is already registered for the module\r\n\t\tif(module.registered){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tmodule.selected = !module.selected;\r\n\t\tcheckSelectedModules();\r\n\t};\r\n\r\n\r\n\t// Function to handle submit of the form\r\n\t$scope.submit = function(){\r\n\r\n\t\t// Check that there was a selection\r\n\t\tif (!$scope.hasSelectedModules){\r\n\t\t\t$scope.errorMessage = 'You must select atleast one module';\r\n\t\t\t$scope.error = true;\r\n\r\n\t\t/*\r\n\t\t* If there was modules selected, we will go to the next page\r\n\t\t* where the device will register with the service that those\r\n\t\t* modules will be used on the device.\r\n\t\t*/\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// Get the modules the user choose\r\n\t\t\tUserSession.registration = UserSession.registration || {};\r\n\t\t\tUserSession.registration.modules = getSelectedModules();\r\n\r\n\t\t\t// Go to the next page where the modules will get registered\r\n\t\t\t$location.path('/register-modulesRegistration');\r\n\t\t}\r\n\t};\r\n\r\n\tgetModules();\r\n\r\n};\r\nRegisterSelectModuleCtrl.$inject = ['$q', '$scope', '$rootScope', '$location', 'ModuleService', 'DataService', 'UserSession', 'LoggerService', 'SyncAPIService', 'SynthErrorHandler', 'SynthAuthenticateUser', 'RegistrationService'];\r\nexport default RegisterSelectModuleCtrl;\r\n"
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RegisterSelectModuleCtrl",
    "memberof": "js/base/register/RegisterSelectModuleCtrl.js",
    "longname": "js/base/register/RegisterSelectModuleCtrl.js~RegisterSelectModuleCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/register/RegisterSelectModuleCtrl.js",
    "importStyle": "RegisterSelectModuleCtrl",
    "description": "Controller to allow the user to select modules that should be used by this application",
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/register/RegisterService.js",
    "memberof": null,
    "longname": "js/base/register/RegisterService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n * base/js/home/RegisterService.js\r\n *\r\n * Service that will handle registrations of modules.\r\n * This service interacts with SyncAPI to talk with external services,\r\n * and with DataService for writing files.\r\n */\r\nvar RegisterService = ($q, $filter, DataService, RegistrationService, SyncAPIService, LoggerService, _SF, CheckError, ModuleService) => {\r\n\r\n\t// A reference to a logger for this service\r\n\tvar LOG = LoggerService('RegisterService');\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tclass RegisterServiceImpl{\r\n\t\t/**\r\n\t\t * Initialises the application to use the specified array of modules\r\n\t\t */\r\n\t\tinitModules(modules){\r\n\t\t\tLOG.debug('initModules()');\r\n\t\t\tvar self = this;\r\n\t\t\tlet promise = $q.when();\r\n\t\t\tangular.forEach(modules, function(theModule){\r\n\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\treturn self._createModuleStructure(theModule.id);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Function to register for all modules in an array\r\n\t\t */\r\n\t\tregisterModules(modules){\r\n\r\n\t\t\t// Update registration data with the new module\r\n\t\t\tfunction markModuleLinked(module){\r\n\t\t\t\treturn ModuleService.setModuleProperty(module.id, 'registered', true);\r\n\t\t\t}\r\n\r\n\t\t\tlet promise = $q.when();\r\n\t\t\tangular.forEach(modules, function(theModule){\r\n\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\treturn SyncAPIService.updateModuleData(theModule.id)\r\n\t\t\t\t\t\t.then(function(){\r\n\t\t\t\t\t\t\treturn markModuleLinked(theModule);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn promise;\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Create the file structure for a module\r\n\t\t */\r\n\t\t_createModuleStructure(moduleId){\r\n\t\t\tconst self = this;\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns a promise to create all the tools\r\n\t\t\t */\r\n\t\t\tfunction getCreateToolsPromise(tools){\r\n\t\t\t\tlet promise = $q.when();\r\n\t\t\t\tangular.forEach(tools, function(tool){\r\n\t\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\t\treturn self._createToolDataFile(moduleId, tool.id);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\treturn promise;\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * Returns a promise to get the tools, and sets\r\n\t\t\t * the tools variable\r\n\t\t\t */\r\n\t\t\tfunction getModuleToolsPromise(){\r\n\t\t\t\treturn self._getModuleTools(moduleId);\r\n\t\t\t}\r\n\r\n\t\t\treturn this._createModuleDataFile(moduleId)\r\n\t\t\t\t.then(getModuleToolsPromise)\r\n\t\t\t\t.then(getCreateToolsPromise);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Create the file structure for a module\r\n\t\t */\r\n\t\t_createModuleDataFile(moduleId){\r\n\t\t\treturn ModuleService.createDefaultModuleFile(moduleId);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Create the data file for a tool\r\n\t\t */\r\n\t\t_createToolDataFile(moduleId, toolId){\r\n\t\t\treturn ModuleService.mergeToToolData(moduleId, toolId, {});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the tools used for the module\r\n\t\t */\r\n\t\t_getModuleTools(moduleId){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\tModuleService.getModuleData(moduleId).then(\r\n\t\t\t\t// Success\r\n\t\t\t\t(data) => {\r\n\t\t\t\t\tvar tools = $filter('object2Array')(data.toolsLocal);\r\n\t\t\t\t\tif(LOG.isDEBUG()){\r\n\t\t\t\t\t\tLOG.debug('Got module tools : ' + JSON.stringify(tools));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdeferred.resolve(tools);\r\n\t\t\t\t},\r\n\t\t\t\t// Failed\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t});\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\t}\r\n\r\n\treturn new RegisterServiceImpl();\r\n};\r\nRegisterService.$inject = ['$q', '$filter', 'DataService', 'RegistrationService', 'SyncAPIService', 'LoggerService', 'SynthFail', 'SynthCheckResponseError', 'ModuleService'];\r\nexport default RegisterService;\r\n"
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RegisterService",
    "memberof": "js/base/register/RegisterService.js",
    "longname": "js/base/register/RegisterService.js~RegisterService",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/register/RegisterService.js",
    "importStyle": "RegisterService",
    "description": "base/js/home/RegisterService.js\n\nService that will handle registrations of modules.\nThis service interacts with SyncAPI to talk with external services,\nand with DataService for writing files.",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/services/DataService.js",
    "memberof": null,
    "longname": "js/base/services/DataService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nimport {convertToString} from '../Utilities';\r\nimport bases from 'bases';\r\n/*\r\n * base/js/services/DataService.js\r\n * Create factory for the DataService\r\n */\r\nvar DataService = ($q, $http, $rootScope, LoggerService, SynthError, UserSession, SynthConfig, Lock) => {\r\n\r\n\tvar LOG = LoggerService('DataService');\r\n\t// Characters that will be used to generate filenames\r\n\t// Windows Quirks\r\n\t// - case insensitive, hense no capitals\r\n\t// - underscores are not allowed\r\n\t// No other special characters are used because to mess with sorting\r\n\tconst FILENAME_CHARS = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\t// The lock key that is used when generating new file names\r\n\tconst FILE_CREATE_LOCK = 'DataService.FILE_CREATE_LOCK';\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tclass DataServiceImpl{\r\n\r\n\t\tconstructor(){\r\n\t\t\tthis.cachedRouteFileSystem = null;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * TODO remove this, device will be ready before angular starts\r\n\t\t */\r\n\t\tcordovaReady(){\r\n\t\t\treturn $q.when();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets the directory in which content data is stored\r\n\t\t * /Synthesis/content/\r\n\t\t */\r\n\t\tgetContentDirectory (){\r\n\t\t\treturn this.checkAndCreateDirectory('content');\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * /Synthesis/data/\r\n\t\t */\r\n\t\tgetDataDirectory(){\r\n\t\t\treturn this.checkAndCreateDirectory('data');\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets a file in the data directory\r\n\t\t */\r\n\t\tgetDataFile(filename){\r\n\t\t\treturn this.getFileData('data', filename);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Merge json to a file in the /Synthesis/data directory\r\n\t\t * @param filename Name of the file inside of /Synthesis/data/\r\n\t\t * @param jsonObject The object to merge into this file\r\n\t\t*/\r\n\t\tmergeDataFile(filename, jsonObject){\r\n\t\t\treturn this.mergeToFile('data', filename, jsonObject);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Creates a new file in the data directory of the app\r\n\t\t * This file will be created in an abitrary directory under /Synthesis/data/{generatedFolder}/{filename}\r\n\t\t * @param filename Name of the file to create. E.g. MyImage.png\r\n\t\t * @returns A promise resolving to the FileEntry representing the file\r\n\t\t */\r\n\t\tcreateNewFile(filename){\r\n\t\t\tvar dataDirEntry;\r\n\t\t\tconst self = this;\r\n\t\t\tfunction getLock(){\r\n\t\t\t\treturn Lock.getLock(FILE_CREATE_LOCK);\r\n\t\t\t}\r\n\r\n\t\t\tfunction getContentDirectory(){\r\n\t\t\t\treturn self.getContentDirectory();\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t * Gets the listing of all files within the DirectoryEntry\r\n\t\t\t * @param dirEntry Directory entry to get the contents listing of\r\n\t\t\t * @returns A promise that resolves to an array of entries.\r\n\t\t\t */\r\n\t\t\tfunction getDirectoryListing(dirEntry){\r\n\t\t\t\tdataDirEntry = dirEntry;\r\n\t\t\t\tvar listingDefered = $q.defer();\r\n\t\t\t\tvar dirReader = dataDirEntry.createReader();\r\n\t\t\t\tvar entries = [];\r\n\r\n\t\t\t\t// Call the reader.readEntries() until no more results are returned.\r\n\t\t\t\t// TODO uptomise and only get the last directory name\r\n\t\t\t\tvar readEntries = function() {\r\n\t\t\t\t\tdirReader.readEntries((results) =>{\r\n\t\t\t\t\t\t// If no more entries are found, we are done\r\n\t\t\t\t\t\tif (!results.length) {\r\n\t\t\t\t\t\t\tlistingDefered.resolve(entries.sort((fileEntry1, fileEntry2) => {\r\n\t\t\t\t\t\t\t\tvar name1 = fileEntry1.name, name2 = fileEntry2.name;\r\n\t\t\t\t\t\t\t\tif(name1.length !== name2.length){\r\n\t\t\t\t\t\t\t\t\treturn name1.length - name2.length;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn name1.localeCompare(name2);\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tentries = entries.concat(Array.prototype.slice.call(results || [], 0));\r\n\t\t\t\t\t\t\treadEntries();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, (error) =>{\r\n\t\t\t\t\t\tLOG.warn('Failed to get directory listing, code:' + error.code);\r\n\t\t\t\t\t\tlistingDefered.reject(SynthError(1004, error.code));\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\t\t\t\treadEntries(); // Start reading dirs.\r\n\t\t\t\treturn listingDefered.promise;\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t * Finds the next available directory based on the array of files within the\r\n\t\t\t * file listing\r\n\t\t\t * @param fileListing Array of files in the contants directory\r\n\t\t\t * @returns A name of the next available filename that can be used.\r\n\t\t\t */\r\n\t\t\tfunction findNextOpenDirectory(fileListing){\r\n\t\t\t\t// If there is no files yet, we start with 1.ext\r\n\t\t\t\tif(fileListing.length === 0){\r\n\t\t\t\t\treturn $q.when(FILENAME_CHARS.charAt(0));\r\n\t\t\t\t}\r\n\t\t\t\t// Else we take the last file in the list, and get the next available name\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Get the file name\r\n\t\t\t\t\tvar lastDirectoryName = fileListing[fileListing.length - 1].name;\r\n\t\t\t\t\tvar index = bases.fromAlphabet(lastDirectoryName, FILENAME_CHARS);\r\n\t\t\t\t\tvar newDirectoryName = bases.toAlphabet(index + 1, FILENAME_CHARS);\r\n\t\t\t\t\treturn $q.when(newDirectoryName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t * Creates the new directory\r\n\t\t\t * @param directoryName Name of the directory to create\r\n\t\t\t * @returns A promise that resolves with the DirectoryEntry\r\n\t\t\t */\r\n\t\t\tfunction createNewDirectory(directoryName){\r\n\t\t\t\tvar deferred = $q.defer();\r\n\t\t\t\tdataDirEntry.getDirectory(directoryName, {create : true, exclusive : true}, (dirEntry) => {\r\n\t\t\t\t\tdeferred.resolve(dirEntry);\r\n\t\t\t\t},\r\n\t\t\t\t// Error Creating directory\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tLOG.warn(`Error creating path ${directoryName} : ${error}`);\r\n\t\t\t\t\tdeferred.reject(SynthError(1004, error));\r\n\t\t\t\t});\r\n\t\t\t\treturn deferred.promise;\r\n\t\t\t}\r\n\r\n\t\t\tfunction createFile(directoryEntry){\r\n\t\t\t\tvar deferred = $q.defer();\r\n\t\t\t\tdirectoryEntry.getFile(filename, {create : true},\r\n\t\t\t\t\t(fileEntry) => {\r\n\t\t\t\t\t\tLOG.debug('Created new file: ' + fileEntry.toInternalURL());\r\n\t\t\t\t\t\tdeferred.resolve(fileEntry);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t() => {\r\n\t\t\t\t\t\tLOG.warn('Failed to create file');\r\n\t\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn deferred.promise;\r\n\t\t\t}\r\n\r\n\t\t\treturn getLock()\r\n\t\t\t\t.then(getContentDirectory)\r\n\t\t\t\t.then(getDirectoryListing)\r\n\t\t\t\t.then(findNextOpenDirectory)\r\n\t\t\t\t.then(createNewDirectory)\r\n\t\t\t\t.then(createFile)\r\n\t\t\t\t.then((returnData) => {\r\n\t\t\t\t\treturn Lock.returnLock(FILE_CREATE_LOCK, returnData);\r\n\t\t\t\t}, (reason) =>{\r\n\t\t\t\t\treturn Lock.returnLock(FILE_CREATE_LOCK, reason, false);\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Gets the root directory where the application is writing files\r\n\t\t */\r\n\t\tgetApplicationRoot(){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\t// TODO remove the false!\r\n\t\t\t// if (false && this.cachedRouteFileSystem !== null){\r\n\t\t\t//deferred.resolve(this.cachedRouteFileSystem);\r\n\t\t\t//}\r\n\t\t\t//else {\r\n\t\t\tvar self = this;\r\n\t\t\tthis.cordovaReady().then(() => {\r\n\t\t\t\twindow.requestFileSystem(LocalFileSystem.PERSISTENT, 0, gotFS, fail);\r\n\t\t\t\tfunction gotFS(fileSystem) {\r\n\t\t\t\t\tfileSystem.root.getDirectory(SynthConfig.dataDir, {create : true, exclusive : false},\r\n\t\t\t\t\t\t(directory) => {\r\n\t\t\t\t\t\t\tself.cachedRouteFileSystem = directory;\r\n\t\t\t\t\t\t\tdeferred.resolve(directory);\r\n\t\t\t\t\t\t}, (error) => {\r\n\t\t\t\t\t\t\tLOG.warn('Failed to get application root : ' + error);\r\n\t\t\t\t\t\t\tdeferred.reject(SynthError(1004, error.code));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tfunction fail(error) {\r\n\t\t\t\t\tLOG.warn('Failed to get filesystem, code:' + error.code);\r\n\t\t\t\t\tdeferred.reject(SynthError(1004, error.code));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t//}\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Checks if the specified path exists, and creates all parent directories\r\n\t\t * if required.\r\n\t\t * The path is created from the root of the application path\r\n\t\t */\r\n\t\tcheckAndCreateDirectory(path){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\tthis.getApplicationRoot().then(\r\n\t\t\t\tfunction(root){\r\n\r\n\t\t\t\t\t// Throw out './' or '/' and move on to prevent something like '/foo/.//bar'.\r\n\t\t\t\t\tfunction removeBlanks(folders){\r\n\t\t\t\t\t\tif (folders.length > 0 && (folders[0] === '.' || folders[0] === '')) {\r\n\t\t\t\t\t\t\tfolders = folders.slice(1);\r\n\t\t\t\t\t\t\treturn removeBlanks(folders); // Call again to check the next one too\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\treturn folders;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfunction createDir (rootDirEntry, folders){\r\n\t\t\t\t\t\tfolders = removeBlanks(folders);\r\n\r\n\t\t\t\t\t\t// If there are no more folders left, this is it\r\n\t\t\t\t\t\tif (folders.length === 0){\r\n\t\t\t\t\t\t\tdeferred.resolve(rootDirEntry);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar folder = folders[0];\r\n\t\t\t\t\t\tlet foldersLeft = folders.slice(1);\r\n\t\t\t\t\t\t//LOG.debug('Creating directory : ' + folder + ' in parent: ' + rootDirEntry.fullPath);\r\n\t\t\t\t\t\trootDirEntry.getDirectory(folder, {create : true, exclusive : false}, (dirEntry) => {\r\n\t\t\t\t\t\t\t// Recursively add the new subfolder (if we still have another to create).\r\n\t\t\t\t\t\t\tif (foldersLeft.length > 0) {\r\n\t\t\t\t\t\t\t\tcreateDir(dirEntry, foldersLeft);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tdeferred.resolve(dirEntry);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t// Error Creating directory\r\n\t\t\t\t\t\t(error) => {\r\n\t\t\t\t\t\t\tLOG.warn(`Error creating path ${path} : ${error}`);\r\n\t\t\t\t\t\t\tdeferred.reject(SynthError(1004, error));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar rootPath = `cdvfile://localhost/persistent/${SynthConfig.dataDir}`;\r\n\t\t\t\t\tif(path.indexOf(rootPath) === 0){\r\n\t\t\t\t\t\tpath = path.substring(rootPath.length);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcreateDir(root, path ? path.split('/') : []);\r\n\t\t\t\t});\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets the full path of the root directory.\r\n\t\t * The success of the promise will return a string of the full path\r\n\t\t * to the application root directory.\r\n\t\t */\r\n\t\tgetLocalFilePath(){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\tthis.getApplicationRoot().then(\r\n\t\t\t\t// Success\r\n\t\t\t\t(root) => {\r\n\t\t\t\t\tdeferred.resolve(root.fullPath);\r\n\t\t\t\t},\r\n\t\t\t\t// Failed\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tdeferred.reject(SynthError(1004, error));\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Writes to the data file of a tool.\r\n\t\t * NOTE: This function will replace the current data file of the tool\r\n\t\t *\r\n\t\t * @param moduleId - Id of the module this tool is in.\r\n\t\t * @param toolname - Name of the tool to write data to.\r\n\t\t * @param jsonData - Either a JSON Object, or a JSON string that represents the data\r\n\t\t * that should be written to the tool's data file\r\n\t\t * @param isUploadData - Flag if the data is for the upload file of the tool (optional, default=false)\r\n\t\t */\r\n\t\twriteToolData(moduleId, toolname, jsonData, isUploadData){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\tthis.getDataDirectory().then(\r\n\t\t\t\t// Success\r\n\t\t\t\tfunction(root){\r\n\t\t\t\t\tvar filename = moduleId + '-' + toolname + (isUploadData ? '.up.json' : '.json');\r\n\t\t\t\t\troot.getFile(filename, {create : true, exclusive : false},\r\n\t\t\t\t\t\t(fileEntry) => {\r\n\t\t\t\t\t\t\tfileEntry.createWriter(onWriterReady, fail);\r\n\t\t\t\t\t\t}, fail);\r\n\r\n\t\t\t\t\tfunction onWriterReady(writer) {\r\n\t\t\t\t\t\twriter.onwriteend = function() {\r\n\t\t\t\t\t\t\tdeferred.resolve();\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tvar dataString = convertToString(jsonData);\r\n\t\t\t\t\t\tif (dataString != null){\r\n\t\t\t\t\t\t\twriter.write(dataString);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tLOG.warn('Failed while trying to write tool data, Invalid data type given to write as tool data');\r\n\t\t\t\t\t\t\tdeferred.reject(SynthError(1000, 'Invalid data type given to write as tool data'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * Function for when an IO action fails\r\n\t\t\t\t\t */\r\n\t\t\t\t\tfunction fail(error) {\r\n\t\t\t\t\t\tLOG.warn('Failed while trying to write tool data, error : ' + error);\r\n\t\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t// Fail\r\n\t\t\t\tfunction(){\r\n\t\t\t\t\tdeferred.reject();\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Write content to a file\r\n\t\t *\r\n\t\t * @param directoryPath - Path of the directory to write in.\r\n\t\t * @param filename - Name of the file to write in.\r\n\t\t * @param data - Data to write to the file. The data can be a string or a JSON object\r\n\t\t * which will be converted to a json string.\r\n\t\t */\r\n\t\twriteToFile(directoryPath, filename, data){\r\n\t\t\tconst self = this;\r\n\r\n\t\t\tfunction writeFile(directory){\r\n\t\t\t\tvar writeDeferred = $q.defer();\r\n\t\t\t\tdirectory.getFile(filename, {create : true, exclusive : false},\r\n\t\t\t\t\t(fileEntry) => {\r\n\t\t\t\t\t\tfileEntry.createWriter(onWriterReady, fail);\r\n\t\t\t\t\t}, fail);\r\n\r\n\t\t\t\t// Writer is ready to write\r\n\t\t\t\tfunction onWriterReady(writer) {\r\n\t\t\t\t\twriter.onwriteend = function() {\r\n\t\t\t\t\t\twriteDeferred.resolve(data);\r\n\t\t\t\t\t\tself.busyWriting = false;\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar outputData = convertToString(data);\r\n\t\t\t\t\twriter.write(outputData);\r\n\t\t\t\t}\r\n\t\t\t\t// Function for when an IO action fails\r\n\t\t\t\tfunction fail(error) {\r\n\t\t\t\t\tLOG.warn('Failed while trying to write to file, error: ' + error);\r\n\t\t\t\t\twriteDeferred.reject(SynthError(1004));\r\n\t\t\t\t}\r\n\t\t\t\treturn writeDeferred.promise;\r\n\t\t\t}\r\n\r\n\r\n\t\t\treturn this.checkAndCreateDirectory(directoryPath).then(\r\n\t\t\t\t// Success getting directory path\r\n\t\t\t\tfunction(directory){\r\n\t\t\t\t\t// First get a write lock on the file\r\n\t\t\t\t\treturn Lock.getLock(`${directoryPath}${filename}`)\r\n\t\t\t\t\t// Now write to the file\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\treturn writeFile(directory);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t// Return our lock on the file\r\n\t\t\t\t\t\t.then((writtenData) => {\r\n\t\t\t\t\t\t\treturn Lock.returnLock(`${directoryPath}${filename}`, writtenData);\r\n\t\t\t\t\t\t}, (reason) => {\r\n\t\t\t\t\t\t\treturn Lock.returnLock(`${directoryPath}${filename}`, reason, false);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\t// Failed to get directory path\r\n\t\t\t\tfunction(error){\r\n\t\t\t\t\tLOG.warn('Failed while trying to write to file, error: ' + error);\r\n\t\t\t\t\treturn $q.reject(SynthError(1004));\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Copies content from the web to a file\r\n\t\t */\r\n\t\tcopyFromWebToFile(webPath, directoryPath, filename){\r\n\t\t\tconst deferred = $q.defer(),\r\n\t\t\t\tself = this;\r\n\t\t\tthis.getWebData(webPath).then(\r\n\t\t\t\t// Success\r\n\t\t\t\t(data) => {\r\n\t\t\t\t\tcopyDataToFile(data);\r\n\t\t\t\t},\r\n\t\t\t\t// Failed\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tLOG.warn('Failed to get web data : ' + error);\r\n\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t});\r\n\t\t\t// Function to copy the web data to the file\r\n\t\t\tfunction copyDataToFile(data){\r\n\t\t\t\tself.writeToFile(directoryPath, filename, data).then(\r\n\t\t\t\t\t// Success\r\n\t\t\t\t\t() => {\r\n\t\t\t\t\t\tdeferred.resolve();\r\n\t\t\t\t\t},\r\n\t\t\t\t\t// Failed\r\n\t\t\t\t\t(error) => {\r\n\t\t\t\t\t\tLOG.warn('Failed while trying to copy file from web, error: ' + error);\r\n\t\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Merge content to a file.\r\n\t\t * The newly merged data object is returned\r\n\t\t */\r\n\t\tmergeToFile(directoryPath, filename, jsonObject){\r\n\t\t\tconst deferred = $q.defer(),\r\n\t\t\t\tself = this;\r\n\t\t\t// Get the original contents of the file\r\n\t\t\tthis.getFileData(directoryPath, filename).then(\r\n\t\t\t\t// Success\r\n\t\t\t\t(data) => {\r\n\t\t\t\t\t// Merge the new data to the old data\r\n\t\t\t\t\tlet writeData = angular.merge(data || {}, jsonObject);\r\n\r\n\r\n\t\t\t\t\t// Write the merged data to the file\r\n\t\t\t\t\tself.writeToFile(directoryPath, filename, JSON.stringify(writeData)).then(\r\n\t\t\t\t\t\t// Success\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tdeferred.resolve(writeData);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t//Fail\r\n\t\t\t\t\t\t(error) => {\r\n\t\t\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t//Fail\r\n\t\t\t\tfunction (error){\r\n\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get data from a web json source\r\n\t\t */\r\n\t\tgetWebData(webPath){\r\n\t\t\treturn $http({ 'method' : 'GET', 'url' : webPath})\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\treturn response.data;\r\n\t\t\t\t}, () => {\r\n\t\t\t\t\treturn $q.reject(SynthError(1004));\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets the JSON object from a file\r\n\t\t */\r\n\t\tgetFileData(directoryPath, filename){\r\n\t\t\tLOG.debug('Getting data for: directroy=' + directoryPath + ', filename=' + filename);\r\n\t\t\tconst deferred = $q.defer(),\r\n\t\t\t\tself = this;\r\n\t\t\tthis.checkAndCreateDirectory(directoryPath).then(\r\n\t\t\t\t// Success\r\n\t\t\t\t(directory) => {\r\n\t\t\t\t\tdirectory.getFile(filename, {create : true},\r\n\t\t\t\t\t\t(fileEntry) => {\r\n\t\t\t\t\t\t\tself.getFileAsObject(fileEntry).then(\r\n\t\t\t\t\t\t\t\t// Success\r\n\t\t\t\t\t\t\t\t(object) => {\r\n\t\t\t\t\t\t\t\t\tif(LOG.isDEBUG()){\r\n\t\t\t\t\t\t\t\t\t\tLOG.debug('Got data :' + JSON.stringify(object));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tdeferred.resolve(object);\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t// Fail\r\n\t\t\t\t\t\t\t\t(error) => {\r\n\t\t\t\t\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tLOG.warn('Fail while trying to get file in directory');\r\n\t\t\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t},\r\n\t\t\t\t// Failed\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t});\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Make sure the files exists that prevent the device from scanning for library\r\n\t\t * content in the Application directory\r\n\t\t */\r\n\t\tensureNoMediaScanFiles(){\r\n\t\t\treturn this.writeToFile('', '.nomedia');\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Gets the size of the upload data\r\n\t\t */\r\n\t\tgetToolUploadDataSize(moduleId, toolname){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\tthis.getDataDirectory().then(\r\n\t\t\t\t// Success\r\n\t\t\t\t(toolRoot) => {\r\n\t\t\t\t\tconst filename = `${moduleId}-${toolname}.up.json`;\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * TODO do we have to create the file ?!\r\n\t\t\t\t\t * This will cause each tool to have an upload file\r\n\t\t\t\t\t * even will it will always be empty, the file will get\r\n\t\t\t\t\t * created when checking for sync\r\n\t\t\t\t\t */\r\n\t\t\t\t\ttoolRoot.getFile(filename, {create : true},\r\n\t\t\t\t\t\t(fileEntry) => {\r\n\t\t\t\t\t\t\tfileEntry.file(\r\n\t\t\t\t\t\t\t\t(file) => {\r\n\t\t\t\t\t\t\t\t\tdeferred.resolve(file.size);\r\n\t\t\t\t\t\t\t\t}, fail);\r\n\r\n\t\t\t\t\t\t}, fail\r\n\t\t\t\t\t);\r\n\t\t\t\t}, fail\r\n\t\t\t);\r\n\r\n\t\t\tfunction fail(error){\r\n\t\t\t\tdeferred.reject(error);\r\n\t\t\t}\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Delete the upload data file for a tool\r\n\t\t */\r\n\t\tdeleteToolUploadData(moduleId, toolname){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\tthis.getToolDataFile(moduleId, toolname, true).then(\r\n\t\t\t\t// Success\r\n\t\t\t\t(fileEntry) => {\r\n\t\t\t\t\tfileEntry.remove(\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tdeferred.resolve();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tLOG.warn('Error deleting upload file');\r\n\t\t\t\t\t\t\tdeferred.reject(SynthError(1004, 'Error deleting upload file'));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\t//Fail\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Deletes a file in the contents directory\r\n\t\t */\r\n\t\tdeleteCDVFile(cdvFilePath){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\tLOG.warn('Going to delete file: ' + cdvFilePath);\r\n\t\t\twindow.resolveLocalFileSystemURL(cdvFilePath,\r\n\t\t\t\t// Got the local file\r\n\t\t\t\tfunction(fileEntry){\r\n\t\t\t\t\tfileEntry.remove(() => {\r\n\t\t\t\t\t\tdeferred.resolve();\r\n\t\t\t\t\t}, (error) => {\r\n\t\t\t\t\t\tLOG.warn('Failed to delete file : ' + cdvFilePath);\r\n\t\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\t// Failed to get the file\r\n\t\t\t\t() => {\r\n\t\t\t\t\tLOG.warn('Error getting file to delete: ' + cdvFilePath + ', assuming file is already deleted.');\r\n\t\t\t\t\tdeferred.resolve();\r\n\t\t\t\t});\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Deletes an array of files\r\n\t\t  @param deleteFiles Array of cdv:// file protocal file path\r\n\t\t */\r\n\t\tdeleteCDVFiles(filePaths = []){\r\n\t\t\tlet promise = $q.when();\r\n\t\t\tconst self = this;\r\n\t\t\tangular.forEach(filePaths, function(filePath){\r\n\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\treturn self.deleteToolFile(filePath);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets the file entry for a tool's data file\r\n\t\t * @param moduleId - ID of the module for the tool\r\n\t\t * @param toolname - Name of the tool to get data file of\r\n\t\t * @param isUploadData - Flag if the data file should be the upload file\r\n\t\t */\r\n\t\tgetToolDataFile(moduleId, toolname, isUploadData){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\tthis.getDataDirectory().then(\r\n\t\t\t\t// Success\r\n\t\t\t\t(toolRoot) => {\r\n\t\t\t\t\tvar filename = moduleId + '-' + toolname + (isUploadData ? '.up.json' : '.json');\r\n\t\t\t\t\ttoolRoot.getFile(filename, {create : true},\r\n\t\t\t\t\t\t(fileEntry) => {\r\n\t\t\t\t\t\t\tdeferred.resolve(fileEntry);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t(error) => {\r\n\t\t\t\t\t\t\tLOG.warn('Error getting tool data file, error: ' + error);\r\n\t\t\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t//Fail\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\tgetFileContentCDV(cdvFilePath){\r\n\t\t\tconst deferred = $q.defer();\r\n\r\n\t\t\twindow.resolveLocalFileSystemURL(cdvFilePath,\r\n\t\t\t\t// Got the local file\r\n\t\t\t\tfunction(fileEntry){\r\n\t\t\t\t\tfileEntry.file((file) => {\r\n\t\t\t\t\t\tvar reader = new FileReader();\r\n\t\t\t\t\t\treader.onloadend = function (evt) {\r\n\t\t\t\t\t\t\tdeferred.resolve(evt.target.result);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\treader.readAsText(file);\r\n\t\t\t\t\t}, () => {\r\n\t\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\t// Failed to get the file\r\n\t\t\t\t() => {\r\n\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t});\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the contents of a file without any special conversions\r\n\t\t */\r\n\t\tgetFileContent(toolId, moduleId, filePath){\r\n\t\t\tconst self = this;\r\n\t\t\tvar dataDir = null;\r\n\t\t\t// Returns a promise to get the tools data dir\r\n\t\t\tfunction getToolDataDirPromise(){\r\n\t\t\t\treturn self.getDataDirectory(moduleId, toolId)\r\n\t\t\t\t\t.then((dir) => {\r\n\t\t\t\t\t\tdataDir = dir;\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Returns a promise to get the content of the file\r\n\t\t\tfunction getContentPromise(){\r\n\t\t\t\tconst deferred = $q.defer();\r\n\t\t\t\tLOG.debug('Getting content of file: ' + dataDir.nativeURL + '/' + filePath);\r\n\t\t\t\tdataDir.getFile(filePath, null,\r\n\t\t\t\t\t// Got file\r\n\t\t\t\t\tfunction(fileEntry){\r\n\t\t\t\t\t\tfileEntry.file((file) => {\r\n\t\t\t\t\t\t\tvar reader = new FileReader();\r\n\t\t\t\t\t\t\treader.onloadend = function (evt) {\r\n\t\t\t\t\t\t\t\tdeferred.resolve(evt.target.result);\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\treader.readAsText(file);\r\n\t\t\t\t\t\t}, () => {\r\n\t\t\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\t\t\t\t\t// Failed to get file\r\n\t\t\t\t\t() => {\r\n\t\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t\t});\r\n\t\t\t\treturn deferred.promise;\r\n\t\t\t}\r\n\r\n\t\t\treturn getToolDataDirPromise()\r\n\t\t\t\t.then(getContentPromise);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets a file as an object\r\n\t\t */\r\n\t\tgetFileAsObject(fileEntry){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\tfileEntry.file((file) => {\r\n\t\t\t\tvar reader = new FileReader();\r\n\t\t\t\treader.onloadend = function (evt) {\r\n\t\t\t\t\tif (evt.target.result === ''){\r\n\t\t\t\t\t\tdeferred.resolve({});\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tLOG.debug('File content for ' + fileEntry.toURL());\r\n\t\t\t\t\t\t\tLOG.debug(evt.target.result);\r\n\t\t\t\t\t\t\tdeferred.resolve(angular.fromJson(evt.target.result));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e){\r\n\t\t\t\t\t\t\tLOG.warn('Failed to create object from json string : \\n' + evt.target.result);\r\n\t\t\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\treader.readAsText(file);\r\n\t\t\t}, fail);\r\n\r\n\t\t\tfunction fail(error) {\r\n\t\t\t\tLOG.warn('Failed getting file as object, error : ' + error);\r\n\t\t\t\tdeferred.reject(SynthError(1004, error));\r\n\t\t\t}\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Checks if a file exist\r\n\t\t */\r\n\t\tdoesFileExist(filePath){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\tthis.getApplicationRoot().then(\r\n\t\t\t\t// Success\r\n\t\t\t\tfunction(fileSystem){\r\n\t\t\t\t\tfileSystem.getFile(filePath, { create : false },\r\n\t\t\t\t\t\t// It exists\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tdeferred.resolve(true);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t// It does not exist\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tdeferred.resolve(false);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\t// Failed\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * This method will delete ALL application data from the user's device.\r\n\t\t */\r\n\t\tdeleteAllApplicationData(){\r\n\t\t\tconst deferred = $q.defer();\r\n\t\t\tUserSession.clearSession();\r\n\t\t\tthis.getApplicationRoot().then(\r\n\t\t\t\t// Success\r\n\t\t\t\t(dataDirectoryEntry) => {\r\n\t\t\t\t\tdataDirectoryEntry.removeRecursively(\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\t// Broadcast that all caches should be cleared\r\n\t\t\t\t\t\t\t$rootScope.$broadcast('app.clearAllCache');\r\n\t\t\t\t\t\t\tdeferred.resolve();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tdeferred.reject(SynthError(1004, 'Error deleting all aplication data'));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\t// Failed\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t});\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn new DataServiceImpl();\r\n};\r\nDataService.$inject = ['$q', '$http', '$rootScope', 'LoggerService', 'SynthError', 'UserSession', 'SynthConfig', 'Lock'];\r\nexport default DataService;\r\n"
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DataService",
    "memberof": "js/base/services/DataService.js",
    "longname": "js/base/services/DataService.js~DataService",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/services/DataService.js",
    "importStyle": "DataService",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/services/LoggerService.js",
    "memberof": null,
    "longname": "js/base/services/LoggerService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/*\r\n * base/js/services/services.LoggerService.js\r\n */\r\nvar LoggerService = ($q, $log, $injector, SynthConfig) => {\r\n// Map of loggers created\r\n\tconst loggers = {};\r\n\r\n\t// Contants for log levels\r\n\tconst LEVELS = {\r\n\t\t'DEBUG' : 1,\r\n\t\t'INFO' : 2,\r\n\t\t'WARN' : 3,\r\n\t\t'ERROR' : 4,\r\n\t\t'NONE' : 5\r\n\t};\r\n\r\n\t// Set the current log level from the SynthConfig\r\n\tvar logLevel = SynthConfig.logLevel;\r\n\r\n\t// Should we log to console\r\n\tvar logToConsole = SynthConfig.logToConsole;\r\n\r\n\t// Should we log to a file\r\n\tvar logToFile = SynthConfig.logToFile;\r\n\r\n\t// Number of log files to keep\r\n\tvar numFiles = SynthConfig.logFileCount;\r\n\r\n\t/**\r\n\t * TODO remove this, device will be ready before angular starts\r\n\t */\r\n\tfunction cordovaReady(){\r\n\t\treturn $q.when();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the directory entry where the logs are stored\r\n\t */\r\n\tfunction getLogsDirectory(){\r\n\t\treturn cordovaReady()\r\n\t\t\t.then(function(){\r\n\t\t\t\tvar defer = $q.defer();\r\n\t\t\t\twindow.requestFileSystem(LocalFileSystem.PERSISTENT, 0, gotFS, fail);\r\n\r\n\t\t\t\tfunction gotFS(fileSystem) {\r\n\t\t\t\t\tfileSystem.root.getDirectory(SynthConfig.dataDir, {create : true, exclusive : false},\r\n\t\t\t\t\t\tfunction(directory){\r\n\t\t\t\t\t\t\tdefer.resolve(directory);\r\n\t\t\t\t\t\t}, fail\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tfunction fail(error) {\r\n\t\t\t\t\t$log.warn('LoggerService: Failed to get filesystem, code:' + error.code);\r\n\t\t\t\t\tdefer.reject(error);\r\n\t\t\t\t}\r\n\t\t\t\treturn defer.promise;\r\n\t\t\t})\r\n\t\t\t// Ensure log directory exists\r\n\t\t\t.then(function(rootDirectoryEntry){\r\n\t\t\t\tvar defer = $q.defer();\r\n\t\t\t\trootDirectoryEntry.getDirectory('logs', {create : true}, function(dirEntry) {\r\n\t\t\t\t\tdefer.resolve(dirEntry);\r\n\t\t\t\t});\r\n\t\t\t\treturn defer.promise;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a log entry for the specified logfile name\r\n\t */\r\n\tfunction getLogFileEntry(logFileName){\r\n\t\treturn getLogsDirectory()\r\n\t\t\t// Get the log file\r\n\t\t\t.then(function(logDirEntry){\r\n\t\t\t\tvar defer = $q.defer();\r\n\t\t\t\tlogDirEntry.getFile(logFileName, {create : true},\r\n\t\t\t\t\tfunction(fileEntry){\r\n\t\t\t\t\t\tdefer.resolve(fileEntry);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfunction(error){\r\n\t\t\t\t\t\tdefer.reject(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn defer.promise;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the last log file\r\n\t */\r\n\tfunction removeFileLastLog(){\r\n\t\tconst defer = $q.defer();\r\n\t\tgetLogFileEntry('log.' + numFiles + '.txt')\r\n\t\t\t.then(function(fileEntry){\r\n\t\t\t\tfileEntry.remove(function(){\r\n\t\t\t\t\tdefer.resolve();\r\n\t\t\t\t},\r\n\t\t\t\t\tfunction(error){\r\n\t\t\t\t\t\tdefer.reject(error);\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\treturn defer.promise;\r\n\t}\r\n\r\n\tfunction shiftLog(idx){\r\n\t\tconst defer = $q.defer();\r\n\r\n\t\tfunction fail(error){\r\n\t\t\tdefer.reject(error);\r\n\t\t}\r\n\r\n\t\tgetLogFileEntry('log.' + idx + '.txt')\r\n\t\t\t.then(function(fileEntry){\r\n\t\t\t\tfileEntry.getParent(function(parentEntry){\r\n\t\t\t\t\t// move the directory to a new directory and rename it\r\n\t\t\t\t\tfileEntry.moveTo(parentEntry, 'log.' + (idx + 1) + '.txt', function(newEntry){\r\n\t\t\t\t\t\tdefer.resolve(newEntry);\r\n\t\t\t\t\t}, fail);\r\n\t\t\t\t}, fail);\r\n\t\t\t});\r\n\t\treturn defer.promise;\r\n\t}\r\n\r\n\t/**\r\n\t * Rotate the log files\r\n\t */\r\n\tfunction rotateLogs(){\r\n\t\tfunction getShiftLogPromise(){\r\n\t\t\t/*eslint no-loop-func: \"off\"*/\r\n\t\t\tlet promise = $q.when();\r\n\t\t\tfor(var idx = numFiles - 1; idx >= 0; idx--){\r\n\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\treturn shiftLog(idx);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn promise;\r\n\t\t}\r\n\r\n\t\tfunction getNewLogPromise(){\r\n\t\t\treturn getLogFileEntry('log.0.txt');\r\n\t\t}\r\n\r\n\t\t// Delete last log file\r\n\t\treturn removeFileLastLog()\r\n\t\t\t// Shift remaining files\r\n\t\t\t.then(getShiftLogPromise)\r\n\t\t\t.then(getNewLogPromise);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the log file entry\r\n\t */\r\n\tfunction initService(){\r\n\t\trotateLogs().then((newFileEntry) => {\r\n\t\t\treturn newFileEntry;\r\n\t\t});\r\n\t}\r\n\r\n\tfunction writeToFile(logString){\r\n\t\tgetLogFileEntry('log.0.txt').then((logFileEntry) => {\r\n\t\t\tvar defer = $q.defer();\r\n\t\t\tlogFileEntry.createWriter(onWriterReady, fail);\r\n\r\n\t\t\t// Writer is ready to write\r\n\t\t\tfunction onWriterReady(writer) {\r\n\t\t\t\twriter.onwriteend = function() {\r\n\t\t\t\t\tdefer.resolve();\r\n\t\t\t\t};\r\n\t\t\t\t// Seek to the endo of the file\r\n\t\t\t\twriter.seek(writer.length);\r\n\t\t\t\twriter.write(logString + '\\n');\r\n\t\t\t}\r\n\t\t\t// Function for when an IO action fails\r\n\t\t\tfunction fail(error) {\r\n\t\t\t\t$log.warn('Failed while trying to write to file, error: ' + error);\r\n\t\t\t\tdefer.reject(error);\r\n\t\t\t}\r\n\t\t\treturn defer.promise;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tclass LoggerServiceImpl{\r\n\r\n\t\tconstructor(name){\r\n\t\t\tthis.name = name;\r\n\t\t\tthis.levels = LEVELS;\r\n\t\t}\r\n\r\n\t\tdebug(message){\r\n\t\t\tif (this.isDEBUG()){\r\n\t\t\t\tvar logString = moment().format('YYYY-MM-DD HH:mm:ss') + ' ' + this.name + ' (DEBUG) : ' + message;\r\n\t\t\t\t/*eslint-disable*/\r\n\t\t\t\tlogToConsole && $log.log(logString);\r\n\t\t\t\tlogToFile && writeToFile(logString);\r\n\t\t\t\t/*eslint-enable*/\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twarn(message){\r\n\t\t\tif (this.isWARN()){\r\n\t\t\t\tvar logString = moment().format('YYYY-MM-DD HH:mm:ss') + ' ' + this.name + ' (WARN) : ' + message;\r\n\t\t\t\t/*eslint-disable*/\r\n\t\t\t\tlogToConsole && $log.warn(logString);\r\n\t\t\t\tlogToFile && writeToFile(logString);\r\n\t\t\t\t/*eslint-enable*/\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tinfo(message){\r\n\t\t\tif (this.isINFO()){\r\n\t\t\t\tvar logString = moment().format('YYYY-MM-DD HH:mm:ss') + ' ' + this.name + ' (INFO) : ' + message;\r\n\t\t\t\t/*eslint-disable*/\r\n\t\t\t\tlogToConsole && $log.info(logString);\r\n\t\t\t\tlogToFile && writeToFile(logString);\r\n\t\t\t\t/*eslint-enable*/\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\terror(message){\r\n\t\t\tif (this.isERROR()){\r\n\t\t\t\tvar logString = moment().format('YYYY-MM-DD HH:mm:ss') + ' ' + this.name + ' (ERROR) : ' + message;\r\n\t\t\t\t/*eslint-disable*/\r\n\t\t\t\tlogToConsole && $log.error(logString);\r\n\t\t\t\tlogToFile && writeToFile(logString);\r\n\t\t\t\t/*eslint-enable*/\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if ERROR level should be logged\r\n\t\t */\r\n\t\tisERROR(){\r\n\t\t\treturn logLevel <= LEVELS.ERROR;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if INFO should be logged\r\n\t\t */\r\n\t\tisINFO(){\r\n\t\t\treturn logLevel <= LEVELS.INFO;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if WARN should be logged\r\n\t\t */\r\n\t\tisWARN(){\r\n\t\t\treturn logLevel <= LEVELS.WARN;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if DEBUG should be logged\r\n\t\t */\r\n\t\tisDEBUG(){\r\n\t\t\treturn logLevel <= LEVELS.DEBUG;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar systemLogger = new LoggerServiceImpl('SYSTEM');\r\n\r\n\t// Replace console.log with system logger\r\n\t/*eslint-disable*/\r\n\twindow.console.log \t\t\t\t= function(message){systemLogger.debug(message);};\r\n\twindow.console.warn \t\t\t= function(message){systemLogger.warn(message);};\r\n\twindow.console.error\t\t\t= function(message){systemLogger.error(message);};\r\n\twindow.console.info\t\t\t\t= function(message){systemLogger.info(message);};\r\n\t/*eslint-enable*/\r\n\twindow.console.exception\t\t= window.console.log;\r\n\twindow.console.trace \t\t\t= window.console.log;\r\n\twindow.console.group \t\t\t= window.console.log;\r\n\twindow.console.groupCollapsed\t= window.console.log;\r\n\r\n\t//------------------------------------------------------------------------------\r\n\twindow.console.table = function(data) {\r\n\t\tconsole.log('%o', data);\r\n\t};\r\n\r\n\t// Initialise this service by rotating previous logs\r\n\tinitService();\r\n\treturn function(name){\r\n\t\tif (loggers[name] === undefined){\r\n\t\t\tloggers[name] = new LoggerServiceImpl(name);\r\n\t\t}\r\n\t\treturn loggers[name];\r\n\t};\r\n\r\n};\r\nLoggerService.$inject = ['$q', '$log', '$injector', 'SynthConfig'];\r\nexport default LoggerService;\r\n"
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "LoggerService",
    "memberof": "js/base/services/LoggerService.js",
    "longname": "js/base/services/LoggerService.js~LoggerService",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/services/LoggerService.js",
    "importStyle": "LoggerService",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/services/ModuleService.js",
    "memberof": null,
    "longname": "js/base/services/ModuleService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nimport {convertToObject} from '../Utilities';\r\nvar ModuleService = ($q, DataService, RegistrationService, LoggerService, _SF, $filter, safo, SynthError, SynthesisRESTClient) => {\r\n\tvar LOG = LoggerService('ModuleService');\r\n\r\n\r\n\t// Cache of module data\r\n\tvar moduleDataCache = {};\r\n\r\n\t// Return the factory\r\n\tclass ModuleServiceImpl {\r\n\r\n\t\t/**\r\n\t\t * Return the modules the user has linked with this application\r\n\t\t *\r\n\t\t * @returns an array of modules that are linked to the application\r\n\t\t * [\r\n\t\t *   {\r\n\t\t *\t\t\"id\": \"module1\",\r\n\t\t *\t\t\"name\": \"Course 1\",\r\n\t\t *\t\t\"description\": \"Course 1\",\r\n\t\t *\t\t\"createdDate\": \"20140627145828000\",\r\n\t\t *\t\t\"isRegistered\": true\r\n\t\t *\t},\r\n\t\t *\t{\r\n\t\t *\t\t\"id\": \"module2\",\r\n\t\t *\t\t\"name\": \"Course 2\",\r\n\t\t *\t\t\"description\": \"\",\r\n\t\t *\t\t\"createdDate\": \"20141128133105000\",\r\n\t\t *\t\t\"isRegistered\": true\r\n\t\t *\t}\r\n\t\t * ]\r\n\t\t */\r\n\t\tgetLinkedModules(){\r\n\t\t\treturn RegistrationService.getRegistration().then((registrationData) => {\r\n\t\t\t\tvar filteredModules = [];\r\n\t\t\t\tif(registrationData && registrationData.modules){\r\n\t\t\t\t\tvar modulesArray = $filter('object2Array')(registrationData.modules);\r\n\t\t\t\t\tfilteredModules = _.filter(modulesArray, 'registered', true);\r\n\t\t\t\t}\r\n\t\t\t\treturn filteredModules;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets all the currently known modules. This include ones that that use\r\n\t\t * is registered for or not\r\n\t\t */\r\n\t\tgetCurrentModules(){\r\n\t\t\treturn RegistrationService.getRegistration().then((registrationData) => {\r\n\t\t\t\tif(registrationData.modules){\r\n\t\t\t\t\treturn $filter('object2Array')(registrationData.modules);\r\n\t\t\t\t}\r\n\t\t\t\treturn [];\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns an array of modules that are newly available from the\r\n\t\t * Synthesis Server that we do not currently have knowledge of\r\n\t\t */\r\n\t\tgetNewModules(){\r\n\t\t\tvar availableModules;\r\n\t\t\tconst self = this;\r\n\r\n\t\t\tfunction getCurrentlyKnownModules(synthesisModules){\r\n\t\t\t\tavailableModules = synthesisModules;\r\n\t\t\t\treturn self.getCurrentModules();\r\n\t\t\t}\r\n\r\n\t\t\tfunction findNewArray(currentModules){\r\n\t\t\t\t// If we currently have no modules, all available morules are new\r\n\t\t\t\tif(currentModules.length === 0){\r\n\t\t\t\t\treturn $q.when(availableModules);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar newModules = [];\r\n\t\t\t\t_.forEach(availableModules, (availableModule) => {\r\n\t\t\t\t\t// look in our current array if we have such an item\r\n\t\t\t\t\tvar matchedModule = _.find(currentModules, 'id', availableModule.id);\r\n\r\n\t\t\t\t\t// If none matched, its a new matchedModule\r\n\t\t\t\t\tif(matchedModule == null){\r\n\t\t\t\t\t\tnewModules.push(availableModule);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn $q.when(newModules);\r\n\t\t\t}\r\n\t\t\treturn SynthesisRESTClient.getAllowedSites()\r\n\t\t\t\t.then(getCurrentlyKnownModules)\r\n\t\t\t\t.then(findNewArray);\r\n\t\t}\r\n\r\n\t\thasNewModules(){\r\n\t\t\treturn this.getNewModules()\r\n\t\t\t\t.then((newModules) => {\r\n\t\t\t\t\treturn newModules.length > 0;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Sets a property on the specified module\r\n\t\t */\r\n\t\tsetModuleProperty(moduleId, property, value){\r\n\t\t\tvar mergeData = { 'modules' : {}};\r\n\t\t\tmergeData.modules[moduleId] = {};\r\n\t\t\tmergeData.modules[moduleId][property] = value;\r\n\t\t\treturn RegistrationService.mergeRegistration(mergeData);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the modules that are available that we know of, and what\r\n\t\t * the Syntehsis Server has to offer\r\n\t\t *\r\n\t\t * @returns a array of modules that are linked to the application\r\n\t\t * [{\r\n\t\t *\t\t\"id\": \"module1\",\r\n\t\t *\t\t\"name\": \"Course 1\",\r\n\t\t *\t\t\"description\": \"Course 1\",\r\n\t\t *\t\t\"createdDate\": \"20140627145828000\",\r\n\t\t *\t\t\"isRegistered\": true\r\n\t\t *\t},{\r\n\t\t *\t\t\"id\": \"module2\",\r\n\t\t *\t\t\"name\": \"Course 2\",\r\n\t\t *\t\t\"description\": \"\",\r\n\t\t *\t\t\"createdDate\": \"20141128133105000\",\r\n\t\t *\t\t\"isRegistered\": false | undefined\r\n\t\t *\t}\r\n\t\t *]\r\n\r\n\t\t'getAvailableModules' : function(){\r\n\t\t\tvar service = this;\r\n\t\t\t// Calculate what the new map should look like\r\n\t\t\tfunction calculateNewMap(newModules){\r\n\t\t\t\treturn service.getLinkedModules().then((currentModulesArray) => {\r\n\t\t\t\t\t// If there are no new modules, we can return what we currently have\r\n\t\t\t\t\tif(newModules.length == 0){\r\n\t\t\t\t\t\treturn currentModulesArray;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Else we need to merge the new modules\r\n\r\n\t\t\t\t\tvar mergeMap = { modules : {}};\r\n\r\n\t\t\t\t\t_.forEach(newModules, (newModule) => {\r\n\t\t\t\t\t\t// look in our current array if we have such an item\r\n\t\t\t\t\t\tvar matchedModule = _.find(currentModulesArray, 'id', newModule.id);\r\n\t\t\t\t\t\tif(matchedModule == null){\r\n\t\t\t\t\t\t\tmergeMap.modules[newModule.id] = newModule;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\treturn mergeNewModules(mergeMap);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Merge the new modules that we calculated to the registration data\r\n\t\t\tfunction mergeNewModules(newMergeData){\r\n\t\t\t\treturn RegistrationService.mergeRegistration(newMergeData).then((registrationData) => {\r\n\t\t\t\t\treturn $filter('object2Array')(registrationData.modules);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn this.getNewModules().then(calculateNewMap);\r\n\t\t},\r\n \t*/\r\n\r\n\t\t/**\r\n\t\t * Gets all the tools of linked modules. This data return will be in a similar format as:\r\n\t\t * [{\r\n\t\t *\t\t'id': 'trailrunning',\r\n\t\t *\t\t'name': 'Trailrunning 201',\r\n\t\t *\t\t'description': '',\r\n\t\t *\t\t'createdDate': '20141128133105000',\r\n\t\t *\t\t'tools :\r\n\t\t *\t\t\t[{\r\n\t\t *\t\t\t\t'defaultPage': '#tool/faq',\r\n\t\t *\t\t\t\t'name': 'faq',\r\n\t\t *\t\t\t\t'label': 'FAQs',\r\n\t\t *\t\t\t\t'heading': 'FAQs',\r\n\t\t *\t\t\t\t'icon': 'icon-sakai-help',\r\n\t\t *\t\t\t\t'description': '',\r\n\t\t *\t\t\t\t'menu': false,\r\n\t\t *\t\t\t\t'seq': 40\r\n\t\t *\t\t\t},\r\n\t\t *\t\t\t{\r\n\t\t *\t\t\t\t'defaultPage': '#tool/forums',\r\n\t\t *\t\t\t\t'name': 'forums',\r\n\t\t *\t\t\t\t'label': 'Discussions',\r\n\t\t *\t\t\t\t'heading': 'Discussions',\r\n\t\t *\t\t\t\t'icon': 'icon-sakai-forums',\r\n\t\t *\t\t\t\t'description': '',\r\n\t\t *\t\t\t\t'menu': false,\r\n\t\t *\t\t\t\t'seq': 60\r\n\t\t *\t\t\t}]\r\n\t\t\t* }]\r\n\t\t */\r\n\t\tgetAllHomeToolsSorted(){\r\n\t\t\tconst self = this;\r\n\r\n\t\t\tfunction getLoopModulesPromise(availableModules){\r\n\t\t\t\tlet promise = $q.when();\r\n\t\t\t\tlet moduleTools = [];\r\n\t\t\t\tangular.forEach(availableModules, function(module){\r\n\t\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\t\treturn self.getModuleHomeToolsSorted(module.id)\r\n\t\t\t\t\t\t\t.then((tools) => {\r\n\t\t\t\t\t\t\t\tmoduleTools.push(module);\r\n\t\t\t\t\t\t\t\tmoduleTools[moduleTools.length - 1].tools = tools;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn promise.then(() => {\r\n\t\t\t\t\treturn moduleTools;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn this.getLinkedModules().then(getLoopModulesPromise);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Creates the default module.json file for the module\r\n\t\t */\r\n\t\tcreateDefaultModuleFile(moduleId){\r\n\t\t\treturn DataService.copyFromWebToFile('base/data/module.json', 'data', `${moduleId}.json`);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets the data for the specified module ID\r\n\t\t */\r\n\t\tgetModuleData(moduleId){\r\n\t\t\tif(moduleDataCache[moduleId] != null){\r\n\t\t\t\treturn $q.when(moduleDataCache[moduleId]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn DataService.getDataFile(`${moduleId}.json`).then((moduleData) => {\r\n\t\t\t\t\tmoduleDataCache[moduleId] = moduleData;\r\n\t\t\t\t\treturn moduleData;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return the proper display name for a module\r\n\t\t */\r\n\t\tgetModuleName(moduleId){\r\n\t\t\treturn this.getLinkedModules().then((registrationData) => {\r\n\t\t\t\tvar theModule = _.find(registrationData, { 'id' : moduleId});\r\n\t\t\t\treturn theModule ? theModule.name : null;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return the proper display name for a module's tool\r\n\t\t */\r\n\t\tgetToolName(moduleId, toolId){\r\n\t\t\treturn this.getModuleData(moduleId).then((moduleData) => {\r\n\t\t\t\t// First check if we have such a field\r\n\t\t\t\tif(moduleData && moduleData.toolDescriptions && moduleData.toolDescriptions[toolId]){\r\n\t\t\t\t\treturn moduleData.toolDescriptions[toolId].heading;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Get the home tools for a module\r\n\t\t */\r\n\t\tgetModuleHomeTools(moduleId){\r\n\t\t\treturn this.getModuleData(moduleId)\r\n\t\t\t\t.then((moduleData) => {\r\n\t\t\t\t\tvar tools = moduleData.toolDescriptions;\r\n\t\t\t\t\tvar availableTools = $filter('object2Array')(tools);\r\n\t\t\t\t\tavailableTools = $filter('filter')(availableTools, {menu : true});\r\n\t\t\t\t\tsafo(availableTools, 'moduleId', moduleId);\r\n\t\t\t\t\treturn availableTools;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Get the home tools for a module sorted\r\n\t\t */\r\n\t\tgetModuleHomeToolsSorted(moduleId){\r\n\t\t\treturn this.getModuleHomeTools(moduleId)\r\n\t\t\t\t.then(function(tools){\r\n\t\t\t\t\t// TODO implement user custom sorting\r\n\t\t\t\t\treturn $filter('orderBy')(tools, 'seq');\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Merge data to a module's data file.\r\n\t\t *\r\n\t\t * @param moduleId - ID of the module to merge too\r\n\t\t * @jsonData - Data to merge. Data can be a JSON string or a JSON object\r\n\t\t */\r\n\t\tmergeToModuleData(moduleId, jsonData){\r\n\t\t\treturn DataService.mergeDataFile(`${moduleId}.json`, jsonData).then((data) => {\r\n\t\t\t\tmoduleDataCache[moduleId] = data;\r\n\t\t\t\treturn data;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Gets the data for a tool\r\n\t\t * @param moduleId - ID of the module in which the tool is\r\n\t\t * @param toolname - Name of the tool to get data of\r\n\t\t * @param isUploadData - Indication if the data is the upload data (optional, default=false)\r\n\t\t */\r\n\t\tgetToolData(moduleId, toolname, isUploadData){\r\n\t\t\tLOG.debug('Getting data for tool : ' + moduleId + ' - ' + toolname);\r\n\t\t\tvar deferred = $q.defer();\r\n\t\t\tDataService.getToolDataFile(moduleId, toolname, isUploadData)\r\n\t\t\t\t.then(\r\n\t\t\t\t// Success\r\n\t\t\t\tfunction(fileEntry){\r\n\t\t\t\t\tDataService.getFileAsObject(fileEntry)\r\n\t\t\t\t\t\t.then(\r\n\t\t\t\t\t\t// Success\r\n\t\t\t\t\t\tfunction(object){\r\n\t\t\t\t\t\t\tdeferred.resolve(object);\r\n\t\t\t\t\t\t}, fail);\r\n\t\t\t\t}, fail);\r\n\r\n\t\t\tfunction fail(error){\r\n\t\t\t\tdeferred.reject(error);\r\n\t\t\t}\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets a merge of the downloaded and (still-to) upload data for a tool\r\n\t\t *\r\n\t\t * @param moduleId Module in which the tool is\r\n\t\t * @param toolname Name of the tool\r\n\t\t */\r\n\t\tgetMergedToolData(moduleId, toolname){\r\n\t\t\tvar toolData, toolUploadData;\r\n\t\t\tconst self = this;\r\n\t\t\tfunction getToolDataPromise(){\r\n\t\t\t\treturn self.getToolData(moduleId, toolname, true).then((data) => {\r\n\t\t\t\t\ttoolData = data;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfunction getToolUploadDataPromise(){\r\n\t\t\t\treturn self.getToolData(moduleId, toolname, false).then((data) => {\r\n\t\t\t\t\ttoolUploadData = data;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfunction getMergedDataPromise(){\r\n\t\t\t\tvar mergedData = angular.merge(toolData, toolUploadData);\r\n\t\t\t\treturn $q.when(mergedData);\r\n\t\t\t}\r\n\r\n\t\t\treturn getToolDataPromise()\r\n\t\t\t\t.then(getToolUploadDataPromise)\r\n\t\t\t\t.then(getMergedDataPromise);\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Merges data to a tool's data file.\r\n\t\t * This will typically by used when downloading sync'd content and merge it to a file\r\n\t\t *\r\n\t\t * @param moduleId - Module ID in which the tool is\r\n\t\t * @param toolname - Name of the tool to write data too\r\n\t\t * @param jsonData - Either a JSON String, or a JSON Object representing the data to write\r\n\t\t * @param isUploadData - Flag if the data should be merged to the upload data of the tool\r\n\t\t * @returns A promise with the data that was merged as the parameters\r\n\t\t */\r\n\t\tmergeToToolData(moduleId, toolname, jsonData, isUploadData){\r\n\t\t\tvar deferred = $q.defer();\r\n\t\t\tthis.getToolData(moduleId, toolname, isUploadData).then(\r\n\t\t\t\t// Success\r\n\t\t\t\tfunction(data){\r\n\t\t\t\t\tvar jsonObject = convertToObject(jsonData);\r\n\t\t\t\t\tvar writeObject = angular.merge(data, jsonObject);\r\n\t\t\t\t\t// Write the merged data to the file\r\n\t\t\t\t\tDataService.writeToolData(moduleId, toolname, writeObject, isUploadData).then(\r\n\t\t\t\t\t\t// Success\r\n\t\t\t\t\t\tfunction(){\r\n\t\t\t\t\t\t\tdeferred.resolve(writeObject);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t//Fail\r\n\t\t\t\t\t\tfunction (){\r\n\t\t\t\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn new ModuleServiceImpl();\r\n};\r\nModuleService.$inject = ['$q', 'DataService', 'RegistrationService', 'LoggerService', 'SynthFail', '$filter', 'safo', 'SynthError', 'SynthesisRESTClient'];\r\nexport default ModuleService;\r\n"
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ModuleService",
    "memberof": "js/base/services/ModuleService.js",
    "longname": "js/base/services/ModuleService.js~ModuleService",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/services/ModuleService.js",
    "importStyle": "ModuleService",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/services/PushService.js",
    "memberof": null,
    "longname": "js/base/services/PushService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nvar PushService = ($q, $http, LoggerService, DataService, ModuleService, RegistrationService, SynthError, UserSession, SynthConfig, CheckError, $window, SynthesisRESTClient) => {\r\n\r\n\tvar LOG = LoggerService('PushService');\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tclass PushServiceImpl{\r\n\r\n\t\tconstructor() {\r\n\t\t\tthis.deviceReady = false;\r\n\t\t\tthis.push = null;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Invoked from the Push Cordova plugin when a notification is received\r\n\t\t */\r\n\t\t_onNotificationReceived(data){\r\n\t\t\tSynthesisRESTClient.getPushMessage(data.additionalData.id).then((pushMessage) => {\r\n\t\t\t\t// A test message\r\n\t\t\t\tif(pushMessage.messageType === 1){\r\n\t\t\t\t\tnavigator.notification.confirm(pushMessage.message, angular.noop, pushMessage.title, ['Ok']);\r\n\t\t\t\t/**\r\n\t\t\t\t * If we are in the foreground and the message is an important one\r\n\t\t\t\t * we will interupt the user with a dialog\r\n\t\t\t\t */\r\n\t\t\t\t}\r\n\t\t\t\telse if(pushMessage.emergency === true || data.additionalData.foreground === false){\r\n\t\t\t\t\t// A tool update\r\n\t\t\t\t\tif(pushMessage.messageType === 2){\r\n\t\t\t\t\t\tvar buttons = ['Ok', 'Cancel'],\r\n\t\t\t\t\t\t\tcallback = (option) => {\r\n\t\t\t\t\t\t\t\tif(option == 1){\r\n\t\t\t\t\t\t\t\t\t$window.location = '#/sync';\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tnavigator.notification.confirm(pushMessage.message, callback, pushMessage.title, buttons);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Invoked from the Push Cordova plugin when the registration is received\r\n\t\t */\r\n\t\t_onRegistrationReceived(pushRegistration){\r\n\t\t\tLOG.debug('Registered! ' + pushRegistration.registrationId);\r\n\t\t\tvar data = {\r\n\t\t\t\t'device' : {\r\n\t\t\t\t\t'platform' : device.platform,\r\n\t\t\t\t\t'model' : device.model,\r\n\t\t\t\t\t'uuid' : device.uuid,\r\n\t\t\t\t\t'regId' : pushRegistration.registrationId\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treturn this._sendRequest('register', 'POST', data, true);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a promise that will be resolved when the cordova\r\n\t\t * thinks the device is ready and you can use the API\r\n\t\t */\r\n\t\tcordovaReady() {\r\n\t\t\tvar deferred = $q.defer();\r\n\t\t\tconst self = this;\r\n\t\t\tif (this.deviceReady === true) {\r\n\t\t\t\tdeferred.resolve();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdocument.addEventListener('deviceready', () => {\r\n\t\t\t\t\tself.deviceReady = true;\r\n\t\t\t\t\tdeferred.resolve();\r\n\t\t\t\t}, false);\r\n\t\t\t}\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t_sendRequest(url, method, requestData, appendAuthentication = false){\r\n\t\t\treturn SynthesisRESTClient._doRequest(`/service-push/${url}`, method, requestData, appendAuthentication)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tvar responseData = response.data;\r\n\t\t\t\t\t// Check if there is an error\r\n\t\t\t\t\tif (CheckError(null, responseData)){\r\n\t\t\t\t\t\treturn $q.reject(SynthError(responseData));\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn responseData;\r\n\t\t\t\t},\r\n\t\t\t\t() => {\r\n\t\t\t\t\treturn $q.reject(SynthError(1000));\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Register the device for push notifications.\r\n\t\t * If notifications are not enabled for this application, it will just return.\r\n\t\t * If the device is offline - ??\r\n\t\t * If the device is online, this method will request a registration token and send\r\n\t\t * it to the server.\r\n\t\t */\r\n\t\tregisterDevice() {\r\n\r\n\t\t\t// If push notifications are not enable we return\r\n\t\t\tif(!SynthConfig.pushEnabled){\r\n\t\t\t\treturn $q.when(true);\r\n\t\t\t}\r\n\t\t\treturn this.cordovaReady().then(() => {\r\n\t\t\t\tif(this.push == null){\r\n\t\t\t\t\tthis.push = PushNotification.init({ 'android' : {'senderID' : SynthConfig.androidSenderID, 'image' : 'icon'}, 'ios' : {}});\r\n\r\n\t\t\t\t\t// Registration to GCM/APNS is completed and we received a token\r\n\t\t\t\t\tthis.push.on('registration', (registrationData) => {\r\n\t\t\t\t\t\tthis._onRegistrationReceived(registrationData);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// A notification message is received\r\n\t\t\t\t\tthis.push.on('notification', (notificationData) => {\r\n\t\t\t\t\t\tthis._onNotificationReceived(notificationData);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Something went wrong\r\n\t\t\t\t\tthis.push.on('error', (e) => {\r\n\t\t\t\t\t\tLOG.error(`Error Registering for PushNotifications: ${e.message}`);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Get the current preferences saved locally\r\n\t\t * When we get the preferences we need to delete the onces from the Server\r\n\t\t * that are unknown to us\r\n\t\t * Object format:\r\n\t\t *  {\r\n\t\t *\t\t'moduleId1': {\r\n\t\t *\t\t    'announcements': false,\r\n\t\t *\t\t    'faq': false,\r\n\t\t *\t\t    'forums': false,\r\n\t\t *\t\t    'welcome': false,\r\n\t\t *\t\t    'schedule': false,\r\n\t\t *\t\t    'learning_units': false,\r\n\t\t *\t\t    'resources': false\r\n\t\t *\t\t  },\r\n\t\t *\t\t'moduleId1': {\r\n\t\t *\t\t    'announcements': false,\r\n\t\t *\t\t    'faq': false,\r\n\t\t *\t\t    'forums': false,\r\n\t\t *\t\t    'welcome': false,\r\n\t\t *\t\t    'schedule': false,\r\n\t\t *\t\t    'learning_units': false,\r\n\t\t *\t\t    'resources': false\r\n\t\t *\t\t  }\r\n\t\t *\t}\r\n\t\t * }\r\n\t\t */\r\n\t\tgetPushToolPreferences(){\r\n\t\t\t// The preferences we are working with\r\n\t\t\tvar preferences = {}, // What we are going to return\r\n\t\t\t\t// Preferences that we need to delete\r\n\t\t\t\t// This object will start off with all the preferences that are\r\n\t\t\t\t// on the server. As we detect known ones, it is removed from\r\n\t\t\t\t// the object. In the end this object will contain all the ones\r\n\t\t\t\t// we need to delete\r\n\t\t\t\tunkownPreferences;\r\n\t\t\tconst self = this;\r\n\t\t\tfunction getServerPreferences(){\r\n\t\t\t\treturn self._getToolPushPreferencesServer().then((sPreferences) => {\r\n\t\t\t\t\tunkownPreferences = sPreferences;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Get registered modules\r\n\t\t\tfunction getModules(){\r\n\t\t\t\treturn ModuleService.getLinkedModules().then((mdls) => {\r\n\t\t\t\t\treturn mdls;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Loop through each module\r\n\t\t\tfunction loopModules(modules){\r\n\t\t\t\tvar promise = $q.when();\r\n\t\t\t\tangular.forEach(modules, function(module){\r\n\t\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\t\treturn checkModulePreferences(module.id);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\treturn promise;\r\n\t\t\t}\r\n\r\n\t\t\t// Get tool preferences for module\r\n\t\t\tfunction checkModulePreferences(moduleId){\r\n\t\t\t\tpreferences[moduleId] = {};\r\n\r\n\t\t\t\treturn ModuleService.getModuleData(moduleId).then((moduleData) => {\r\n\t\t\t\t\t// Tool description object from module.json\r\n\t\t\t\t\tvar toolDescriptions = moduleData.toolDescriptions;\r\n\r\n\t\t\t\t\t// Get the preference for each tool\r\n\t\t\t\t\tfor (var toolId in toolDescriptions) {\r\n\t\t\t\t\t\tif (toolDescriptions.hasOwnProperty(toolId)) {\r\n\t\t\t\t\t\t\tvar tool = toolDescriptions[toolId];\r\n\r\n\t\t\t\t\t\t\t// Skip tools that are not displayed on the menu\r\n\t\t\t\t\t\t\tif(!tool.menu){\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(unkownPreferences[moduleId] && unkownPreferences[moduleId][toolId] !== undefined){\r\n\t\t\t\t\t\t\t\tpreferences[moduleId][toolId] = unkownPreferences[moduleId][toolId];\r\n\t\t\t\t\t\t\t\tdelete unkownPreferences[moduleId][toolId];\r\n\t\t\t\t\t\t\t\tif(Object.keys(unkownPreferences[moduleId]).length === 0){\r\n\t\t\t\t\t\t\t\t\tdelete unkownPreferences[moduleId];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// The preference will be null if it is a\r\n\t\t\t\t\t\t\t// preference not yet set on the server\r\n\t\t\t\t\t\t\tif(preferences[moduleId][toolId] == null){\r\n\t\t\t\t\t\t\t\tpreferences[moduleId][toolId] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t * Sends requests to the server to delete the unkown preferences\r\n\t\t\t*/\r\n\t\t\tfunction deleteUnknownPreferences(){\r\n\t\t\t\tif(Object.keys(unkownPreferences).length === 0){\r\n\t\t\t\t\treturn $q.when(true);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn self._sendRequest(`preferences/${device.uuid}`, 'DELETE', {toolPreferences : unkownPreferences}, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn getServerPreferences()\r\n\t\t\t\t.then(getModules)\r\n\t\t\t\t.then(loopModules)\r\n\t\t\t\t.then(deleteUnknownPreferences)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn preferences;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets the push preferences from the server\r\n\t\t */\r\n\t\t_getToolPushPreferencesServer(){\r\n\t\t\treturn this._sendRequest(`preferences/${device.uuid}`, 'GET')\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\treturn data.map.toolPreferences;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Update the push preferences for this devices.\r\n\t\t * It first attempts to update on the Synthesis Server\r\n\t\t * then persists locally\r\n\t\t *\r\n\t\t * Object format:\r\n\t\t * {\r\n\t\t * \t\t'moduleId' : {\r\n\t\t * \t\t\t'toolId' : true/false,\r\n\t\t * \t\t\t'toolId' : true/false,\r\n\t\t * \t\t\tetc ...\r\n\t\t * \t\t},\r\n\t\t *      etc ...\r\n\t\t *\r\n\t\t * }\r\n\t\t *\r\n\t\t */\r\n\t\tupdatePushPreferences(preferences) {\r\n\t\t\tvar sendData = {\r\n\t\t\t\t'toolPreferences' : preferences\r\n\t\t\t};\r\n\r\n\t\t\treturn this._sendRequest(`preferences/${device.uuid}`, 'POST', sendData, true)\r\n\t\t\t.then((data) => {\r\n\r\n\t\t\t\t// Check if there is an error\r\n\t\t\t\tif (CheckError(null, data)){\r\n\t\t\t\t\treturn $q.reject(SynthError(data));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data.map.toolPreferences;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t *\r\n\t\t */\r\n\t\tenablePushForModule(moduleId) {\r\n\t\t\treturn this.setPushPreferenceForModule(moduleId, true);\r\n\t\t}\r\n\r\n\t\tdisablePushForModule(moduleId) {\r\n\t\t\treturn this.setPushPreferenceForModule(moduleId, false);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Enable push notifications for a module\r\n\t\t */\r\n\t\tsetPushPreferenceForModule(moduleId, enabled) {\r\n\t\t\tconst self = this;\r\n\t\t\tfunction updateRegistrationDataPromise(){\r\n\t\t\t\t// Update in the settings\r\n\t\t\t\tvar mergeData = { 'modules' : {} };\r\n\t\t\t\tmergeData.modules[moduleId] = { 'pushEnabled' : true };\r\n\t\t\t\treturn RegistrationService.mergeRegistration(mergeData);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction updatePushSettingToServerPromise(){\r\n\t\t\t\tvar data = {\r\n\t\t\t\t\t'uuid' : device.uuid,\r\n\t\t\t\t\t'sender' : `module.${moduleId}`,\r\n\t\t\t\t\t'enabled' : enabled\r\n\t\t\t\t};\r\n\t\t\t\treturn self._sendRequest('preference', 'POST', data, true);\r\n\t\t\t}\r\n\r\n\t\t\t// Send request to the server\r\n\t\t\treturn updateRegistrationDataPromise()\r\n\t\t\t\t.then(updatePushSettingToServerPromise);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn new PushServiceImpl();\r\n};\r\nPushService.$inject = ['$q', '$http', 'LoggerService', 'DataService', 'ModuleService', 'RegistrationService', 'SynthError', 'UserSession', 'SynthConfig', 'SynthCheckResponseError', '$window', 'SynthesisRESTClient'];\r\nexport default PushService;\r\n"
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "PushService",
    "memberof": "js/base/services/PushService.js",
    "longname": "js/base/services/PushService.js~PushService",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/services/PushService.js",
    "importStyle": "PushService",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/services/RegistrationService.js",
    "memberof": null,
    "longname": "js/base/services/RegistrationService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nclass RegistrationService{\r\n\r\n\tconstructor($q, $rootScope, DataService){\r\n\t\tthis.$q = $q;\r\n\t\tthis.$rootScope = $rootScope;\r\n\t\tthis.dataService = DataService;\r\n\r\n\t\t/**\r\n\t\t * Cache of settings so that we don't have to read the file each time\r\n\t\t */\r\n\t\tthis.cachedRegistration = null;\r\n\r\n\t\t// Clear cache on event\r\n\t\t$rootScope.$on('app.clearAllCache', () => {\r\n\t\t\tthis.cachedRegistration = null;\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tmergeRegistration(registrationData){\r\n\t\treturn this.dataService.mergeToFile('', 'registration.json', registrationData)\r\n\t\t.then((newRegistrationData) => {\r\n\t\t\t// Update our cache with what is now the contents of the file\r\n\t\t\tthis.cachedRegistration = newRegistrationData;\r\n\r\n\t\t\t// Broadcast changes to the registration\r\n\t\t\tthis.$rootScope.$broadcast('registrationDataChanged', newRegistrationData);\r\n\t\t\treturn newRegistrationData;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* Read the settings from the file and update the cache\r\n\t*/\r\n\tgetRegistration(){\r\n\t\t// If we don't have cached settings, we get it from the file\r\n\t\tif(this.cachedRegistration == null){\r\n\t\t\treturn this.dataService.getFileData('', 'registration.json')\r\n\t\t\t.then((registration) => {\r\n\t\t\t\t// Broadcast changes to the registration\r\n\t\t\t\tif(registration != null){\r\n\t\t\t\t\t// Cache what we just read\r\n\t\t\t\t\tthis.cachedRegistration = registration;\r\n\t\t\t\t\tthis.$rootScope.$broadcast('registrationDataChanged', registration);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn registration;\r\n\t\t\t});\r\n\t\t// Else we use the cached settings\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn this.$q.when(this.cachedRegistration);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nvar RegistrationServiceFactory = function(){\r\n\treturn new RegistrationService(...arguments);\r\n};\r\nRegistrationServiceFactory.$inject = ['$q', '$rootScope', 'DataService'];\r\nexport default RegistrationServiceFactory;\r\n"
  },
  {
    "__docId__": 199,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "RegistrationService",
    "memberof": "js/base/services/RegistrationService.js",
    "longname": "js/base/services/RegistrationService.js~RegistrationService",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/services/RegistrationService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/services/RegistrationService.js~RegistrationService",
    "longname": "js/base/services/RegistrationService.js~RegistrationService#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "$q",
        "types": [
          "*"
        ]
      },
      {
        "name": "$rootScope",
        "types": [
          "*"
        ]
      },
      {
        "name": "DataService",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 201,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$q",
    "memberof": "js/base/services/RegistrationService.js~RegistrationService",
    "longname": "js/base/services/RegistrationService.js~RegistrationService#$q",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$rootScope",
    "memberof": "js/base/services/RegistrationService.js~RegistrationService",
    "longname": "js/base/services/RegistrationService.js~RegistrationService#$rootScope",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dataService",
    "memberof": "js/base/services/RegistrationService.js~RegistrationService",
    "longname": "js/base/services/RegistrationService.js~RegistrationService#dataService",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cachedRegistration",
    "memberof": "js/base/services/RegistrationService.js~RegistrationService",
    "longname": "js/base/services/RegistrationService.js~RegistrationService#cachedRegistration",
    "access": null,
    "description": "Cache of settings so that we don't have to read the file each time",
    "lineNumber": 13,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cachedRegistration",
    "memberof": "js/base/services/RegistrationService.js~RegistrationService",
    "longname": "js/base/services/RegistrationService.js~RegistrationService#cachedRegistration",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mergeRegistration",
    "memberof": "js/base/services/RegistrationService.js~RegistrationService",
    "longname": "js/base/services/RegistrationService.js~RegistrationService#mergeRegistration",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "registrationData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 207,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cachedRegistration",
    "memberof": "js/base/services/RegistrationService.js~RegistrationService",
    "longname": "js/base/services/RegistrationService.js~RegistrationService#cachedRegistration",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRegistration",
    "memberof": "js/base/services/RegistrationService.js~RegistrationService",
    "longname": "js/base/services/RegistrationService.js~RegistrationService#getRegistration",
    "access": null,
    "description": "Read the settings from the file and update the cache",
    "lineNumber": 37,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 209,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cachedRegistration",
    "memberof": "js/base/services/RegistrationService.js~RegistrationService",
    "longname": "js/base/services/RegistrationService.js~RegistrationService#cachedRegistration",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "RegistrationServiceFactory",
    "memberof": "js/base/services/RegistrationService.js",
    "longname": "js/base/services/RegistrationService.js~RegistrationServiceFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/services/RegistrationService.js",
    "importStyle": "RegistrationServiceFactory",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 211,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/services/SyncAPIService.js",
    "memberof": null,
    "longname": "js/base/services/SyncAPIService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n// TODO all the rest calls should move to SynthesisRESTClient\r\nvar SyncAPIService = ($q, $http, $filter, $rootScope, base64, DataService,\r\n\tLoggerService, SynthError, _SF, CheckError,\r\n\tSynthConfig, ModuleService, RegistrationService, SynthAttachmentMiner,\r\n\tSynthEmbeddedImageHandler, SynthDeleteHandler, SynthLinkHandler, SynthUploadResponseHandler) => {\r\n\r\n\tvar LOG = LoggerService('SyncAPIService');\r\n\r\n\r\n\tfunction mapTool(toolname){\r\n\t\t//LOG.debug('Getting mapped name for : ' + toolname + ' : ' + TOOLMAP[toolname] || toolname);\r\n\t\treturn SynthConfig.toolMapping[toolname] || toolname;\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tfunction SyncAPIServiceImpl(){\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Get the offline sync status for a specific tool\r\n\t * Resolves with an object:\r\n\t *\r\n\t * {\r\n\t\t\t'toolId' : 'resources',\r\n\t\t\t'moduleId' : 'biology',\r\n\t\t\t'contentUploadSize' : 1024,\r\n\t\t\t'contentDownloadSize' : 1024,\r\n\t\t\t'total' : 0,\r\n\t\t\t'inSync': false,\r\n\t\t\t'label': 'Announcement'\r\n\t\t}\r\n\t */\r\n\tSyncAPIServiceImpl.prototype.getSyncStatusToolOffline = function(moduleId, toolId){\r\n\t\tvar self = this,\r\n\t\t\tsyncStatus = {\r\n\t\t\t\t'toolId' : toolId,\r\n\t\t\t\t'moduleId' : moduleId,\r\n\t\t\t\t'contentUploadSize' : 0,\r\n\t\t\t\t'contentDownloadSize' : 0,\r\n\t\t\t\t'total' : 0,\r\n\t\t\t\t'inSync' : true,\r\n\t\t\t\t'label' : null\r\n\t\t\t};\r\n\r\n\t\treturn ModuleService.getModuleData(moduleId).then((moduleData) => {\r\n\t\t\tvar toolLocal = moduleData.toolsLocal[toolId];\r\n\t\t\tvar toolRemote = moduleData.tools[toolId];\r\n\t\t\tsyncStatus.label = moduleData.toolDescriptions[toolId].label;\r\n\r\n\t\t\t// If there is no remote entry for the tool, we don't know if its out of sync. Lets assume it's out\r\n\t\t\tif (toolRemote == null){\r\n\r\n\t\t\t\tsyncStatus.inSync = false;\r\n\t\t\t\tsyncStatus.contentDownloadSize = 0; // We actually don't know the size\r\n\t\t\t}\r\n\t\t\t// Check for content download\r\n\t\t\telse if(toolLocal.clientContentVersion !== toolRemote.currentContentVersion){\r\n\t\t\t\tsyncStatus.contentDownloadSize = toolRemote.contentSynchSize;\r\n\t\t\t\tsyncStatus.inSync = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Check for local change\r\n\t\t\treturn self.getToolUploadSize(moduleId, toolId).then((size) => {\r\n\t\t\t\tif(size !== 0){\r\n\t\t\t\t\tsyncStatus.contentUploadSize = size;\r\n\t\t\t\t\tsyncStatus.inSync = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Add up the totals for download and upload\r\n\t\t\t\tsyncStatus.total = syncStatus.contentDownloadSize + syncStatus.contentUploadSize;\r\n\r\n\t\t\t\treturn syncStatus;\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Get the offline sync status for a ALL modules without going online\r\n\t * Resolves with an object:\r\n\t *\r\n\t * {\r\n\t\t\t'inSync' : true,\r\n\t\t\t'contentDownloadSize': 0,\r\n\t\t\t'contentUploadSize': 0,\r\n\t\t\t'total': 0,\r\n\t\t\t'modules': {\r\n\t\t\t\t'biology' : {\r\n\t\t\t\t\t'inSync' : true,\r\n\t\t\t\t\t'contentDownloadSize': 0,\r\n\t\t\t\t\t'contentUploadSize': 0,\r\n\t\t\t\t\t'total': 0,\r\n\t\t\t\t\t'tools' : {\r\n\t\t\t\t\t\t'resources' : {\r\n\t\t\t\t\t\t\t'toolId' : 'resources',\r\n\t\t\t\t\t\t\t'moduleId' : 'biology',\r\n\t\t\t\t\t\t\t'contentDownloadSize' : 1024,\r\n\t\t\t\t\t\t\t'contentUploadSize' : 1024,\r\n\t\t\t\t\t\t\t'inSync': false,\r\n\t\t\t\t\t\t\t'label': 'Announcement'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t */\r\n\tSyncAPIServiceImpl.prototype.getSyncStatusModulesOffline = function(){\r\n\t\tvar self = this,\r\n\t\t\tsyncStatus = {\r\n\t\t\t\t'inSync' : true,\r\n\t\t\t\t'contentDownloadSize' : 0,\r\n\t\t\t\t'contentUploadSize' : 0,\r\n\t\t\t\t'total' : 0,\r\n\t\t\t\t'modules' : {}\r\n\t\t\t};\r\n\r\n\r\n\t\t/**\r\n\t\t * Returns a promise to loop through all the modules to get their sync status\r\n\t\t */\r\n\t\tfunction getLoopModulesPromise(linkedModules){\r\n\t\t\tlet promise = $q.when();\r\n\t\t\tangular.forEach(linkedModules, function(linkedModule){\r\n\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\treturn self.getSyncStatusModuleOffline(linkedModule.id)\r\n\t\t\t\t\t\t.then((moduleSyncStatus) => {\r\n\r\n\t\t\t\t\t\t\t// Add the module to the modules map\r\n\t\t\t\t\t\t\tsyncStatus.modules[linkedModule.id] = moduleSyncStatus;\r\n\r\n\t\t\t\t\t\t\t// Update the overall sync status to include the totals of the module\r\n\t\t\t\t\t\t\tsyncStatus.inSync &= moduleSyncStatus.inSync;\r\n\t\t\t\t\t\t\tsyncStatus.contentDownloadSize += moduleSyncStatus.contentDownloadSize;\r\n\t\t\t\t\t\t\tsyncStatus.contentUploadSize += moduleSyncStatus.contentUploadSize;\r\n\t\t\t\t\t\t\tsyncStatus.total += moduleSyncStatus.total;\r\n\t\t\t\t\t\t\treturn syncStatus;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\treturn promise.then(() => {\r\n\t\t\t\treturn syncStatus;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\treturn ModuleService.getLinkedModules()\r\n\t\t\t.then(getLoopModulesPromise);\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Get the offline sync status for a specific module without going online\r\n\t * Resolves with an object:\r\n\t *\r\n\t * {\r\n\t *\t\t'inSync' : true,\r\n\t\t\t'contentDownloadSize': 0,\r\n\t\t\t'contentUploadSize': 0,\r\n\t\t\t'total': 0,\r\n\t\t\t'moduleId' : 'biology',\r\n\t\t\t'tools' : {\r\n\t\t\t\t'resources' : {\r\n\t\t\t\t\t'toolId' : 'resources',\r\n\t\t\t\t\t'moduleId' : 'biology',\r\n\t\t\t\t\t'contentUploadSize' : 1024,\r\n\t\t\t\t\t'contentDownloadSize' : 1024,\r\n\t\t\t\t\t'isDownload' : true,\r\n\t\t\t\t\t'label': 'Announcement'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t */\r\n\tSyncAPIServiceImpl.prototype.getSyncStatusModuleOffline = function(moduleId){\r\n\t\tvar self = this;\r\n\t\t// The response object that will be sent to the caller of this function\r\n\t\tvar syncStatus = {\r\n\t\t\t'inSync' : true,\r\n\t\t\t'download' : 0,\r\n\t\t\t'upload' : 0,\r\n\t\t\t'total' : 0,\r\n\t\t\t'moduleId' : moduleId,\r\n\t\t\t'tools' : {}\r\n\t\t};\r\n\r\n\r\n\t\tvar funcUpdateTool = function(toolId){\r\n\t\t\treturn self.getSyncStatusToolOffline(moduleId, toolId).then((toolSyncStatus) => {\r\n\t\t\t\t// Add the tool's sync status to the module's map of tools\r\n\t\t\t\tsyncStatus.tools[toolId] = toolSyncStatus;\r\n\r\n\t\t\t\t// Update the module sync status to include the totals of the tools\r\n\t\t\t\tsyncStatus.inSync &= toolSyncStatus.inSync;\r\n\t\t\t\tsyncStatus.download += toolSyncStatus.download;\r\n\t\t\t\tsyncStatus.upload += toolSyncStatus.upload;\r\n\t\t\t\tsyncStatus.total += toolSyncStatus.total;\r\n\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\treturn ModuleService.getModuleData(moduleId).then((moduleData) => {\r\n\t\t\t// If we don't have tool we must be out of sync\r\n\t\t\tif(moduleData == null || moduleData.tools == null){\r\n\t\t\t\tsyncStatus.inSync = false;\r\n\t\t\t\treturn syncStatus; // Resolve with this sync status\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlet toolsArray = $filter('object2Array')(moduleData.toolsLocal);\r\n\t\t\t\tlet promise = $q.when();\r\n\t\t\t\tangular.forEach(toolsArray, function(tool){\r\n\t\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\t\treturn funcUpdateTool(tool.key);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Else return another promise\r\n\t\t\t\treturn promise.then(function(){\r\n\t\t\t\t\treturn syncStatus;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get the module upload size and save it to module.json\r\n\t */\r\n\tSyncAPIServiceImpl.prototype.getToolUploadSize = function(moduleId, toolId){\r\n\r\n\t\t// Get promise to merge tool upload size to module.json\r\n\t\tfunction getMergeModuleDataPromise(size){\r\n\t\t\t// We also need to update our local file about the possible change of upload content\r\n\t\t\tvar mergeData = { 'toolsLocal' : {} };\r\n\t\t\tmergeData.toolsLocal[toolId] = {\r\n\t\t\t\t'localChange' : (size !== 0),\r\n\t\t\t\t'localChangeSize' : size\r\n\t\t\t};\r\n\t\t\treturn ModuleService\r\n\t\t\t\t.mergeToModuleData(moduleId, mergeData)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn size;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn DataService\r\n\t\t\t.getToolUploadDataSize(moduleId, toolId)\r\n\t\t\t.then(getMergeModuleDataPromise);\r\n\t};\r\n\r\n\t/**\r\n\t * Update the sync status\r\n\t */\r\n\tSyncAPIServiceImpl.prototype.getSyncStatus = function(moduleId){\r\n\r\n\t\t// The response object that will be sent to the caller of this function\r\n\t\tvar syncStatus = {\r\n\t\t\t'inSync' : true,\r\n\t\t\t'tools' : {}\r\n\t\t};\r\n\r\n\t\tif(moduleId == null){\r\n\t\t\treturn $q.when(syncStatus);\r\n\t\t}\r\n\t\tvar moduleData = null, registration, self = this;\r\n\r\n\t\tfunction getRegistrationData(){\r\n\t\t\treturn RegistrationService.getRegistration()\r\n\t\t\t\t.then((registrationData) => {\r\n\t\t\t\t\tregistration = registrationData;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Returns a promise to get the module data\r\n\t\tfunction getModuleDataPromise(){\r\n\t\t\treturn ModuleService\r\n\t\t\t\t.getModuleData(moduleId)\r\n\t\t\t\t.then((mData) => {\r\n\t\t\t\t\tmoduleData = mData;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Returns a promise to get the sync status from the remote server\r\n\t\tfunction getRequestSyncStatusPromise(){\r\n\t\t\tvar deferred = $q.defer();\r\n\t\t\t// Data that will be sent with the sync status request\r\n\t\t\tvar reqData = {\r\n\t\t\t\t'tools' : {}\r\n\t\t\t};\r\n\t\t\t// Map mobile app tools to remote server tool names and add current versions\r\n\t\t\tfor(var key in moduleData.toolsLocal){\r\n\t\t\t\tvar mappedKey = mapTool(key);\r\n\t\t\t\treqData.tools[mappedKey] = {\r\n\t\t\t\t\t'clientCodeVersion' : moduleData.toolsLocal[key].clientCodeVersion,\r\n\t\t\t\t\t'clientContentVersion' : moduleData.toolsLocal[key].clientContentVersion\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// Request changes from remote server\r\n\t\t\tvar restURL = SynthConfig.baseURL + '/service-synch/synchStatus/' + registration.username + '/' + moduleId;\r\n\t\t\tLOG.debug('Getting sync status calling REST URL : ' + restURL);\r\n\t\t\t$http({\r\n\t\t\t\tmethod : 'POST',\r\n\t\t\t\turl : restURL,\r\n\t\t\t\tdata : reqData})\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\t// Check if there is an error\r\n\t\t\t\t\tif (CheckError(deferred, response.data)){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdeferred.resolve(response.data.tools);\r\n\t\t\t\t}, () => {\r\n\t\t\t\t\tdeferred.reject(SynthError(1000));\r\n\t\t\t\t});\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\t// Returns a promise to write the response data to the module.json file\r\n\t\tfunction getWriteDownloadResponsePromise(responseTools){\r\n\t\t\tvar fileData = { 'tools' : {}};\r\n\t\t\t// Map service tools to local tool names\r\n\t\t\tfor(var remoteKey in responseTools){\r\n\t\t\t\tvar localKey = mapTool(remoteKey);\r\n\r\n\t\t\t\t// Only if the tool is in our list of active tool\r\n\t\t\t\tif(moduleData.toolDescriptions[localKey] != null){\r\n\r\n\t\t\t\t\t// Data to write to file\r\n\t\t\t\t\tfileData.tools[localKey] = {\r\n\t\t\t\t\t\t'clientContentVersion' : responseTools[remoteKey].clientContentVersion,\r\n\t\t\t\t\t\t'currentContentVersion' : (responseTools[remoteKey].currentContentVersion === 'No Content' ? '0' : responseTools[remoteKey].currentContentVersion),\r\n\t\t\t\t\t\t'contentSynchSize' : responseTools[remoteKey].contentSynchSize\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Data to send back caller of this function\r\n\t\t\t\t\tsyncStatus.tools[localKey] = {\r\n\t\t\t\t\t\t'label' : moduleData.toolDescriptions[localKey].label,\r\n\t\t\t\t\t\t'contentDownloadSize' : responseTools[remoteKey].contentSynchSize,\r\n\t\t\t\t\t\t'contentUploadSize' : 0,\r\n\t\t\t\t\t\t'inSync' : (responseTools[remoteKey].contentSynchSize === 0) // Ignoring code sync for mobile\r\n\t\t\t\t\t};\r\n\t\t\t\t\tsyncStatus.download = ((syncStatus.download ? syncStatus.download : 0) + responseTools[remoteKey].contentSynchSize);// Ignoring code sync for mobile\r\n\t\t\t\t\t// If any tool has downloads, we are overall out of sync\r\n\t\t\t\t\tif (!syncStatus.tools[localKey].inSync){\r\n\t\t\t\t\t\tsyncStatus.inSync = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ModuleService.mergeToModuleData(moduleId, fileData);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets a promise to check the upload size for all tools\r\n\t\t */\r\n\t\tfunction getUploadSizePromise(){\r\n\t\t\tvar promise = $q.when();\r\n\t\t\tvar toolsArray = null;\r\n\t\t\t// Create the array if we don't have it\r\n\t\t\tif(toolsArray == null){\r\n\t\t\t\ttoolsArray = $filter('object2Array')(syncStatus.tools);\r\n\t\t\t}\r\n\r\n\t\t\tangular.forEach(toolsArray, function(tool){\r\n\t\t\t\tlet toolId = tool.key;\r\n\t\t\t\tsyncStatus.tools[toolId] = syncStatus.tools[toolId] || {\r\n\t\t\t\t\t'codeDownloadSize' : 0,\r\n\t\t\t\t\t'contentDownloadSize' : 0,\r\n\t\t\t\t\t'contentUploadSize' : 0,\r\n\t\t\t\t\t'inSync' : true\r\n\t\t\t\t};\r\n\t\t\t\tsyncStatus.tools[toolId].label = moduleData.toolDescriptions[toolId].label;\r\n\r\n\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\treturn self.getToolUploadSize(moduleId, toolId).then((size) => {\r\n\t\t\t\t\t\tsyncStatus.tools[toolId].contentUploadSize = size;\r\n\t\t\t\t\t\tsyncStatus.tools[toolId].inSync = (syncStatus.tools[toolId].inSync && (size === 0));\r\n\t\t\t\t\t\tsyncStatus.upload = ((syncStatus.upload ? syncStatus.upload : 0) + size);\r\n\t\t\t\t\t\tsyncStatus.inSync = (syncStatus.inSync && syncStatus.tools[toolId].inSync);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn promise;\r\n\t\t}\r\n\r\n\r\n\t\treturn getRegistrationData()\r\n\t\t\t// Get the module data\r\n\t\t\t.then(getModuleDataPromise)\r\n\t\t\t// Get sync status from remote server\r\n\t\t\t.then(getRequestSyncStatusPromise)\r\n\t\t\t// Write the response to the module file\r\n\t\t\t.then(getWriteDownloadResponsePromise)\r\n\t\t\t// Get the upload size\r\n\t\t\t.then(getUploadSizePromise)\r\n\t\t\t.then(() => {\r\n\t\t\t\tsyncStatus.total = ((syncStatus.download ? syncStatus.download : 0) + (syncStatus.upload ? syncStatus.upload : 0));\r\n\t\t\t\treturn syncStatus; // Finally we are done!\r\n\t\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Updates a specific tool\r\n\t */\r\n\tSyncAPIServiceImpl.prototype.syncDownloadTool = function(moduleId, toolname){\r\n\t\tvar moduleData = null,\r\n\t\t\tself = this,\r\n\t\t\ttoolSyncResponse = {},\r\n\t\t\ttoolDataObject = {}, // The data synced for this tool\r\n\t\t\ttoolAttachments = [], // Attachments that has to be downloaded\r\n\t\t\tregistration = null;\r\n\r\n\t\t$rootScope.$broadcast('syncStatusChanged', {'action' : 'downloading'});\r\n\r\n\t\tfunction getRegistrationData(){\r\n\t\t\treturn RegistrationService.getRegistration()\r\n\t\t\t\t.then((registrationData) => {\r\n\t\t\t\t\tregistration = registrationData;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Returns a promise to get the module data\r\n\t\tfunction getModuleDataPromise(){\r\n\t\t\treturn ModuleService\r\n\t\t\t\t.getModuleData(moduleId)\r\n\t\t\t\t.then((mData) => {\r\n\t\t\t\t\tmoduleData = mData;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * When we update client base, we need to make sure that we only\r\n\t\t * include the tools that was configured to be enabled on the mobile application\r\n\t\t */\r\n\t\tfunction filterBaseTools(toolList){\r\n\t\t\tvar filteredData = {'toolDescriptions' : {} };\r\n\t\t\tvar toolDescriptions = toolList == null ? {} : toolList.toolDescriptions;\r\n\t\t\tfor(var serverToolId in toolDescriptions){\r\n\t\t\t\tvar localToolId = mapTool(serverToolId);\r\n\t\t\t\t/*\r\n\t\t\t\t * Only if the current module data contains a tool description, should the\r\n\t\t\t\t * tool be included in the updated data.\r\n\t\t\t\t */\r\n\t\t\t\tif(moduleData.toolDescriptions[localToolId] !== undefined){\r\n\t\t\t\t\tfilteredData.toolDescriptions[localToolId] = toolDescriptions[serverToolId];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn filteredData;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Returns a promise to get the tool's data\r\n\t\t */\r\n\t\tfunction getToolDataPromise(){\r\n\t\t\tvar deferredData = $q.defer();\r\n\t\t\tvar toolVersion = moduleData.toolsLocal[toolname].clientContentVersion;\r\n\t\t\tvar _toolname = mapTool(toolname);\r\n\t\t\tvar restURL = `${SynthConfig.baseURL}/service-synch/contentUpdateString/${registration.username}/${moduleId}/${_toolname}/${toolVersion}`;\r\n\r\n\t\t\t$http({\r\n\t\t\t\tmethod : 'POST',\r\n\t\t\t\turl : restURL,\r\n\t\t\t\tdata : {'authToken' : registration.authToken}})\r\n\t\t\t\t.success((data) => {\r\n\t\t\t\t\t// Check if there is an error\r\n\t\t\t\t\tif (CheckError(deferredData, data)){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttoolSyncResponse = data;\r\n\t\t\t\t\tdeferredData.resolve(data);\r\n\t\t\t\t})\r\n\t\t\t\t.error(() => {\r\n\t\t\t\t\tdeferredData.reject(SynthError(1000));\r\n\t\t\t\t});\r\n\t\t\treturn deferredData.promise;\r\n\t\t}\r\n\r\n\r\n\t\t/*\r\n\t\t * When we get data from the server it is in base 64,\r\n\t\t * this function will convert it to json format string\r\n\t\t */\r\n\t\tfunction getConvertFromBase64Promise (base64Data){\r\n\t\t\ttry{\r\n\t\t\t\ttoolDataObject = base64.decode(base64Data.content);\r\n\t\t\t\tLOG.debug(`Got data for tool ${toolname}\\n${toolDataObject}`);\r\n\t\t\t\ttoolDataObject = JSON.parse(toolDataObject);\r\n\t\t\t\t$q.when(toolDataObject);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t$q.reject(SynthError(1000));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Replace the inline images with links to the downloaded content\r\n\t\t * This function will use the registered SynthEmbeddedImageHandler for the tool if\r\n\t\t * there was on registered\r\n\t\t */\r\n\t\tfunction getFixImagesPromise(){\r\n\t\t\tvar imageHandler = SynthEmbeddedImageHandler.getHandler(toolname);\r\n\t\t\tif (imageHandler){\r\n\t\t\t\treturn imageHandler(toolDataObject);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn $q.when([]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Replace all the embedded links with links that will open externally\r\n\t\t */\r\n\t\tfunction getFixLinksPromise(){\r\n\t\t\tvar linkHandler = SynthLinkHandler.getHandler(toolname);\r\n\t\t\tif (linkHandler){\r\n\t\t\t\treturn linkHandler(toolDataObject).then((fixedContent)=>{\r\n\t\t\t\t\ttoolDataObject = fixedContent;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn $q.when([]);\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Mine for attachments in the tool data\r\n\t\t */\r\n\t\tfunction getMineAttachementsPromise(){\r\n\t\t\tvar attachmentHandler = SynthAttachmentMiner.getHandler(toolname);\r\n\t\t\tif (attachmentHandler){\r\n\t\t\t\treturn attachmentHandler(toolDataObject).then((attachments) => {\r\n\t\t\t\t\ttoolAttachments = attachments;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn $.when([]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t/*\r\n\t\t * Merge the tool data to the tool's data file\r\n\t\t */\r\n\t\tfunction getMergeToolDataPromise(){\r\n\t\t\tif(toolname == 'base'){\r\n\t\t\t\ttoolDataObject = filterBaseTools(toolDataObject);\r\n\t\t\t\treturn ModuleService.mergeToModuleData(moduleId, toolDataObject);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn ModuleService.mergeToToolData(moduleId, toolname, toolDataObject);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t/*\r\n\t\t * Download the attachments\r\n\t\t */\r\n\t\tfunction getDownloadAttachmentsPromise(){\r\n\t\t\treturn self.getAttachementsFromServer(toolAttachments);\r\n\t\t}\r\n\t\t/*\r\n\t\t * Update the tool version\r\n\t\t */\r\n\t\tfunction getUpdateToolVersionPromise(){\r\n\t\t\tvar versionData = {\r\n\t\t\t\t'toolsLocal' : {},\r\n\t\t\t\t'tools' : {}\r\n\t\t\t};\r\n\t\t\tversionData.toolsLocal[toolname] = { 'clientContentVersion' : toolSyncResponse.version };\r\n\t\t\tversionData.tools[toolname] = {\r\n\t\t\t\t'currentContentVersion' : toolSyncResponse.version,\r\n\t\t\t\t'clientContentVersion' : toolSyncResponse.version,\r\n\t\t\t\t'contentSynchSize' : 0\r\n\t\t\t};\r\n\t\t\treturn ModuleService.mergeToModuleData(moduleId, versionData);\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Returns a promise to delete all the content (including actual files)\r\n\t\t */\r\n\t\tfunction getCheckDeletedContentPromise(toolData){\r\n\t\t\t// Get the handler if there was one\r\n\t\t\tvar deleteHandler = SynthDeleteHandler.getHandler(toolname);\r\n\t\t\tvar handlerData;\t\t// Data that the handler returned after processing\r\n\t\t\tif (deleteHandler){\r\n\t\t\t\treturn deleteHandler(toolData)\r\n\t\t\t\t\t.then((hData) => {\r\n\t\t\t\t\t\thandlerData = hData;\r\n\t\t\t\t\t\treturn DataService.deleteCDVFiles(handlerData.deleted);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t// Now save the new data that the handler processed\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\treturn DataService.writeToolData(moduleId, toolname, handlerData.data, false);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn $.when([]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction fail(error){\r\n\t\t\t$rootScope.$broadcast('syncStatusChanged', {'action' : 'none'});\r\n\t\t\treturn $q.reject(error);\r\n\t\t}\r\n\r\n\r\n\t\t// Lets start the sync process\r\n\t\treturn getRegistrationData()\r\n\t\t\t.then(getModuleDataPromise)\r\n\t\t\t.then(getToolDataPromise)\r\n\t\t\t.then(getConvertFromBase64Promise)\r\n\t\t\t.then(getMineAttachementsPromise)\r\n\t\t\t.then(getDownloadAttachmentsPromise)\r\n\t\t\t.then(getFixImagesPromise)\r\n\t\t\t.then(getFixLinksPromise)\r\n\t\t\t.then(getMergeToolDataPromise)\r\n\t\t\t.then(getCheckDeletedContentPromise)\r\n\t\t\t.then(getUpdateToolVersionPromise)\r\n\t\t\t.then(() => {\r\n\t\t\t\t$rootScope.$broadcast('syncStatusChanged', {'action' : 'none'});\r\n\t\t\t}, fail);\r\n\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Updates a specific tool\r\n\t */\r\n\tSyncAPIServiceImpl.prototype.syncUploadTool = function(moduleId, toolname){\r\n\t\tvar toolUploadRequest = {}, // Data to upload for the tool\r\n\t\t\ttoolUploadResponse = {}, // Response for the upload\r\n\t\t\tregistrationData = {};\r\n\r\n\t\t// Broadcast that we are busy uploading\r\n\t\t$rootScope.$broadcast('syncStatusChanged', {'action' : 'uploading'});\r\n\t\t/*\r\n\t\t * Get the registration data for the user to get\r\n\t\t * the device ID and username\r\n\t\t */\r\n\t\tvar funcGetRegistrationData = function(){\r\n\t\t\t\treturn RegistrationService.getRegistration()\r\n\t\t\t\t\t.then((data) => {\r\n\t\t\t\t\t\tregistrationData = data;\r\n\t\t\t\t\t});\r\n\t\t\t},\r\n\t\t/*\r\n\t\t * Get the data for the tool that should get uploaded\r\n\t\t */\r\n\t\t\tfuncGetToolUploadData = function(){\r\n\t\t\t\treturn DataService\r\n\t\t\t\t\t.getToolData(moduleId, toolname, true)\r\n\t\t\t\t\t.then((uploadData) => {\r\n\t\t\t\t\t\ttoolUploadRequest = uploadData;\r\n\t\t\t\t\t});\r\n\t\t\t},\r\n\t\t/*\r\n\t\t * Upload the data to the SynthEngine\r\n\t\t */\r\n\t\t\tfuncUploadToolData = function(){\r\n\t\t\t\tvar uploadDeferred = $q.defer();\r\n\t\t\t\tvar restURL = SynthConfig.baseURL + '/service-synch/content/' + registrationData.username + '/' + moduleId + '/' + mapTool(toolname);\r\n\t\t\t\t$http({\r\n\t\t\t\t\t'method' : 'PUT',\r\n\t\t\t\t\t'url' : restURL,\r\n\t\t\t\t\t'data' : {'authToken' : registrationData.authToken, 'content' : toolUploadRequest}\r\n\t\t\t\t})\r\n\t\t\t\t\t.success((responseData) => {\r\n\t\t\t\t\t\t// Check if there is an error\r\n\t\t\t\t\t\tif (CheckError(uploadDeferred, responseData)){\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttoolUploadResponse = responseData.responseContent;\r\n\t\t\t\t\t\tuploadDeferred.resolve(toolUploadResponse);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.error(() => {\r\n\t\t\t\t\t\tuploadDeferred.reject(SynthError(1000));\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\treturn uploadDeferred.promise;\r\n\t\t\t},\r\n\t\t/*\r\n\t\t * Delete the file containing the upload data.\r\n\t\t */\r\n\t\t\tfuncDeleteToolUploadData = function(){\r\n\t\t\t\treturn DataService.deleteToolUploadData(moduleId, toolname);\r\n\t\t\t},\r\n\t\t/*\r\n\t\t * Merge the data we uploaded with our current data file for the tool.\r\n\t\t * If there is a handler that needs work with the upload data and the\r\n\t\t * upload response, we will use that before merging the data\r\n\t\t */\r\n\t\t\tfuncMergeToolData = function(){\r\n\t\t\t\t// Check if there is an upload handler and use it\r\n\t\t\t\tvar uploadResponseHandler = SynthUploadResponseHandler.getHandler(toolname);\r\n\t\t\t\tif(uploadResponseHandler){\r\n\t\t\t\t\ttoolUploadRequest = uploadResponseHandler(toolUploadRequest, toolUploadResponse);\r\n\t\t\t\t}\r\n\t\t\t\treturn ModuleService.mergeToToolData(moduleId, toolname, toolUploadRequest, false);\r\n\t\t\t};\r\n\r\n\t\tfunction fail(error){\r\n\t\t\t$rootScope.$broadcast('syncStatusChanged', {'action' : 'none'});\r\n\t\t\treturn $q.reject(error);\r\n\t\t}\r\n\r\n\t\t// Kick off the upload process\r\n\t\treturn funcGetRegistrationData()\r\n\t\t\t.then(funcGetToolUploadData)\r\n\t\t\t.then(funcUploadToolData)\r\n\t\t\t.then(funcDeleteToolUploadData)\r\n\t\t\t.then(funcMergeToolData)\r\n\t\t\t.then(() => {\r\n\t\t\t\t$rootScope.$broadcast('syncStatusChanged', {'action' : 'none'});\r\n\t\t\t}, fail);\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Update the Modules data file with the content from the remote server.\r\n\t * This should only be called once per module, and only when the user\r\n\t * registers for a module.\r\n\t *\r\n\t * This function will also check that the tools returned are supported by\r\n\t * this client, therefor it might only use a subset of the returned data.\r\n\t * The allowed tools are determined by the base.json file which is used for\r\n\t * the base data file for each module (looking at the toolsLocal ids)\r\n\t *\r\n\t */\r\n\tSyncAPIServiceImpl.prototype.updateModuleData = function(moduleId){\r\n\t\tvar deferred = $q.defer();\r\n\r\n\t\tvar restURL = SynthConfig.baseURL + '/service-creator/tools/' + moduleId;\r\n\t\tLOG.debug('Getting module data using REST URL : ' + restURL);\r\n\t\t$http({\r\n\t\t\tmethod : 'GET',\r\n\t\t\turl : restURL})\r\n\t\t\t.success((data) => {\r\n\t\t\t\tif(LOG.isDEBUG()){\r\n\t\t\t\t\tLOG.debug('Got response for module data : ' + JSON.stringify(data, '\\t', 4));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if there is an error\r\n\t\t\t\tif (CheckError(deferred, data)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tModuleService.getModuleData(moduleId).then(\r\n\t\t\t\t\tfunction(moduleData){\r\n\t\t\t\t\t\tif(LOG.isDEBUG()){\r\n\t\t\t\t\t\t\tLOG.debug('Got current module data : ' + JSON.stringify(moduleData, '\\t', 4));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar mergeData = { 'toolDescriptions' : {}, 'tools' : {}};\r\n\r\n\t\t\t\t\t\t// Loop through the data in the response\r\n\t\t\t\t\t\tfor(var idx in data){\r\n\t\t\t\t\t\t\tvar toolInfo = data[idx];\r\n\t\t\t\t\t\t\tvar toolKeyLocal = mapTool(toolInfo.name);\r\n\r\n\r\n\t\t\t\t\t\t\t// Only use the tool if it is a tool we support\r\n\t\t\t\t\t\t\tif(moduleData.toolDescriptions[toolKeyLocal] !== undefined){\r\n\t\t\t\t\t\t\t\tmergeData.toolDescriptions[toolKeyLocal] = {};\r\n\t\t\t\t\t\t\t\tmergeData.toolDescriptions[toolKeyLocal].label = toolInfo.title;\r\n\t\t\t\t\t\t\t\t//mergeData.toolDescriptions[toolKeyLocal].description = data.toolDescriptions[toolKey].description;\r\n\t\t\t\t\t\t\t\tmergeData.toolDescriptions[toolKeyLocal].menu = toolInfo.onMenu;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Now merge the resulting data to our local file\r\n\t\t\t\t\t\tLOG.debug('We will now merge these : ' + JSON.stringify(mergeData, '\\t', 4));\r\n\r\n\t\t\t\t\t\tModuleService.mergeToModuleData(moduleId, mergeData).then(\r\n\t\t\t\t\t\t\t// Success\r\n\t\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\t\tdeferred.resolve();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t_SF(deferred));\r\n\t\t\t\t\t}, _SF(deferred));\r\n\r\n\r\n\t\t\t})\r\n\t\t\t.error(() => {\r\n\t\t\t\tLOG.warn('Failed to get module data from remote server');\r\n\t\t\t\tdeferred.reject(SynthError(1000));\r\n\t\t\t});\r\n\t\treturn deferred.promise;\r\n\t};\r\n\r\n\t/**\r\n\t * Download an array of files from the remote server for a specific tool\r\n\t */\r\n\tSyncAPIServiceImpl.prototype.getAttachementsFromServer = function(attachments) {\r\n\t\tconst self = this;\r\n\t\tif (!attachments || attachments.length === 0){\r\n\t\t\tLOG.info('No need to download any attachments, an empty array was given');\r\n\t\t\treturn $q.when({});\r\n\t\t}\r\n\t\tlet promise = $q.when();\r\n\t\tangular.forEach(attachments, function(attachment){\r\n\t\t\tpromise = promise.then(function(){\r\n\t\t\t\treturn self.getFileFromServer(attachment.downloadKey, attachment.downloadPath);\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn promise;\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Download a single file from the remote server.\r\n\t *\r\n\t * @param {type} downloadKey - Key of the file to download from the remote server\r\n\t * @param {type} localPath - Full path to where the file should be saved locally on the device\r\n\t */\r\n\tSyncAPIServiceImpl.prototype.getFileFromServer = function (downloadKey, localPath) {\r\n\t\tvar deferred = $q.defer();\r\n\r\n\t\t// First make sure that the local path exists\r\n\t\tvar fileTransfer = new FileTransfer();\r\n\t\tvar uri = encodeURI(SynthConfig.baseURL + '/service-creator/download/file/' + downloadKey);\r\n\t\tLOG.debug('Downloading file with URL ' + uri);\r\n\r\n\t\t// Send back progress\r\n\t\tfileTransfer.onprogress = function(progressEvent) {\r\n\t\t\tdeferred.notify(progressEvent);\r\n\t\t};\r\n\r\n\t\tfileTransfer.download(\r\n\t\t\turi,\r\n\t\t\tlocalPath,\r\n\t\t\tfunction() {\r\n\t\t\t\tLOG.debug('Download is complete');\r\n\t\t\t\tdeferred.resolve();\r\n\t\t\t},\r\n\t\t\tfunction(error) {\r\n\t\t\t\tLOG.warn('Failed to download file!');\r\n\t\t\t\tLOG.warn('download error source ' + error.source);\r\n\t\t\t\tLOG.warn('download error target ' + error.target);\r\n\t\t\t\tLOG.warn('download error code ' + error.code);\r\n\t\t\t\tdeferred.reject(SynthError(1004));\r\n\t\t\t},\r\n\t\t\tfalse,\r\n\t\t\t{\r\n\t\t\t\t// No options\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn deferred.promise;\r\n\t};\r\n\r\n\treturn new SyncAPIServiceImpl();\r\n\r\n};\r\nSyncAPIService.$inject = ['$q', '$http', '$filter', '$rootScope', 'base64', 'DataService',\r\n\t'LoggerService', 'SynthError', 'SynthFail', 'SynthCheckResponseError',\r\n\t'SynthConfig', 'ModuleService', 'RegistrationService', 'SynthAttachmentMiner',\r\n\t'SynthEmbeddedImageHandler', 'SynthDeleteHandler', 'SynthLinkHandler', 'SynthUploadResponseHandler'];\r\n\r\nexport default SyncAPIService;\r\n"
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SyncAPIService",
    "memberof": "js/base/services/SyncAPIService.js",
    "longname": "js/base/services/SyncAPIService.js~SyncAPIService",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/services/SyncAPIService.js",
    "importStyle": "SyncAPIService",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/services/SynthesisRESTClient.js",
    "memberof": null,
    "longname": "js/base/services/SynthesisRESTClient.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nclass SynthesisRESTClient{\r\n\r\n\tconstructor($q, $http, RegistrationService, SynthConfig, CheckError, SynthError, SynthAuthenticateUser){\r\n\t\tthis.$q = $q;\r\n\t\tthis.$http = $http;\r\n\t\tthis.registrationService = RegistrationService;\r\n\t\tthis.synthConfig = SynthConfig;\r\n\t\tthis.checkError = CheckError;\r\n\t\tthis.synthError = SynthError;\r\n\t\tthis.synthAuthenticateUser = SynthAuthenticateUser;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param path Path to which the service is pointing\r\n\t * @param Http method to use\r\n\t * @param Http method to use\r\n\t */\r\n\t_doRequest(path, method, data, appendAuthentication = false, checkLoginFail = true){\r\n\t\tlet submitData = data || {};\r\n\t\tvar deferred = this.$q.defer();\r\n\t\tconst self = this;\r\n\t\t// Add authentication details\r\n\t\tfunction addAuthentication(){\r\n\t\t\treturn self.registrationService.getRegistration().then((registration) => {\r\n\t\t\t\tsubmitData.authToken = registration.authToken;\r\n\t\t\t\tsubmitData.username = registration.username;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Send the request to the server\r\n\t\tfunction performRequest(){\r\n\t\t\treturn self.$http({\r\n\t\t\t\t'method' : method,\r\n\t\t\t\t'url' : `${self.synthConfig.baseURL}${path}`,\r\n\t\t\t\t'data' : submitData});\r\n\t\t}\r\n\r\n\t\t// Handle authentication problems on requests, by attempting to let the\r\n\t\t// use re-login\r\n\t\tfunction handleAuthenticationError(){\r\n\t\t\tthis.authenticateUser\r\n\t\t\t.login()\r\n\t\t\t.then((result) => {\r\n\t\t\t\tif(self.synthAuthenticateUser.SUCCESS == result.code){\r\n\t\t\t\t\ttryRequest(); // Now lets try again\r\n\t\t\t\t\treturn undefined;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tdeferred.reject(self.synthError(3000));\r\n\t\t\t\t\treturn self.$q.reject(self.synthError(3000));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// Something went wrong trying to authenticate\r\n\t\t\t(reason) => {\r\n\t\t\t\tdeferred.reject(reason);\r\n\t\t\t\treturn self.$q.reject(reason);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction tryRequest(){\r\n\t\t\tlet tryPromise;\r\n\t\t\tif(appendAuthentication){\r\n\t\t\t\ttryPromise = addAuthentication()\r\n\t\t\t\t\t.then(performRequest);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\ttryPromise = performRequest();\r\n\t\t\t}\r\n\t\t\treturn tryPromise.then(\r\n\t\t\t\t// Success\r\n\t\t\t\t(successData) => {\r\n\t\t\t\t\tif(checkLoginFail && successData.data.errorCode != undefined\r\n\t\t\t\t\t\t&& (successData.data.errorCode === 2002 || successData.data.errorCode === 1005)){\r\n\t\t\t\t\t\thandleAuthenticationError();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tdeferred.resolve(successData);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t// Failure\r\n\t\t\t\t(reason) => {\r\n\t\t\t\t\tdeferred.reject(reason);\r\n\t\t\t\t\treturn self.$q.reject(reason);\r\n\t\t\t\t}\r\n\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\ttryRequest();\r\n\t\treturn deferred.promise;\r\n\t}\r\n\t/**\r\n\t * Gets the sites allowed for this user\r\n\t * @returns Returns an array of sites the user has available\r\n\t */\r\n\tgetAllowedSites(){\r\n\r\n\t\treturn this.registrationService.getRegistration().then((registration) => {\r\n\t\t\treturn this._doRequest(`/service-auth/allowedSitesPost/${registration.username}`,\r\n\t\t\t\t'POST',\r\n\t\t\t\t{'authToken' : registration.authToken}\r\n\t\t\t).then((response) => {\r\n\t\t\t\tvar data = response.data;\r\n\t\t\t\t// Check if there is an error\r\n\t\t\t\tif (this.checkError(null, data)) {\r\n\t\t\t\t\treturn this.$q.reject(this.synthError(data));\r\n\t\t\t\t}\r\n\t\t\t\treturn data.modules;\r\n\t\t\t}, () => {\r\n\t\t\t\treturn this.$q.reject(this.synthError(1000));\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a push message from the server\r\n\t */\r\n\tgetPushMessage(id){\r\n\t\treturn this._doRequest('/service-push/getPush',\r\n\t\t\t'POST',\r\n\t\t\t{pushId : id},\r\n\t\t\ttrue\r\n\t\t).then((response) => {\r\n\t\t\tvar data = response.data;\r\n\t\t\t// Check if there is an error\r\n\t\t\tif (this.checkError(null, data)) {\r\n\t\t\t\treturn this.$q.reject(this.synthError(data));\r\n\t\t\t}\r\n\t\t\treturn data.push;\r\n\t\t}, () => {\r\n\t\t\treturn this.$q.reject(this.synthError(1000));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Authenticates a user to the remote server\r\n\t */\r\n\tauthenticateUser(username, password, isToken = false){\r\n\t\tvar requestData;\r\n\t\tconst self = this;\r\n\t\tif(isToken){\r\n\t\t\trequestData = {'authToken' : password};\r\n\t\t}\r\n\t\telse{\r\n\t\t\trequestData = {'password' : password};\r\n\t\t}\r\n\r\n\t\tfunction getAuthenticatePromise(){\r\n\t\t\treturn self._doRequest(`/service-auth/login/${username}`,\r\n\t\t\t\t'POST',\r\n\t\t\t\trequestData,\r\n\t\t\t\tfalse, // Do not add auth details\r\n\t\t\t\tfalse // Do not handle invalid cridentials\r\n\t\t\t).then((response) => {\r\n\t\t\t\tvar data = response.data;\r\n\r\n\t\t\t\t// Authentication failed\r\n\t\t\t\tif (data.errorCode == '1005'){\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t'authenticated' : false,\r\n\t\t\t\t\t\t'message' : data.message,\r\n\t\t\t\t\t\t'errorCode' : data.errorCode,\r\n\t\t\t\t\t\t'instruction' : data.instruction\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if there is an error\r\n\t\t\t\tif (self.checkError(null, data)){\r\n\t\t\t\t\treturn self.$q.reject(self.synthError(data));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\t'authenticated' : true,\r\n\t\t\t\t\t'authToken' : data.authToken\r\n\t\t\t\t};\r\n\t\t\t}, () => {\r\n\t\t\t\treturn self.$q.reject(self.synthError(1000));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Get promise to update the user's auth token if there is one\r\n\t\t */\r\n\t\tfunction getUpdateTokenPromise(successData){\r\n\t\t\tif(successData.authToken){\r\n\t\t\t\treturn self.registrationService.mergeRegistration({'authToken' : successData.authToken, 'username' : username})\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\treturn self.$q.when(successData);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn self.$q.when(successData);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn getAuthenticatePromise()\r\n\t\t\t.then(getUpdateTokenPromise);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Factory to create a new SynthesisRESTClient\r\n */\r\nvar SynthesisRESTClientFactory = function(){\r\n\treturn new SynthesisRESTClient(...arguments);\r\n};\r\nSynthesisRESTClientFactory.$inject = ['$q', '$http', 'RegistrationService', 'SynthConfig', 'SynthCheckResponseError', 'SynthError', 'SynthAuthenticateUser'];\r\nexport default SynthesisRESTClientFactory;\r\n"
  },
  {
    "__docId__": 214,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SynthesisRESTClient",
    "memberof": "js/base/services/SynthesisRESTClient.js",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/services/SynthesisRESTClient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 215,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "$q",
        "types": [
          "*"
        ]
      },
      {
        "name": "$http",
        "types": [
          "*"
        ]
      },
      {
        "name": "RegistrationService",
        "types": [
          "*"
        ]
      },
      {
        "name": "SynthConfig",
        "types": [
          "*"
        ]
      },
      {
        "name": "CheckError",
        "types": [
          "*"
        ]
      },
      {
        "name": "SynthError",
        "types": [
          "*"
        ]
      },
      {
        "name": "SynthAuthenticateUser",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 216,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$q",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#$q",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$http",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#$http",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "registrationService",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#registrationService",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "synthConfig",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#synthConfig",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "checkError",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#checkError",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "synthError",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#synthError",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "synthAuthenticateUser",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#synthAuthenticateUser",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_doRequest",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#_doRequest",
    "access": null,
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path to which the service is pointing"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "Http",
        "description": "method to use"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "Http",
        "description": "method to use"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 224,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getAllowedSites",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#getAllowedSites",
    "access": null,
    "description": "Gets the sites allowed for this user",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Returns an array of sites the user has available"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Returns an array of sites the user has available"
    },
    "generator": false
  },
  {
    "__docId__": 225,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPushMessage",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#getPushMessage",
    "access": null,
    "description": "Gets a push message from the server",
    "lineNumber": 121,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 226,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "authenticateUser",
    "memberof": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClient#authenticateUser",
    "access": null,
    "description": "Authenticates a user to the remote server",
    "lineNumber": 141,
    "params": [
      {
        "name": "username",
        "types": [
          "*"
        ]
      },
      {
        "name": "password",
        "types": [
          "*"
        ]
      },
      {
        "name": "isToken",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 227,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "SynthesisRESTClientFactory",
    "memberof": "js/base/services/SynthesisRESTClient.js",
    "longname": "js/base/services/SynthesisRESTClient.js~SynthesisRESTClientFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/services/SynthesisRESTClient.js",
    "importStyle": "SynthesisRESTClientFactory",
    "description": "Factory to create a new SynthesisRESTClient",
    "lineNumber": 208,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 228,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/services/UserService.js",
    "memberof": null,
    "longname": "js/base/services/UserService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nclass UserService {\r\n\r\n\tconstructor(RegistrationService){\r\n\t\tthis.registrationService = RegistrationService;\r\n\r\n\t\t/**\r\n\t\t * The user hasn't been authenticated yet\r\n\t\t */\r\n\t\tthis.PROGRESS_AUTHENTICATE = 0;\r\n\r\n\t\t/**\r\n\t\t * The user still needs to register for at least one module\r\n\t\t */\r\n\t\tthis.PROGRESS_SELECT_MODULES = 1;\r\n\r\n\t\t/**\r\n\t\t * The user registration is complete for at least on module\r\n\t\t */\r\n\t\tthis.PROGRESS_COMPLETED = 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the progress of the user registration. Posible returning values are\r\n\t * UserService.PROGRESS_AUTHENTICATE\r\n\t * UserService.PROGRESS_SELECT_MODULES\r\n\t * UserService.PROGRESS_COMPLETED\r\n\t */\r\n\tgetRegistrationProgress(){\r\n\t\tvar self = this;\r\n\t\treturn this.registrationService.getRegistration()\r\n\t\t\t.then(function(data){\r\n\t\t\t\t/*\r\n\t\t\t\t * If there isn't even a username and auth token yet\r\n\t\t\t\t * then the user hasn't been authenticated\r\n\t\t\t\t */\r\n\t\t\t\tif(data == null || data.username == null){\r\n\t\t\t\t\treturn self.PROGRESS_AUTHENTICATE;\r\n\t\t\t\t}\r\n\t\t\t\t/*\r\n\t\t\t\t * If there is no modules yet, then the user hasn't selected\r\n\t\t\t\t * modules to use on the app\r\n\t\t\t\t */\r\n\t\t\t\telse if(data.modules == null){\r\n\t\t\t\t\treturn self.PROGRESS_SELECT_MODULES;\r\n\t\t\t\t}\r\n\t\t\t\t/*\r\n\t\t\t\t *  If none of the above failed, then the user\r\n\t\t\t\t *  has a complete registration.\r\n\t\t\t\t */\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn self.PROGRESS_COMPLETED;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the user is registered for atleast one module\r\n\t */\r\n\tisRegistered(){\r\n\t\tvar self = this;\r\n\t\treturn self.getRegistrationProgress().then((progress) => {\r\n\t\t\treturn progress == self.PROGRESS_COMPLETED;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if the user is completely registered\r\n\t */\r\n\tisRegistrationComplete(){\r\n\t\treturn this.getRegistrationProgress().then((progress) => {\r\n\t\t\treturn this.PROGRESS_COMPLETED == progress;\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\nvar UserServiceFactory = function(){\r\n\treturn new UserService(...arguments);\r\n};\r\nUserServiceFactory.$inject = ['RegistrationService'];\r\nexport default UserServiceFactory;\r\n"
  },
  {
    "__docId__": 229,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "UserService",
    "memberof": "js/base/services/UserService.js",
    "longname": "js/base/services/UserService.js~UserService",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/services/UserService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 230,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/services/UserService.js~UserService",
    "longname": "js/base/services/UserService.js~UserService#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "RegistrationService",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 231,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "registrationService",
    "memberof": "js/base/services/UserService.js~UserService",
    "longname": "js/base/services/UserService.js~UserService#registrationService",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "PROGRESS_AUTHENTICATE",
    "memberof": "js/base/services/UserService.js~UserService",
    "longname": "js/base/services/UserService.js~UserService#PROGRESS_AUTHENTICATE",
    "access": null,
    "description": "The user hasn't been authenticated yet",
    "lineNumber": 11,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "PROGRESS_SELECT_MODULES",
    "memberof": "js/base/services/UserService.js~UserService",
    "longname": "js/base/services/UserService.js~UserService#PROGRESS_SELECT_MODULES",
    "access": null,
    "description": "The user still needs to register for at least one module",
    "lineNumber": 16,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "PROGRESS_COMPLETED",
    "memberof": "js/base/services/UserService.js~UserService",
    "longname": "js/base/services/UserService.js~UserService#PROGRESS_COMPLETED",
    "access": null,
    "description": "The user registration is complete for at least on module",
    "lineNumber": 21,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRegistrationProgress",
    "memberof": "js/base/services/UserService.js~UserService",
    "longname": "js/base/services/UserService.js~UserService#getRegistrationProgress",
    "access": null,
    "description": "Gets the progress of the user registration. Posible returning values are\nUserService.PROGRESS_AUTHENTICATE\nUserService.PROGRESS_SELECT_MODULES\nUserService.PROGRESS_COMPLETED",
    "lineNumber": 30,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 236,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isRegistered",
    "memberof": "js/base/services/UserService.js~UserService",
    "longname": "js/base/services/UserService.js~UserService#isRegistered",
    "access": null,
    "description": "Returns true if the user is registered for atleast one module",
    "lineNumber": 61,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 237,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isRegistrationComplete",
    "memberof": "js/base/services/UserService.js~UserService",
    "longname": "js/base/services/UserService.js~UserService#isRegistrationComplete",
    "access": null,
    "description": "Return true if the user is completely registered",
    "lineNumber": 71,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 238,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "UserServiceFactory",
    "memberof": "js/base/services/UserService.js",
    "longname": "js/base/services/UserService.js~UserServiceFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/services/UserService.js",
    "importStyle": "UserServiceFactory",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 239,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/services/UserSettings.js",
    "memberof": null,
    "longname": "js/base/services/UserSettings.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n * Service handeling user settings\r\n */\r\nclass UserSettings {\r\n\r\n\tconstructor($q, $rootScope, DataService){\r\n\t\tthis.$q = $q;\r\n\t\tthis.$rootScope = $rootScope;\r\n\t\tthis.dataService = DataService;\r\n\t\t/*\r\n\t\t * Cache of settings so that we don't have to read the file each time\r\n\t\t */\r\n\t\tthis.cachedSettings = null;\r\n\r\n\t\t/*\r\n\t\t * When we first read the settings, we need to make sure it is\r\n\t\t * up to date with the settings that the application provides\r\n\t\t */\r\n\t\tthis.firstRun = true;\r\n\r\n\t\t// Clear cache on event\r\n\t\t$rootScope.$on('app.clearAllCache', () => {\r\n\t\t\tthis.cachedSettings = null;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Merge the settings to settings.json\r\n\t */\r\n\tmergeSettings(settings){\r\n\t\treturn this.dataService.mergeToFile('', 'settings.json', settings)\r\n\t\t\t.then((newSettings) => {\r\n\t\t\t\t// Update our cache with what is now the contents of the file\r\n\t\t\t\tthis.cachedSettings = newSettings;\r\n\t\t\t\treturn newSettings;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Merge the settings file to make sure it contains the\r\n\t * settings that ship with the app\r\n\t */\r\n\t_mergeBaseSettings(){\r\n\t\tvar self = this;\r\n\r\n\t\t// Promise to get the base settings\r\n\t\tfunction getBaseSettingPromise(){\r\n\t\t\treturn self.dataService.getWebData('base/data/settings.json');\r\n\t\t}\r\n\r\n\t\t// Promise to persist the settings\r\n\t\tfunction getPersistSettingsPromise(baseSettings){\r\n\t\t\treturn self.mergeSettings(baseSettings);\r\n\t\t}\r\n\r\n\t\treturn getBaseSettingPromise()\r\n\t\t\t.then(getPersistSettingsPromise);\r\n\t}\r\n\r\n\t/**\r\n\t * Read the settings from the file and update the cache\r\n\t */\r\n\tgetSettings(){\r\n\t\t// On first run we make sure to merge the application provided\r\n\t\t// settings with the user's file\r\n\t\tif(this.firstRun){\r\n\t\t\tthis.firstRun = false;\r\n\t\t\treturn this._mergeBaseSettings();\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// If we don't have cached settings, we get it from the file\r\n\t\t\tif(this.cachedSettings == null){\r\n\t\t\t\treturn this.dataService.getFileData('', 'settings.json')\r\n\t\t\t\t\t.then((settings) => {\r\n\t\t\t\t\t\t// Cache what we just read\r\n\t\t\t\t\t\tthis.cachedSettings = settings;\r\n\t\t\t\t\t\treturn settings;\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t// Else we use the cached settings\r\n\t\t\telse{\r\n\t\t\t\treturn this.$q.when(this.cachedSettings);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsaveSettings(newSettings){\r\n\t\treturn this.mergeSettings(newSettings);\r\n\t}\r\n}\r\n\r\n/**\r\n * Factory to create a new UserSettings service\r\n */\r\nvar UserSettingsFactory = function(){\r\n\treturn new UserSettings(...arguments);\r\n};\r\nUserSettingsFactory.$inject = ['$q', '$rootScope', 'DataService'];\r\nexport default UserSettingsFactory;\r\n"
  },
  {
    "__docId__": 240,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "UserSettings",
    "memberof": "js/base/services/UserSettings.js",
    "longname": "js/base/services/UserSettings.js~UserSettings",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/services/UserSettings.js",
    "importStyle": null,
    "description": "Service handeling user settings",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 241,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "$q",
        "types": [
          "*"
        ]
      },
      {
        "name": "$rootScope",
        "types": [
          "*"
        ]
      },
      {
        "name": "DataService",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 242,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$q",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#$q",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$rootScope",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#$rootScope",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dataService",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#dataService",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cachedSettings",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#cachedSettings",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "firstRun",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#firstRun",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cachedSettings",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#cachedSettings",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mergeSettings",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#mergeSettings",
    "access": null,
    "description": "Merge the settings to settings.json",
    "lineNumber": 32,
    "params": [
      {
        "name": "settings",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 249,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cachedSettings",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#cachedSettings",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_mergeBaseSettings",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#_mergeBaseSettings",
    "access": null,
    "description": "Merge the settings file to make sure it contains the\nsettings that ship with the app",
    "lineNumber": 45,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 251,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getSettings",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#getSettings",
    "access": null,
    "description": "Read the settings from the file and update the cache",
    "lineNumber": 65,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 252,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "firstRun",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#firstRun",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cachedSettings",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#cachedSettings",
    "access": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "saveSettings",
    "memberof": "js/base/services/UserSettings.js~UserSettings",
    "longname": "js/base/services/UserSettings.js~UserSettings#saveSettings",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "newSettings",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 255,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "UserSettingsFactory",
    "memberof": "js/base/services/UserSettings.js",
    "longname": "js/base/services/UserSettings.js~UserSettingsFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/services/UserSettings.js",
    "importStyle": "UserSettingsFactory",
    "description": "Factory to create a new UserSettings service",
    "lineNumber": 97,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 256,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/settings/SettingsCtrl.js",
    "memberof": null,
    "longname": "js/base/settings/SettingsCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nvar SettingsCtrl = ($scope, $rootScope, $location, LoggerService, DataService, SynthErrorHandler, UserSession, SyncService, UserSettings, UserService, SynthUploadResponseHandler) => {\r\n\t$rootScope.activePage = 'settings';\r\n\t$rootScope.breadcrumbs = [{'name' : 'Settings'}];\r\n\t// The application can only upload if there are handlers to uploads\r\n\t$scope.canUpload = SynthUploadResponseHandler.hasHandlers();\r\n\r\n\tUserSettings.getSettings().then((userSettings) => {\r\n\t\t/*\r\n\t\t* Auto sync\r\n\t\t*/\r\n\t\t$scope.animateSwitch = false;\r\n\t\t$scope.settings = userSettings;\r\n\t\t$scope.animateSwitch = true;\r\n\r\n\t});\r\n\r\n\tUserService.isRegistrationComplete().then((iscomplete) => {\r\n\t\t$scope.isRegistered = iscomplete;\r\n\t});\r\n\r\n\t/*\r\n\t* Perform the delete of the account\r\n\t*/\r\n\tfunction performDeleteAccount(){\r\n\t\tDataService.deleteAllApplicationData()\r\n\t\t\t.then(() => {\r\n\t\t\t\tSyncService.stopBackgroundSync();\r\n\t\t\t\t$rootScope.$broadcast('syncStatusChanged', {'action' : 'none'});\r\n\t\t\t\t$rootScope.tools = null;\r\n\t\t\t\tUserSession.clearSession();\r\n\t\t\t\tnavigator.splashscreen.show();\r\n\t\t\t\t$location.path('/boot');\r\n\t\t\t}, SynthErrorHandler);\r\n\r\n\t\t// TODO delete all push preferences on server, the user might be offline....\r\n\t}\r\n\r\n\t/*\r\n\t* Prompt the user to confirm deleting the account\r\n\t*/\r\n\t$scope.confirmDeleteAccount = () => {\r\n\t\tnavigator.notification.confirm(\r\n\t\t\t'Are you sure you want to delete ALL account details and downloaded content?',\r\n\t\t\tfunction(index){\r\n\t\t\t\tif (index === 2){\r\n\t\t\t\t\tperformDeleteAccount();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'Delete account',\r\n\t\t\t['No', 'Yes']);\r\n\t};\r\n\r\n\t// Watch auto download toggle\r\n\t$scope.$watch('settings.autoSyncDownload', (newValue) => {\r\n\r\n\t\tUserSettings.saveSettings({'autoSyncDownload' : newValue}).then((newSettings) => {\r\n\r\n\t\t\t$scope.settings = newSettings;\r\n\t\t\tif(newSettings.autoSyncDownload || newSettings.autoSyncUpload){\r\n\t\t\t\tSyncService.startBackgroundSync();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tSyncService.stopBackgroundSync();\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\t// Watch auto upload toggle\r\n\t$scope.$watch('settings.autoSyncUpload', (newValue) => {\r\n\r\n\t\tUserSettings.saveSettings({'autoSyncUpload' : newValue}).then(function(newSettings){\r\n\r\n\t\t\t$scope.settings = newSettings;\r\n\t\t\tif(newSettings.autoSyncDownload || newSettings.autoSyncUpload){\r\n\t\t\t\tSyncService.startBackgroundSync();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tSyncService.stopBackgroundSync();\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n};\r\nSettingsCtrl.$inject = ['$scope', '$rootScope', '$location', 'LoggerService', 'DataService', 'SynthErrorHandler',\r\n 'UserSession', 'SyncService', 'UserSettings', 'UserService', 'SynthUploadResponseHandler'];\r\nexport default SettingsCtrl;\r\n"
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SettingsCtrl",
    "memberof": "js/base/settings/SettingsCtrl.js",
    "longname": "js/base/settings/SettingsCtrl.js~SettingsCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/settings/SettingsCtrl.js",
    "importStyle": "SettingsCtrl",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/settings/SettingsPushCtrl.js",
    "memberof": null,
    "longname": "js/base/settings/SettingsPushCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar SettingsPushCtrl = ($scope, $rootScope, DataService, SynthErrorHandler, UserSession, PushService, SynthAuthenticateUser) => {\r\n\r\n\r\n\tconst STATES = {\r\n\t\tSTATE_LOADING : 1,\r\n\t\tSTATE_LOADED : 2,\r\n\t\tSTATE_SAVING : 3,\r\n\t\tSTATE_SAVED : 4,\r\n\t\tSTATE_ERROR : 99\r\n\t};\r\n\r\n\t// Add properties to scope\r\n\tangular.extend($scope, {\r\n\t\tstate : 0,\r\n\t\terror : false,\r\n\t\tpreferences : null,\r\n\t\tloadingModules : true,\r\n\t\tsavingPreferences : false,\r\n\t\ttoggledTool : toggledTool\r\n\t},\r\n\tSTATES);\r\n\r\n\tfunction getPreferences(){\r\n\t\treturn PushService.getPushToolPreferences().then((prefs) => {\r\n\t\t\t$scope.preferences = prefs;\r\n\t\t\t$scope.state = STATES.STATE_LOADED;\r\n\t\t}, (reason) => {\r\n\t\t\tSynthErrorHandler(reason).then(() => {}, () => {\r\n\t\t\t\t$scope.errorMessage = 'Failed to retrieve preferences';\r\n\t\t\t\t$scope.error = true;\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tgetPreferences();\r\n\r\n\tfunction toggledTool(moduleId, toolId, value, $event){\r\n\t\tif($event){\r\n\t\t\t$event.stopImmediatePropagation();\r\n\t\t\t$event.stopPropagation();\r\n\t\t}\r\n\t\t$scope.preferences[moduleId][toolId] = value;\r\n\t}\r\n\r\n\r\n\tfunction updateSettings(){\r\n\t\t$scope.state = STATES.STATE_SAVING;\r\n\t\treturn PushService.updatePushPreferences(angular.copy($scope.preferences))\r\n\t\t\t.then(function success(prefs){\r\n\t\t\t\t$scope.state = STATES.STATE_SAVED;\r\n\t\t\t\t$scope.preferences = prefs;\r\n\t\t\t}, function failed(reason){\r\n\r\n\t\t\t\tif(reason.id === 2002){\r\n\t\t\t\t\tSynthAuthenticateUser\r\n\t\t\t\t\t\t.login('Please enter password', 'Save Settings')\r\n\t\t\t\t\t\t.then(function(result){\r\n\t\t\t\t\t\t\tif(SynthAuthenticateUser.SUCCESS == result.code){\r\n\t\t\t\t\t\t\t\tupdateSettings();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t$scope.errorMessage = 'You need to authenticate';\r\n\t\t\t\t\t\t\t\t$scope.state = STATES.ERROR;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tSynthErrorHandler(reason).then(() => {}, () => {\r\n\t\t\t\t\t\t$scope.errorMessage = 'Failed to save preferences';\r\n\t\t\t\t\t\t$scope.state = STATES.ERROR;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\t// Update the current push settings on the Synthesis server and\r\n\t// update local config. If the user is offline or the server has a problem\r\n\t// we will not persist the current settings\r\n\t$scope.save = function(){\r\n\t\tupdateSettings().then(getPreferences);\r\n\t};\r\n};\r\nSettingsPushCtrl.$inject = ['$scope', '$rootScope', 'DataService', 'SynthErrorHandler', 'UserSession', 'PushService', 'SynthAuthenticateUser'];\r\nexport default SettingsPushCtrl;\r\n"
  },
  {
    "__docId__": 259,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SettingsPushCtrl",
    "memberof": "js/base/settings/SettingsPushCtrl.js",
    "longname": "js/base/settings/SettingsPushCtrl.js~SettingsPushCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/settings/SettingsPushCtrl.js",
    "importStyle": "SettingsPushCtrl",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/sync/SyncConfigureCtrl.js",
    "memberof": null,
    "longname": "js/base/sync/SyncConfigureCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar SyncConfigureCtrl = ($scope, $rootScope, $location, SyncService, SyncSelection, LoggerService, SynthAuthenticateUser) => {\r\n\tvar LOG = LoggerService('SyncConfigureCtrl');\r\n\t$rootScope.activePage = 'sync';\r\n\t$rootScope.breadcrumbs = [{'name' : 'Sync', 'url' : '#sync'}, {'name' : 'Configure'}];\r\n\r\n\t// Callback function for selecting tools to download\r\n\t$scope.updateTotals = function(){\r\n\t\t$scope.syncUpload = SyncSelection.getUploadSize();\r\n\t\t$scope.syncDownload = SyncSelection.getDownloadSize();\r\n\t\t$scope.syncTotal = SyncSelection.getTotal();\r\n\t};\r\n\r\n\t// Callback function to go to the sync\r\n\t$scope.doSync = function(){\r\n\t\tSynthAuthenticateUser\r\n\t\t.login('Please enter password', 'Sync')\r\n\t\t.then((result) => {\r\n\t\t\tif(SynthAuthenticateUser.FAILED == result.code){\r\n\t\t\t\tLOG.warn('Authentication failed');\r\n\t\t\t}\r\n\t\t\telse if(SynthAuthenticateUser.SUCCESS == result.code){\r\n\t\t\t\t$location.path('/sync-progress');\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t$scope.cancelSync = function(){\r\n\t\t$location.path('/home');\r\n\t};\r\n\r\n\t$scope.tools = SyncSelection.getSyncableToolsArray();\r\n\t$scope.updateTotals();\r\n};\r\n\r\nSyncConfigureCtrl.$inject = ['$scope', '$rootScope', '$location', 'SyncService', 'SyncSelection', 'LoggerService', 'SynthAuthenticateUser'];\r\nexport default SyncConfigureCtrl;\r\n"
  },
  {
    "__docId__": 261,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SyncConfigureCtrl",
    "memberof": "js/base/sync/SyncConfigureCtrl.js",
    "longname": "js/base/sync/SyncConfigureCtrl.js~SyncConfigureCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/sync/SyncConfigureCtrl.js",
    "importStyle": "SyncConfigureCtrl",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/sync/SyncCtrl.js",
    "memberof": null,
    "longname": "js/base/sync/SyncCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/*\r\n* base/js/sync/SyncCtrl.js\r\n*/\r\nvar SyncCtrl = ($scope, $rootScope, $location, SyncService, SyncSelection, LoggerService, SynthAuthenticateUser, SynthErrorHandler) => {\r\n\tvar LOG = LoggerService('SyncCtrl');\r\n\t$rootScope.activePage = 'sync';\r\n\t$rootScope.breadcrumbs = [{'name' : 'Sync Summary'}];\r\n\r\n\r\n\t$scope.haveSyncStatus = false;\r\n\t// Get the scope summary and attach to model\r\n\tSyncService\r\n\t\t.getSyncDetails()\r\n\t\t.then((summary) => {\r\n\t\t\t$scope.syncSummary = summary;\r\n\t\t\t$scope.haveSyncStatus = true;\r\n\t\t\tSyncSelection.tools = summary.tools;\r\n\t\t\tSyncSelection.selectAll(); // Mark all downloads and uploads by default\r\n\t\t}, SynthErrorHandler);\r\n\r\n\r\n\t// Callback function to go to the sync\r\n\t$scope.doSync = function(){\r\n\t\tSynthAuthenticateUser\r\n\t\t.login('Please enter password', 'Sync')\r\n\t\t.then((result) => {\r\n\t\t\tif(SynthAuthenticateUser.FAILED == result.code){\r\n\t\t\t\tLOG.warn('Authentication failed');\r\n\t\t\t}\r\n\t\t\telse if(SynthAuthenticateUser.SUCCESS == result.code){\r\n\t\t\t\t$location.path('/sync-progress');\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t$scope.configureSync = function(){\r\n\t\t$location.path('/sync-configure');\r\n\t};\r\n};\r\nSyncCtrl.$inject = ['$scope', '$rootScope', '$location', 'SyncService', 'SyncSelection', 'LoggerService', 'SynthAuthenticateUser', 'SynthErrorHandler'];\r\nexport default SyncCtrl;\r\n"
  },
  {
    "__docId__": 263,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SyncCtrl",
    "memberof": "js/base/sync/SyncCtrl.js",
    "longname": "js/base/sync/SyncCtrl.js~SyncCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/sync/SyncCtrl.js",
    "importStyle": "SyncCtrl",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/sync/SyncProgressCtrl.js",
    "memberof": null,
    "longname": "js/base/sync/SyncProgressCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar SyncProgressCtrl = ($scope, $rootScope, $filter, $timeout, $q, SyncService, DataService, SyncAPIService, SyncSelection, LoggerService, HomeService, SynthErrorHandler, SynthAuthenticateUser) => {\r\n\tvar LOG = LoggerService('SyncProgressCtrl');\r\n\r\n\t// Update active page and breadcrumbs\r\n\t$rootScope.activePage = 'sync';\r\n\t$rootScope.breadcrumbs = [{'name' : 'Sync', 'url' : '#sync'}, {'name' : 'Synchronising'}];\r\n\r\n\t// Initialise scope variables for this page\r\n\t$scope.syncError = false; // Flag if there was an error during the sync\r\n\t$scope.syncBusy = true;  // Flag if we are still busy syncing\r\n\t$scope.toolUploads = SyncSelection.getUploadArray();\r\n\t$scope.toolDownloads = SyncSelection.getDownloadArray();\r\n\r\n\r\n\t/*\r\n\t* Function that will return a promise to update the tools.\r\n\t* If the flag was set that base was updated, the tools will be reloaded\r\n\t*/\r\n\tfunction getUpdateToolsPromise(response){\r\n\t\tif(response.didUpdateBase === true){\r\n\t\t\treturn HomeService\r\n\t\t\t.getHomeTools()\r\n\t\t\t.then((tools) => {\r\n\t\t\t\t$rootScope.tools = tools;\r\n\t\t\t\treturn response;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn $q.when(response);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction startSync(){\r\n\t\tSyncService.syncSelected(SyncSelection)\r\n\t\t// Update the tools if we need to\r\n\t\t.then(getUpdateToolsPromise)\r\n\t\t.then(() => {// Overall success\r\n\t\t\tLOG.debug('Synching of all tools completed without error');\r\n\t\t\t$scope.syncBusy = false;\r\n\t\t},\r\n\t\t(reason) => {// Overall failure\r\n\t\t\tLOG.debug('Synching of all tools completed with errors!');\r\n\t\t\t$scope.syncBusy = false;\r\n\t\t\t$scope.syncError = true;\r\n\r\n\t\t\t/*\r\n\t\t\t* If the auth token is not valid, let user enter password\r\n\t\t\t* again\r\n\t\t\t*/\r\n\t\t\tif(reason.id === 2002){\r\n\t\t\t\tSynthAuthenticateUser\r\n\t\t\t\t.login('Please enter password', 'Sync')\r\n\t\t\t\t.then((result) => {\r\n\t\t\t\t\tif(SynthAuthenticateUser.FAILED == result.code){\r\n\t\t\t\t\t\tLOG.warn('Authentication failed');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(SynthAuthenticateUser.SUCCESS == result.code){\r\n\t\t\t\t\t\tstartSync();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tSynthErrorHandler(reason);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tstartSync();\r\n};\r\nSyncProgressCtrl.$inject = ['$scope', '$rootScope', '$filter', '$timeout', '$q', 'SyncService', 'DataService', 'SyncAPIService', 'SyncSelection', 'LoggerService', 'HomeService', 'SynthErrorHandler', 'SynthAuthenticateUser'];\r\nexport default SyncProgressCtrl;\r\n"
  },
  {
    "__docId__": 265,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SyncProgressCtrl",
    "memberof": "js/base/sync/SyncProgressCtrl.js",
    "longname": "js/base/sync/SyncProgressCtrl.js~SyncProgressCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/sync/SyncProgressCtrl.js",
    "importStyle": "SyncProgressCtrl",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/sync/SyncSelection.js",
    "memberof": null,
    "longname": "js/base/sync/SyncSelection.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n * A class representing a collection of tools that may\r\n * have been selected to be synchronised\r\n */\r\nclass SyncSelection{\r\n\r\n\tconstructor(){\r\n\t\tthis.tools = {};\r\n\t}\r\n\r\n\t/**\r\n\t* Selects all tools that have upload/download sizes for sync\r\n\t*/\r\n\tselectAll(){\r\n\t\tfor(var tool in this.tools){\r\n\t\t\tthis.tools[tool].downloadSelected = this.tools[tool].contentDownloadSize > 0;\r\n\t\t\tthis.tools[tool].uploadSelected = this.tools[tool].contentUploadSize > 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Selects all the downloads\r\n\t*/\r\n\tselectAllDownloads(){\r\n\t\tfor(var tool in this.tools){\r\n\t\t\tthis.tools[tool].downloadSelected = this.tools[tool].contentDownloadSize > 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Selects all the uploads\r\n\t*/\r\n\tselectAllUploads(){\r\n\t\tfor(var tool in this.tools){\r\n\t\t\tthis.tools[tool].uploadSelected = this.tools[tool].contentUploadSize > 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Get the total download size for selected items\r\n\t*/\r\n\tgetDownloadSize(){\r\n\t\tvar size = 0;\r\n\t\tfor(var tool in this.tools){\r\n\t\t\tif (this.tools[tool].downloadSelected){\r\n\t\t\t\tsize += this.tools[tool].contentDownloadSize;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn size;\r\n\t}\r\n\r\n\t/**\r\n\t* Get the total upload size for selected items\r\n\t*/\r\n\tgetUploadSize(){\r\n\t\tvar size = 0;\r\n\t\tfor(var tool in this.tools){\r\n\t\t\tif (this.tools[tool].uploadSelected){\r\n\t\t\t\tsize += this.tools[tool].contentUploadSize;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn size;\r\n\t}\r\n\r\n\t/**\r\n\t* Gets the total size for the sync selection\r\n\t*/\r\n\tgetTotal(){\r\n\t\treturn this.getDownloadSize() + this.getUploadSize();\r\n\t}\r\n\r\n\t/**\r\n\t* Returns an array of tools that are syncable\r\n\t*/\r\n\tgetSyncableToolsArray(){\r\n\t\tvar syncables = [];\r\n\t\tfor(var idx in this.tools){\r\n\t\t\tif (this.tools[idx].contentDownloadSize > 0 || this.tools[idx].contentUploadSize > 0){\r\n\t\t\t\tsyncables.push(this.tools[idx]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn syncables;\r\n\t}\r\n\r\n\t/**\r\n\t* Gets an array of tools that are selected for download\r\n\t*/\r\n\tgetDownloadArray(){\r\n\t\tvar array = [];\r\n\t\tfor(var idx in this.tools){\r\n\t\t\tif (this.tools[idx].downloadSelected){\r\n\t\t\t\tarray.push(this.tools[idx]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\t/**\r\n\t* Gets an array of tools that are selected for upload\r\n\t*/\r\n\tgetUploadArray(){\r\n\t\tvar array = [];\r\n\t\tfor(var idx in this.tools){\r\n\t\t\tif (this.tools[idx].uploadSelected){\r\n\t\t\t\tarray.push(this.tools[idx]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\t/**\r\n\t* Gets an array of tools that are selected for upload\r\n\t*/\r\n\tnewInstance(){\r\n\t\treturn new SyncSelection();\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default function SyncSelectionFactory(){\r\n\treturn new SyncSelection();\r\n}\r\n"
  },
  {
    "__docId__": 267,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SyncSelection",
    "memberof": "js/base/sync/SyncSelection.js",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/base/sync/SyncSelection.js",
    "importStyle": null,
    "description": "A class representing a collection of tools that may\nhave been selected to be synchronised",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 268,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#constructor",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 269,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tools",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#tools",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectAll",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#selectAll",
    "access": null,
    "description": "Selects all tools that have upload/download sizes for sync",
    "lineNumber": 16,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 271,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectAllDownloads",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#selectAllDownloads",
    "access": null,
    "description": "Selects all the downloads",
    "lineNumber": 26,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 272,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectAllUploads",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#selectAllUploads",
    "access": null,
    "description": "Selects all the uploads",
    "lineNumber": 35,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 273,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDownloadSize",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#getDownloadSize",
    "access": null,
    "description": "Get the total download size for selected items",
    "lineNumber": 44,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 274,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getUploadSize",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#getUploadSize",
    "access": null,
    "description": "Get the total upload size for selected items",
    "lineNumber": 57,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 275,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTotal",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#getTotal",
    "access": null,
    "description": "Gets the total size for the sync selection",
    "lineNumber": 70,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 276,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getSyncableToolsArray",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#getSyncableToolsArray",
    "access": null,
    "description": "Returns an array of tools that are syncable",
    "lineNumber": 77,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 277,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDownloadArray",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#getDownloadArray",
    "access": null,
    "description": "Gets an array of tools that are selected for download",
    "lineNumber": 90,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 278,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getUploadArray",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#getUploadArray",
    "access": null,
    "description": "Gets an array of tools that are selected for upload",
    "lineNumber": 103,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 279,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "newInstance",
    "memberof": "js/base/sync/SyncSelection.js~SyncSelection",
    "longname": "js/base/sync/SyncSelection.js~SyncSelection#newInstance",
    "access": null,
    "description": "Gets an array of tools that are selected for upload",
    "lineNumber": 116,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 280,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "SyncSelectionFactory",
    "memberof": "js/base/sync/SyncSelection.js",
    "longname": "js/base/sync/SyncSelection.js~SyncSelectionFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/sync/SyncSelection.js",
    "importStyle": "SyncSelectionFactory",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 281,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/base/sync/SyncService.js",
    "memberof": null,
    "longname": "js/base/sync/SyncService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nvar SyncService = ($q, $timeout, $filter, $rootScope, SyncAPIService, LoggerService,\r\n\tUserSession, SyncSelection, ModuleService, safo, UserSettings) => {\r\n\r\n\r\n\tvar LOG = LoggerService('SyncService');\r\n\r\n\t// The current sync promsie\r\n\tvar syncBackgroundPromise = null;\r\n\r\n\r\n\tclass SyncServiceImpl{\r\n\r\n\t\t/**\r\n\t\t* Gets a summary of the sync status for all modules the user\r\n\t\t* is linked to.\r\n\t\t*/\r\n\t\tgetSyncDetails(){\r\n\r\n\t\t\tvar syncDetails = {\r\n\t\t\t\tinSync : true,\r\n\t\t\t\tdownload : 0,\r\n\t\t\t\tupload : 0,\r\n\t\t\t\ttotal : 0,\r\n\t\t\t\ttools : []\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t* Returns a promise to loop through all the modules to get their sync status\r\n\t\t\t*/\r\n\t\t\tfunction getLoopModulesPromise(linkedModules){\r\n\t\t\t\tlet promise = $q.when();\r\n\t\t\t\tangular.forEach(linkedModules, function(linkedModule){\r\n\t\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\t\t// Get the sync details for the current item in the list\r\n\t\t\t\t\t\treturn SyncAPIService.getSyncStatus(linkedModule.id)\r\n\t\t\t\t\t\t\t.then((syncStatus) => {\r\n\t\t\t\t\t\t\t\tsyncDetails.inSync = syncDetails.inSync && syncStatus.inSync;\r\n\t\t\t\t\t\t\t\tsyncDetails.download += syncStatus.download;\r\n\t\t\t\t\t\t\t\tsyncDetails.upload += syncStatus.upload;\r\n\t\t\t\t\t\t\t\tsyncDetails.total += syncStatus.total;\r\n\r\n\t\t\t\t\t\t\t\tvar tools = $filter('object2Array')(syncStatus.tools);\r\n\t\t\t\t\t\t\t\tsafo(tools, 'moduleId', linkedModule.id, 'moduleName', linkedModule.name);\r\n\t\t\t\t\t\t\t\tsyncDetails.tools = syncDetails.tools.concat(tools);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\treturn promise.then(function(){\r\n\t\t\t\t\t$rootScope.$broadcast('syncStatusChanged', {'state' : syncDetails.inSync ? 'inSync' : 'outSync'});\r\n\t\t\t\t\treturn syncDetails;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t* Get the list of all the modules currently linked to this app\r\n\t\t\t* Then loop through each of them to build up a big sync status\r\n\t\t\t*/\r\n\t\t\treturn ModuleService.getLinkedModules()\r\n\t\t\t\t.then(getLoopModulesPromise);\r\n\t\t}\r\n\r\n\t\t/***\r\n\t\t* Sync a tool\r\n\t\t* @param toolname - name of the tool to sync\r\n\t\t*/\r\n\t\tsyncDownloadTool(moduleId, toolname){\r\n\t\t\treturn SyncAPIService.syncDownloadTool(moduleId, toolname);\r\n\t\t}\r\n\r\n\r\n\t\t/***\r\n\t\t* Performs a synchronise of the selected tools\r\n\t\t*/\r\n\t\tsyncSelected(syncSelection){\r\n\r\n\t\t\t// Initialise scope variables for this page\r\n\t\t\tvar toolUploads = syncSelection.getUploadArray();\r\n\t\t\tvar toolDownloads = syncSelection.getDownloadArray();\r\n\t\t\tvar didUpdateBase = false;// Flag if we updated base. If base was updated we need to reload the tools\r\n\t\t\tvar self = this;\r\n\t\t\t/*\r\n\t\t\t* Function that will return promise for new download if there is any\r\n\t\t\t* or returns null if there are no more promises for downloads\r\n\t\t\t*/\r\n\t\t\tfunction getDownloadPromise(){\r\n\t\t\t\tlet promise = $q.when();\r\n\t\t\t\tangular.forEach(toolDownloads, function(tool){\r\n\t\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\t\treturn self.syncDownloadTool(tool.moduleId, tool.key)\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\tLOG.debug('Completed download for tool : ' + tool.key);\r\n\t\t\t\t\t\t\ttool.downloadProgress = 100;\r\n\r\n\t\t\t\t\t\t\t// Set the flag if we downloaded for base\r\n\t\t\t\t\t\t\tif(tool.key == 'base'){\r\n\t\t\t\t\t\t\t\tdidUpdateBase = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\treturn promise;\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t* Function that will return a promise for the new upload if there is any\r\n\t\t\t* or returns null if there are no more promises for uploads\r\n\t\t\t*/\r\n\t\t\tfunction getUploadPromise(){\r\n\t\t\t\tlet promise = $q.when();\r\n\t\t\t\tangular.forEach(toolUploads, function(tool){\r\n\t\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\t\treturn self.syncUploadTool(tool.key)\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\tLOG.debug('Completed upload for tool : ' + tool.key);\r\n\t\t\t\t\t\t\ttool.downloadProgress = 100;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\treturn promise;\r\n\t\t\t}\r\n\r\n\t\t\t// Get the promise to check the offline status\r\n\t\t\tfunction emitSyncStatusChange(){\r\n\t\t\t\t$rootScope.$broadcast('syncStatusChanged');\r\n\t\t\t\treturn {\r\n\t\t\t\t\t'didUpdateBase' : didUpdateBase\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// Start loop with downloads\r\n\t\t\treturn getDownloadPromise()\r\n\t\t\t\t.then(getUploadPromise)\r\n\t\t\t\t.then(emitSyncStatusChange);\r\n\r\n\t\t}\r\n\r\n\r\n\t\t/***\r\n\t\t* Sync a tool\r\n\t\t* @param toolname - name of the tool to sync\r\n\t\t*/\r\n\t\tsyncUploadTool(moduleId, toolname){\r\n\t\t\treturn SyncAPIService.syncUploadTool(moduleId, toolname);\r\n\t\t}\r\n\r\n\t\tstartBackgroundSync(){\r\n\t\t\tconst self = this;\r\n\t\t\t// Make sure we are not already running\r\n\t\t\tif(syncBackgroundPromise == null){\r\n\r\n\t\t\t\tUserSettings.getSettings().then((settings) => {\r\n\t\t\t\t\tif(settings.autoSyncDownload || settings.autoSyncUpload){\r\n\t\t\t\t\t\tLOG.debug('Starting background sync timer... ' + settings.autoSyncInterval);\r\n\t\t\t\t\t\t// Start and save the promise\r\n\t\t\t\t\t\tsyncBackgroundPromise = $timeout(() => {\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t* Because this happens somewhere later in time, we need to check if we actually still\r\n\t\t\t\t\t\t\t* want to continue with the sync.\r\n\t\t\t\t\t\t\t* This shouldn't be a problem because the UI should stop the timer promise when the user\r\n\t\t\t\t\t\t\t* decides to cancel the auto sync, but we do it anyway ;)\r\n\t\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t\tif(settings.autoSyncDownload || settings.autoSyncUpload){\r\n\t\t\t\t\t\t\t\tself._handleTimedSync();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, settings.autoSyncInterval || 180000); // Avoid runaway if for some reason this gets null\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tLOG.debug('Not going to start sync, it is not enabled');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tLOG.debug('Cannot start background sync again, already running...');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_handleTimedSync(){\r\n\t\t\tLOG.debug('Need to check for sync now');\r\n\t\t\tconst self = this;\r\n\t\t\t$timeout.cancel(syncBackgroundPromise);\r\n\r\n\t\t\tUserSettings.getSettings().then((settings) => {\r\n\t\t\t\tself.getSyncDetails().then((syncStatus) => {\r\n\r\n\t\t\t\t\tvar syncSelection = SyncSelection.newInstance();\r\n\t\t\t\t\tsyncSelection.tools = syncStatus.tools;\r\n\r\n\t\t\t\t\tif(settings.autoSyncDownload){\r\n\t\t\t\t\t\tsyncSelection.selectAllDownloads();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(settings.autoSyncUpload){\r\n\t\t\t\t\t\tsyncSelection.selectAllUploads();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tself.syncSelected(syncSelection).then(() => {\r\n\t\t\t\t\t\tsyncBackgroundPromise = null;\r\n\t\t\t\t\t\tself.startBackgroundSync(); // Restart the timer\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\tstopBackgroundSync(){\r\n\t\t\tLOG.debug('Stopping background sync timer...');\r\n\t\t\tif(syncBackgroundPromise != null){\r\n\t\t\t\t$timeout.cancel(syncBackgroundPromise);\r\n\t\t\t\tsyncBackgroundPromise = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Function to notify this service that there are changes that need\r\n\t\t* attention\r\n\t\t*/\r\n\t\tnotifyChanges(){\r\n\t\t\t$rootScope.$broadcast('syncStatusChanged', {'state' : 'outSync'});\r\n\t\t\tthis._handleTimedSync(); // Handle it now if we can\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\treturn new SyncServiceImpl();\r\n\r\n};\r\nSyncService.$inject = ['$q', '$timeout', '$filter', '$rootScope', 'SyncAPIService', 'LoggerService',\r\n'UserSession', 'SyncSelection', 'ModuleService', 'safo', 'UserSettings'];\r\nexport default SyncService;\r\n"
  },
  {
    "__docId__": 282,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SyncService",
    "memberof": "js/base/sync/SyncService.js",
    "longname": "js/base/sync/SyncService.js~SyncService",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/base/sync/SyncService.js",
    "importStyle": "SyncService",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/init.js",
    "memberof": null,
    "longname": "js/init.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nimport base from './base';\r\nimport tools from './tools';\r\n\r\nvar SynthMobile = 'SynthMobile';\r\n/* Main application module */\r\nangular.module(SynthMobile, [\r\n\t'ngRoute',\r\n\t'ngAnimate',\r\n\t'ngTouch',\r\n\t'ab-base64',\r\n\t'ui.bootstrap',\r\n\t'frapontillo.bootstrap-switch',\r\n\t'ng-iscroll',\r\n\t'synthesis.config',\r\n\t'synthesis.templates',\r\n\tbase,\r\n\ttools\r\n]);\r\n\r\n// Wait for cordova before starting application\r\ndocument.addEventListener('deviceready', function() {\r\n\tangular.element(document).ready(function () {\r\n\t\tangular.bootstrap(document, [SynthMobile]);\r\n\t});\r\n}, false);\r\n"
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SynthMobile",
    "memberof": "js/init.js",
    "longname": "js/init.js~SynthMobile",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/init.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/loader.js",
    "memberof": null,
    "longname": "js/loader.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "document.addEventListener('deviceready', function(){\r\n\tfunction continueBoot(){\r\n\t\tnavigator.splashscreen.show();\r\n\t\twindow.location = 'synthesis.html';\r\n\t}\r\n\r\n\t// Only android requires addition file access permissions\r\n\tif(device.platform !== 'Android'){\r\n\t\tcontinueBoot();\r\n\t\treturn;\r\n\t}\r\n\tvar permissions = cordova.plugins.permissions;\r\n\tfunction checkPermissions(){\r\n\r\n\t\tfunction errorHandler(){\r\n\t\t\tconsole.log('Failed to get File Access permission');\r\n\t\t\tnavigator.app.exitApp();\r\n\t\t}\r\n\t\tpermissions.hasPermission(permissions.WRITE_EXTERNAL_STORAGE, function(status){\r\n\t\t\tif(status.hasPermission){\r\n\t\t\t\tcontinueBoot();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tpermissions.requestPermission(permissions.WRITE_EXTERNAL_STORAGE, function(requestStatus){\r\n\t\t\t\t\tif(requestStatus.hasPermission){\r\n\t\t\t\t\t\tcontinueBoot();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tconsole.log('User did not allow file access');\r\n\t\t\t\t\t\tnavigator.notification.confirm(\r\n\t\t\t\t\t\t\t\t'This application requires file access to store offline files.',\r\n\t\t\t\t\t\t\t\tfunction(index){\r\n\t\t\t\t\t\t\t\t\tif (index === 2){\r\n\t\t\t\t\t\t\t\t\t\tnavigator.app.exitApp();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\t\tcheckPermissions();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t'File Permission Required',\r\n\t\t\t\t\t\t\t\t['Retry', 'Exit']);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, errorHandler);\r\n\t\t\t}\r\n\t\t}, errorHandler);\r\n\t}\r\n\r\n\tcheckPermissions();\r\n}, false);\r\n"
  },
  {
    "__docId__": 286,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/announcements/config.js",
    "memberof": null,
    "longname": "js/tools/announcements/config.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\n/**\r\n* Configure routes for announcements\r\n*/\r\nvar Config = ($routeProvider, SynthAttachmentMinerProvider, SynthEmbeddedImageHandlerProvider, SynthDeleteHandlerProvider, SynthLinkHandlerProvider) => {\r\n\r\n\tSynthAttachmentMinerProvider.addHandler('announcements', 'default');\r\n\tSynthEmbeddedImageHandlerProvider.addHandler('announcements', 'AnnouncementsImageHandler');\r\n\tSynthDeleteHandlerProvider.addHandler('announcements', 'AnnouncementsDeleteHandler');\r\n\tSynthLinkHandlerProvider.addHandler('announcements', 'AnnouncementsLinkHandler');\r\n\r\n\t$routeProvider\r\n\t\t.when('/tool/announcements/:moduleId', {templateUrl : 'tools/announcements/partials/announcements-list.html'})\r\n\t\t.when('/tool/announcements/:moduleId/:announcementId', {templateUrl : 'tools/announcements/partials/announcements-detail.html'});\r\n};\r\nConfig.$inject = ['$routeProvider', 'SynthAttachmentMinerProvider', 'SynthEmbeddedImageHandlerProvider', 'SynthDeleteHandlerProvider', 'SynthLinkHandlerProvider'];\r\nexport default Config;\r\n"
  },
  {
    "__docId__": 287,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Config",
    "memberof": "js/tools/announcements/config.js",
    "longname": "js/tools/announcements/config.js~Config",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/announcements/config.js",
    "importStyle": "Config",
    "description": "Configure routes for announcements",
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/announcements/controllers/AnnouncementDetailCtrl.js",
    "memberof": null,
    "longname": "js/tools/announcements/controllers/AnnouncementDetailCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Announcement Detail controller\r\n*/\r\nvar AnnouncementDetailCtrl = ($scope, $rootScope, $routeParams, AnnouncementService, SynthErrorHandler) => {\r\n\t$rootScope.activePage = 'announcements';\r\n\t$rootScope.breadcrumbs = [{'name' : 'Announcements', 'url' : `#/tool/announcements/${$routeParams.moduleId}`}];\r\n\r\n\t// Get the specific announcement\r\n\tAnnouncementService\r\n\t\t.getAnnouncement($routeParams.moduleId, $routeParams.announcementId)\r\n\t\t.then((announcement) => {\r\n\t\t\t$scope.announcement = announcement;\r\n\t\t\t$rootScope.breadcrumbs = [{'name' : 'Announcements', 'url' : `#/tool/announcements/${$routeParams.moduleId}`}, {'name' : 'Announcement'}];\r\n\t\t}, SynthErrorHandler);\r\n};\r\nAnnouncementDetailCtrl.$inject = ['$scope', '$rootScope', '$routeParams', 'AnnouncementService', 'SynthErrorHandler'];\r\nexport default AnnouncementDetailCtrl;\r\n"
  },
  {
    "__docId__": 289,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "AnnouncementDetailCtrl",
    "memberof": "js/tools/announcements/controllers/AnnouncementDetailCtrl.js",
    "longname": "js/tools/announcements/controllers/AnnouncementDetailCtrl.js~AnnouncementDetailCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/announcements/controllers/AnnouncementDetailCtrl.js",
    "importStyle": "AnnouncementDetailCtrl",
    "description": "Announcement Detail controller",
    "lineNumber": 5,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/announcements/controllers/AnnouncementListCtrl.js",
    "memberof": null,
    "longname": "js/tools/announcements/controllers/AnnouncementListCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Announcement list controller\r\n*/\r\nvar AnnouncementListCtrl = ($scope, $rootScope, $routeParams, $filter, AnnouncementService, SynthErrorHandler) => {\r\n\t$rootScope.activePage = 'announcements';\r\n\t$rootScope.breadcrumbs = [{'name' : 'Announcements'}];\r\n\r\n\t// Add default values to scope\r\n\tangular.extend($scope, {\r\n\t\t// The id of the module we are working with\r\n\t\tmoduleId : $routeParams.moduleId,\r\n\r\n\t\t// Flag if we are busy loading\r\n\t\tloadingAnnouncements : true,\r\n\r\n\t\t// List of Announcements to display\r\n\t\tannouncements : [],\r\n\r\n\t\t// Get function used for sorting events by date\r\n\t\torderDateFunc : function(announcement){\r\n\t\t\treturn moment(announcement.mod_date).valueOf();\r\n\t\t}\r\n\t});\r\n\r\n\t// Put all announcements on UI\r\n\tAnnouncementService.getAnnouncements($routeParams.moduleId)\r\n\t\t.then((announcements) => {\r\n\t\t\t$scope.announcements = $filter('object2Array')(announcements);\r\n\t\t\t$scope.loadingAnnouncements = false;\r\n\t\t}, (reason) => {\r\n\t\t\t$scope.loadingAnnouncements = false;\r\n\t\t\treturn SynthErrorHandler(reason);\r\n\t\t});\r\n};\r\nAnnouncementListCtrl.$inject = ['$scope', '$rootScope', '$routeParams', '$filter', 'AnnouncementService', 'SynthErrorHandler'];\r\nexport default AnnouncementListCtrl;\r\n"
  },
  {
    "__docId__": 291,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "AnnouncementListCtrl",
    "memberof": "js/tools/announcements/controllers/AnnouncementListCtrl.js",
    "longname": "js/tools/announcements/controllers/AnnouncementListCtrl.js~AnnouncementListCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/announcements/controllers/AnnouncementListCtrl.js",
    "importStyle": "AnnouncementListCtrl",
    "description": "Announcement list controller",
    "lineNumber": 5,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/announcements/handlers/AnnouncementsDeleteHandler.js",
    "memberof": null,
    "longname": "js/tools/announcements/handlers/AnnouncementsDeleteHandler.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar AnnouncementsDeleteHandler = ($q, $timeout) => {\r\n\r\n\treturn function(data){\r\n\t\tif(data == null || Object.keys(data).length === 0){\r\n\t\t\treturn $q.when({\r\n\t\t\t\tdata : data,\r\n\t\t\t\tdeleted : []\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar deferred = $q.defer();\r\n\t\t$timeout(function(){\r\n\t\t\tvar returnData = {\r\n\t\t\t\tdata : {},\r\n\t\t\t\tdeleted : []\r\n\t\t\t};\r\n\t\t\t// Step through each item\r\n\t\t\tfor (var announcementKey in data) {\r\n\t\t\t\tvar announcement = data[announcementKey];\r\n\r\n\t\t\t\t// If one is found with 'DELETE'\r\n\t\t\t\tif(announcement.status || announcement.status == 'DELETED'){\r\n\t\t\t\t\t// Add files of the announcement to delete\r\n\t\t\t\t\t// returnData.deleted.push();\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep the item in the data list\r\n\t\t\t\t\treturnData.data[announcementKey] = announcement;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// return the fixed data\r\n\t\t\tdeferred.resolve(returnData);\r\n\t\t});\r\n\t\treturn deferred.promise;\r\n\t};\r\n\r\n};\r\nAnnouncementsDeleteHandler.$inject = ['$q', '$timeout'];\r\nexport default AnnouncementsDeleteHandler;\r\n"
  },
  {
    "__docId__": 293,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "AnnouncementsDeleteHandler",
    "memberof": "js/tools/announcements/handlers/AnnouncementsDeleteHandler.js",
    "longname": "js/tools/announcements/handlers/AnnouncementsDeleteHandler.js~AnnouncementsDeleteHandler",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/announcements/handlers/AnnouncementsDeleteHandler.js",
    "importStyle": "AnnouncementsDeleteHandler",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/announcements/handlers/AnnouncementsImageHandler.js",
    "memberof": null,
    "longname": "js/tools/announcements/handlers/AnnouncementsImageHandler.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nvar AnnouncementsImageHandler = ($q, SynthEmbeddedImageHandler) => {\r\n\r\n\treturn (toolContent) => {\r\n\t\tvar announcementKeys = Object.keys(toolContent);\r\n\r\n\t\t/**\r\n\t\t * If there is no annoucment content, there is nothing to\r\n\t\t * attempt to change\r\n\t\t */\r\n\t\tif(announcementKeys.length === 0){\r\n\t\t\treturn $q.when(toolContent);\r\n\t\t}\r\n\r\n\t\tlet promise = $q.when();\r\n\t\tangular.forEach(announcementKeys, function(announcementKey){\r\n\t\t\tpromise = promise.then(function(){\r\n\t\t\t\tlet announcement = toolContent[announcementKey];\r\n\t\t\t\treturn SynthEmbeddedImageHandler.fixForHtmlElement(announcement.body, function(imagePath){\r\n\t\t\t\t\treturn SynthEmbeddedImageHandler.resolveImageLocalPathFromAttachments(imagePath, announcement.attachments || []);\r\n\t\t\t\t})\r\n\t\t\t\t.then((fixedContent) =>{\r\n\t\t\t\t\t// Update the content to the newly fixed html content\r\n\t\t\t\t\ttoolContent[announcementKey].body = fixedContent;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn promise.then(()=>{\r\n\t\t\treturn toolContent;\r\n\t\t});\r\n\t};\r\n\r\n};\r\nAnnouncementsImageHandler.$inject = ['$q', 'SynthEmbeddedImageHandler'];\r\n\r\nexport default AnnouncementsImageHandler;\r\n"
  },
  {
    "__docId__": 295,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "AnnouncementsImageHandler",
    "memberof": "js/tools/announcements/handlers/AnnouncementsImageHandler.js",
    "longname": "js/tools/announcements/handlers/AnnouncementsImageHandler.js~AnnouncementsImageHandler",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/announcements/handlers/AnnouncementsImageHandler.js",
    "importStyle": "AnnouncementsImageHandler",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/announcements/handlers/AnnouncementsLinkHandler.js",
    "memberof": null,
    "longname": "js/tools/announcements/handlers/AnnouncementsLinkHandler.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar AnnouncementsLinkHandler = ($q, SynthLinkHandler) => {\r\n\r\n\treturn (toolContent) => {\r\n\r\n\t\t// If there is not data to look at\r\n\t\tif(toolContent == null || Object.keys(toolContent).length === 0){\r\n\t\t\treturn $q.when(toolContent);\r\n\t\t}\r\n\t\tvar announcementKeys = Object.keys(toolContent);\r\n\t\tlet promise = $q.when();\r\n\t\tangular.forEach(announcementKeys, function(annoucementKey){\r\n\t\t\tpromise = promise.then(function(){\r\n\t\t\t\tlet announcement = toolContent[annoucementKey];\r\n\t\t\t\treturn SynthLinkHandler.fixContent(announcement.body).then((fixedContent)=>{\r\n\t\t\t\t\tannouncement.body = fixedContent;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn promise.then(()=>{\r\n\t\t\treturn toolContent;\r\n\t\t});\r\n\t};\r\n};\r\nAnnouncementsLinkHandler.$inject = ['$q', 'SynthLinkHandler'];\r\nexport default AnnouncementsLinkHandler;\r\n"
  },
  {
    "__docId__": 297,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "AnnouncementsLinkHandler",
    "memberof": "js/tools/announcements/handlers/AnnouncementsLinkHandler.js",
    "longname": "js/tools/announcements/handlers/AnnouncementsLinkHandler.js~AnnouncementsLinkHandler",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/announcements/handlers/AnnouncementsLinkHandler.js",
    "importStyle": "AnnouncementsLinkHandler",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/announcements/index.js",
    "memberof": null,
    "longname": "js/tools/announcements/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nimport AnnouncementListCtrl from './controllers/AnnouncementListCtrl';\r\nimport AnnouncementDetailCtrl from './controllers/AnnouncementDetailCtrl';\r\n\r\nimport AnnouncementService from './services/AnnouncementService';\r\n\r\nimport Config from './config';\r\n\r\n// Import handlers\r\nimport AnnouncementsImageHandler from './handlers/AnnouncementsImageHandler';\r\nimport AnnouncementsDeleteHandler from './handlers/AnnouncementsDeleteHandler';\r\nimport AnnouncementsLinkHandler from './handlers/AnnouncementsLinkHandler';\r\n\r\nvar AnnouncementsTool = 'synthesis.tools.announcements',\r\n\tcontrollers = 'synthesis.tools.announcements.controllers',\r\n\tfactories = 'synthesis.tools.announcements.factories',\r\n\thandlers = 'synthesis.tools.announcements.handlers';\r\n\r\nangular.module(controllers, [])\r\n\t.controller('AnnouncementListCtrl', AnnouncementListCtrl)\r\n\t.controller('AnnouncementDetailCtrl', AnnouncementDetailCtrl);\r\n\r\nangular.module(factories, [])\r\n\t.factory('AnnouncementService', AnnouncementService);\r\n\r\nangular.module(handlers, [])\r\n\t.factory('AnnouncementsImageHandler', AnnouncementsImageHandler)\r\n\t.factory('AnnouncementsDeleteHandler', AnnouncementsDeleteHandler)\r\n\t.factory('AnnouncementsLinkHandler', AnnouncementsLinkHandler);\r\n\r\nangular.module(AnnouncementsTool, [\r\n\tcontrollers,\r\n\tfactories,\r\n\thandlers\r\n]).config(Config);\r\n\r\nexport default AnnouncementsTool;\r\n"
  },
  {
    "__docId__": 299,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "AnnouncementsTool",
    "memberof": "js/tools/announcements/index.js",
    "longname": "js/tools/announcements/index.js~AnnouncementsTool",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/announcements/index.js",
    "importStyle": "AnnouncementsTool",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/announcements/services/AnnouncementService.js",
    "memberof": null,
    "longname": "js/tools/announcements/services/AnnouncementService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n/**\r\n* Create factory for the announcement Service\r\n*/\r\nclass AnnouncementService{\r\n\r\n\tconstructor(moduleService){\r\n\t\tthis.moduleService = moduleService;\r\n\t}\r\n\r\n\t/**\r\n\t* Gets all the announcements\r\n\t*/\r\n\tgetAnnouncements(moduleId) {\r\n\t\treturn this.moduleService.getToolData(moduleId, 'announcements');\r\n\t}\r\n\r\n\t/**\r\n\t* Gets an announcement for the specified ID\r\n\t*/\r\n\tgetAnnouncement(moduleId, announcementId) {\r\n\t\treturn this.getAnnouncements(moduleId)\r\n\t\t.then((announcements) => {\r\n\t\t\treturn announcements[announcementId];\r\n\t\t});\r\n\t}\r\n}\r\n\r\nvar AnnouncementServiceFactory = function(){\r\n\treturn new AnnouncementService(...arguments);\r\n};\r\nAnnouncementServiceFactory.$inject = ['ModuleService'];\r\nexport default AnnouncementServiceFactory;\r\n"
  },
  {
    "__docId__": 301,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AnnouncementService",
    "memberof": "js/tools/announcements/services/AnnouncementService.js",
    "longname": "js/tools/announcements/services/AnnouncementService.js~AnnouncementService",
    "access": null,
    "export": false,
    "importPath": "synthesis-mobile/js/tools/announcements/services/AnnouncementService.js",
    "importStyle": null,
    "description": "Create factory for the announcement Service",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 302,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/tools/announcements/services/AnnouncementService.js~AnnouncementService",
    "longname": "js/tools/announcements/services/AnnouncementService.js~AnnouncementService#constructor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "moduleService",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 303,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "moduleService",
    "memberof": "js/tools/announcements/services/AnnouncementService.js~AnnouncementService",
    "longname": "js/tools/announcements/services/AnnouncementService.js~AnnouncementService#moduleService",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getAnnouncements",
    "memberof": "js/tools/announcements/services/AnnouncementService.js~AnnouncementService",
    "longname": "js/tools/announcements/services/AnnouncementService.js~AnnouncementService#getAnnouncements",
    "access": null,
    "description": "Gets all the announcements",
    "lineNumber": 14,
    "params": [
      {
        "name": "moduleId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 305,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getAnnouncement",
    "memberof": "js/tools/announcements/services/AnnouncementService.js~AnnouncementService",
    "longname": "js/tools/announcements/services/AnnouncementService.js~AnnouncementService#getAnnouncement",
    "access": null,
    "description": "Gets an announcement for the specified ID",
    "lineNumber": 21,
    "params": [
      {
        "name": "moduleId",
        "types": [
          "*"
        ]
      },
      {
        "name": "announcementId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 306,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "AnnouncementServiceFactory",
    "memberof": "js/tools/announcements/services/AnnouncementService.js",
    "longname": "js/tools/announcements/services/AnnouncementService.js~AnnouncementServiceFactory",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/announcements/services/AnnouncementService.js",
    "importStyle": "AnnouncementServiceFactory",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 307,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/index.js",
    "memberof": null,
    "longname": "js/tools/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nimport announcements from './announcements';\r\nimport resources from './resources';\r\nimport schedule from './schedule';\r\n\r\nvar SynthesisTools = 'synthesis.tools';\r\n\r\nangular.module(SynthesisTools, [\r\n\tannouncements,\r\n\tresources,\r\n\tschedule\r\n]);\r\n\r\nexport default SynthesisTools;\r\n"
  },
  {
    "__docId__": 308,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SynthesisTools",
    "memberof": "js/tools/index.js",
    "longname": "js/tools/index.js~SynthesisTools",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/index.js",
    "importStyle": "SynthesisTools",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/resources/config.js",
    "memberof": null,
    "longname": "js/tools/resources/config.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar Config = ($routeProvider, SynthDeleteHandlerProvider) => {\r\n\r\n\tSynthDeleteHandlerProvider.addHandler('resources', 'ResourcesDeleteHandler');\r\n\r\n\t$routeProvider\r\n\t\t.when('/tool/resources/:moduleId/', {templateUrl : 'tools/resources/partials/resources.html'});\r\n};\r\nConfig.$inject = ['$routeProvider', 'SynthDeleteHandlerProvider'];\r\nexport default Config;\r\n"
  },
  {
    "__docId__": 310,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Config",
    "memberof": "js/tools/resources/config.js",
    "longname": "js/tools/resources/config.js~Config",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/resources/config.js",
    "importStyle": "Config",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/resources/controllers/ResourcesCtrl.js",
    "memberof": null,
    "longname": "js/tools/resources/controllers/ResourcesCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar ResourcesCtrl = ($scope, $filter, $rootScope, $routeParams, $window, $timeout, $q, ResourcesService, DataService, SynthErrorHandler, SynthError) => {\r\n\r\n\t$rootScope.activePage = 'forums';\r\n\t$rootScope.breadcrumbs = [{'name' : 'Resources'}];\r\n\t$scope.showResourceInfo = false;\t// Flag showing info about the resource\r\n\t$scope.loadingResources = true;\t\t// Flag loading the resources to be displayed in the list\r\n\t$scope.promptDownloadAll = false;\t// Flag is showing download all prompts\r\n\t$scope.busyDownloadingAll = false;\t// Flag busy downloading all resources\r\n\t$scope.downloadAllObject = {};\t\t// Object containing the download all information\r\n\t$scope.pageCurrent \t\t= 1;\t\t// Page the user is currently on\r\n\t$scope.pageListAllCount = 0;\t\t// Total number of items that needs to be displayed on pages\r\n\t$scope.pageListPageCount = 10;\t\t// Number of items that may be displayed on a page\r\n\t$scope.paginationSize \t= 5;\t\t// Limit number for pagination size\r\n\t$scope.parentResource = null; \t\t// Current parent resource we are viewing\r\n\tvar moduleId = $scope.moduleId = $routeParams.moduleId; // Id of the module we are currently working with\r\n\r\n\tvar pageResourcesAll = null;\t\t// All the resources that needs to be split over pages\r\n\tvar currentDirectory = null;\t\t// Current resource directory\r\n\r\n\t$scope.goUp = function(){\r\n\t\t$window.history.back();\r\n\t};\r\n\r\n\r\n\t/**\r\n\t* Function to download all the resources in the current (recursive) view\r\n\t*/\r\n\t$scope.downloadAll = function($event){\r\n\t\t$event.stopPropagation();\r\n\r\n\t\tfunction getResourcesToDownloadPromise(){\r\n\t\t\treturn ResourcesService.getUndownloadedChildren(moduleId, currentDirectory);\r\n\t\t}\r\n\r\n\t\tgetResourcesToDownloadPromise()\r\n\t\t.then(function(resourcesToDownload){\r\n\t\t\t$scope.downloadAllObject = resourcesToDownload;\r\n\t\t\t$scope.promptDownloadAll = true;\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t* Callback to start downloading all resources\r\n\t*/\r\n\t$scope.startDownloadAll = function($event){\r\n\t\t$event.stopPropagation();\r\n\t\t$scope.promptDownloadAll = false;\r\n\t\t$scope.busyDownloadingAll = true;\r\n\r\n\t\t// Get the next resource in the list if there is any\r\n\t\tfunction getDownloadResourcePromise(){\r\n\t\t\tlet promise = $q.when();\r\n\t\t\tangular.forEach($scope.downloadAllObject.resources, function(resource){\r\n\t\t\t\tpromise = promise.then(function(){\r\n\t\t\t\t\treturn ResourcesService.downloadResource(moduleId, resource)\r\n\t\t\t\t\t\t.then(function success(){\r\n\t\t\t\t\t\t\t// If there is no progress yet we add a zero progress\r\n\t\t\t\t\t\t\tif(resource.downloaded === undefined){\r\n\t\t\t\t\t\t\t\tresource.downloaded = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// When a resource is completly download we add the full size to the progress\r\n\t\t\t\t\t\t\t$scope.downloadAllObject.downloaded = ($scope.downloadAllObject.downloaded - resource.downloaded) + resource.size;\r\n\t\t\t\t\t\t\t$scope.downloadAllObject.progress = ($scope.downloadAllObject.downloaded / $scope.downloadAllObject.size) * 100;\r\n\t\t\t\t\t\t\t$scope.downloadAllObject.downloadedFiles++;\r\n\t\t\t\t\t\t}, function error(reason){\r\n\t\t\t\t\t\t\treturn $q.reject(reason);\r\n\t\t\t\t\t\t}, function notify(notification){\r\n\t\t\t\t\t\t\tif(notification.lengthComputable) {\r\n\t\t\t\t\t\t\t\tresource.size = notification.total;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// If there is no progress yet we add a zero progress\r\n\t\t\t\t\t\t\tif(resource.downloaded === undefined){\r\n\t\t\t\t\t\t\t\tresource.downloaded = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t$scope.downloadAllObject.downloaded = ($scope.downloadAllObject.downloaded - resource.downloaded) + notification.loaded;\r\n\t\t\t\t\t\t\tresource.downloaded = notification.loaded;\r\n\t\t\t\t\t\t\t$scope.downloadAllObject.progress = ($scope.downloadAllObject.downloaded / $scope.downloadAllObject.size) * 100;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn promise;\r\n\t\t}\r\n\r\n\t\tgetDownloadResourcePromise()\r\n\t\t.then(function(){ // Success\r\n\t\t\t$scope.busyDownloadingAll = false;\r\n\t\t\topenDirectory(currentDirectory);\r\n\t\t}, function(){ // Error\r\n\t\t\t$scope.busyDownloadingAll = false;\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t* Callback to start downloading all resources\r\n\t*/\r\n\t$scope.cancelDownloadAll = function($event){\r\n\t\t$event.stopPropagation();\r\n\t\t$scope.promptDownloadAll = false;\r\n\t};\r\n\r\n\t// this function is used to populate the resources\r\n\tfunction openDirectory(id){\r\n\t\t$scope.loadingResources = true;\r\n\t\t$scope.showResourceInfo = false;\r\n\t\t$scope.promptDownloadAll = false;\r\n\t\tcurrentDirectory = id;\r\n\t\t$timeout(function(){\r\n\t\t\tResourcesService.getDirectChildren(moduleId, id).then(function(items){\r\n\r\n\t\t\t\tvar resources = items.sort(function(item1, item2){\r\n\r\n\t\t\t\t\t// If both is a directory or file, we go by name\r\n\t\t\t\t\tif((item1.directory && item2.directory) || (!item1.directory && !item2.directory)){\r\n\t\t\t\t\t\tif(item1.name < item2.name){\r\n\t\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(item1.name > item2.name){\r\n\t\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// If 1 is a directory and 2 not\r\n\t\t\t\t\telse if(item1.directory && !item2.directory){\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// If 2 is a directory and 1 not\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t// TODO this should move to page\r\n\t\t\t\t$scope.loadingResources = false;\r\n\t\t\t\tpageResourcesAll = $filter('object2Array')(resources);\r\n\t\t\t\tpaginationCalculate();\r\n\t\t\t\t$scope.paginationUpdate(1);\r\n\t\t\t});\r\n\t\t}, 500);\r\n\t}\r\n\r\n\t/**\r\n\t* Calculate what can fit onto screen and how paging should work\r\n\t*/\r\n\tfunction paginationCalculate(){\r\n\t\t$scope.pageListAllCount = pageResourcesAll.length;\r\n\r\n\t}\r\n\r\n\t$scope.nextPage = function(){\r\n\t\tif($scope.pageCurrent > 1){\r\n\t\t\t$scope.paginationUpdate($scope.pageCurrent - 1);\r\n\t\t}\r\n\t};\r\n\r\n\t$scope.previousPage = function(){\r\n\t\tvar pageSize = $scope.pageListPageCount,\r\n\t\t\titemCount = $scope.pageListAllCount,\r\n\t\t\tnumPages = Math.floor(itemCount / pageSize) + (itemCount % pageSize > 0 ? 1 : 0);\r\n\t\tif($scope.pageCurrent < numPages){\r\n\t\t\t$scope.paginationUpdate($scope.pageCurrent + 1);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Update the display for the current page\r\n\t*/\r\n\t$scope.paginationUpdate = function(newPage){\r\n\t\t$scope.pageCurrent = newPage;\r\n\t\tvar pageSize = $scope.pageListPageCount,\r\n\t\t\titemCount = $scope.pageListAllCount,\r\n\t\t\tstartIdx = (newPage - 1) * pageSize,\r\n\t\t\tendIdx = Math.min((newPage * pageSize) - 1, itemCount);\r\n\r\n\t\t$scope.resources = pageResourcesAll.slice(startIdx, endIdx);\r\n\t\t$scope.myScroll.mainScroll.scrollTo(0, 0);// Scroll to top to see modal\r\n\t};\r\n\r\n\t$scope.showInfo = function(resource, $event){\r\n\t\t$event.stopPropagation();\r\n\t\t$scope.resourceInfo = resource;\r\n\t\t$scope.myScroll.mainScroll.scrollTo(0, 0);// Scroll to top to see modal\r\n\t\t$scope.showResourceInfo = true;\r\n\t\thistory.pushState({}, 'Resources', '#/tool/resources/' + moduleId + '/');\r\n\t};\r\n\r\n\r\n\t$scope.hideInfo = function(){\r\n\t\t$scope.myScroll.mainScroll.scrollTo(0, 0);// Scroll to top to see modal\r\n\t\t$scope.showResourceInfo = false;\r\n\t};\r\n\r\n\t$scope.openResource = function(resource){\r\n\r\n\t\tvar openURL = function(path){\r\n\t\t\tvar FileOpener = $window.plugins.FileOpener;\r\n\t\t\tFileOpener.open({\r\n\t\t\t\t'path' : path,\r\n\t\t\t\t'mimeType' : resource.mime_type\r\n\t\t\t},\r\n\t\t\tfunction(){\r\n\r\n\t\t\t},\r\n\t\t\tfunction(error){\r\n\t\t\t\tvar synthError;\r\n\t\t\t\t// If the error is that there is not application\r\n\t\t\t\tif(error == FileOpener.NO_APP){\r\n\t\t\t\t\tsynthError = SynthError(4001);\r\n\t\t\t\t}\r\n\t\t\t\t// We couldn't open the file\r\n\t\t\t\telse if(error == FileOpener.FAIL_TO_OPEN){\r\n\t\t\t\t\tsynthError = SynthError(4002);\r\n\t\t\t\t}\r\n\t\t\t\t// Something else went wrong\r\n\t\t\t\telse{\r\n\t\t\t\t\tsynthError = SynthError(1000);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t* We need to make this change in an apply scope, because we are changing\r\n\t\t\t\t* the angular scope (inside the Error Handler) from outside of an angular\r\n\t\t\t\t* thread\r\n\t\t\t\t*/\r\n\t\t\t\t$rootScope.$apply(function(){\r\n\t\t\t\t\tSynthErrorHandler(synthError);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\r\n\t\t};\r\n\r\n\t\t// If the resource is a directory, we will navigate into the directory\r\n\t\tif(resource.directory){\r\n\t\t\thistory.pushState(resource, 'Resources', '#/tool/resources/' + moduleId + '/');\r\n\t\t\topenDirectory(resource.id);\r\n\t\t}\r\n\t\telse if (resource.mime_type == 'text/url') {\r\n\t\t\tif(resource.linkURL != null){\r\n\t\t\t\tcordova.InAppBrowser.open(resource.linkURL, '_system');\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(resource.resourceType == 'org.sakaiproject.citation.impl.CitationList'){\r\n\t\t\tcordova.InAppBrowser.open(resource.url, '_system');\r\n\t\t}\r\n\t\t// If the file is already downloaded we will open it\r\n\t\telse if(resource.isDownloaded){\r\n\t\t\topenURL(resource.downloadPath);\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t* Download a selected resource\r\n\t*/\r\n\t$scope.downloadResource = function(resource, $event){\r\n\t\tif($event){\r\n\t\t\t$event.stopPropagation();\r\n\t\t}\r\n\r\n\t\tresource.busyDownloading = true;\r\n\t\tResourcesService.downloadResource(moduleId, resource)\r\n\t\t.then(\r\n\t\t\t// Success\r\n\t\t\tfunction(result){\r\n\t\t\t\tresource.busyDownloading = false;\r\n\t\t\t\tresource.isDownloaded = result.isDownloaded;\r\n\t\t\t\tresource.downloadPath = result.downloadPath;\r\n\t\t\t},\r\n\t\t\t//Failed\r\n\t\t\tfunction(reason){\r\n\t\t\t\tresource.busyDownloading = false;\r\n\t\t\t\tconsole.log(reason);\r\n\t\t\t},\r\n\t\t\t// Notifications\r\n\t\t\tfunction(notification){\r\n\r\n\t\t\t\t// Check the file download progress\r\n\t\t\t\tif(notification instanceof ProgressEvent){\r\n\t\t\t\t\tif(notification.lengthComputable) {\r\n\t\t\t\t\t\tresource.downloadProgress = (notification.loaded / notification.total) * 100;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tresource.downloadProgress = (notification.loaded / resource.size) * 100;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t* Delete the specified resource\r\n\t*/\r\n\t$scope.deleteResource = function(resource, $event){\r\n\t\t// Stop the click event from progating\r\n\t\tif($event){\r\n\t\t\t$event.stopPropagation();\r\n\t\t}\r\n\r\n\t\tnavigator.notification.confirm(\r\n\t\t\t'Are you sure you want to delete the resource?',\r\n\t\t\tfunction(index){\r\n\t\t\t\tif (index === 2){\r\n\t\t\t\t\tResourcesService.deleteResource(moduleId, resource.id).then(function(){\r\n\t\t\t\t\t\t// Update the object passed to this function,\r\n\t\t\t\t\t\t// so that angular will update the current screen without having to refresh\r\n\t\t\t\t\t\tif(resource.isDownloaded !== undefined){\r\n\t\t\t\t\t\t\tdelete resource.isDownloaded;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, SynthErrorHandler);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'Delete resource',\r\n\t\t\t['No', 'Yes']);\r\n\t};\r\n\r\n\tfunction popHistory(event){\r\n\t\tif(event.state == null){\r\n\t\t\topenDirectory(null);\r\n\t\t}\r\n\t\telse{\r\n\t\t\topenDirectory(event.state.id);\r\n\t\t}\r\n\t}\r\n\t$window.addEventListener('popstate', popHistory);\r\n\t// Cleanup listeners\r\n\t$scope.$on('$destroy', function () {\r\n\t\t$window.removeEventListener('popstate', popHistory);\r\n\t});\r\n\r\n\topenDirectory(null);\r\n};\r\nResourcesCtrl.$inject = ['$scope', '$filter', '$rootScope', '$routeParams', '$window', '$timeout', '$q', 'ResourcesService', 'DataService', 'SynthErrorHandler', 'SynthError'];\r\nexport default ResourcesCtrl;\r\n"
  },
  {
    "__docId__": 312,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ResourcesCtrl",
    "memberof": "js/tools/resources/controllers/ResourcesCtrl.js",
    "longname": "js/tools/resources/controllers/ResourcesCtrl.js~ResourcesCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/resources/controllers/ResourcesCtrl.js",
    "importStyle": "ResourcesCtrl",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/resources/directives/resourceImg.js",
    "memberof": null,
    "longname": "js/tools/resources/directives/resourceImg.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar resourceImg = (ResourcesService) => {\r\n\treturn {\r\n\t\t'restrict' : 'E',\r\n\t\t'templateUrl' : 'tools/resources/partials/resourceImg.html',\r\n\t\t'scope' : {},\r\n\t\t/*'replace' : true,*/\r\n\t\t'link' : function (scope, element, attr) {\r\n\r\n\t\t\t// Set attributes to scope\r\n\t\t\tscope.src = attr.src;\r\n\t\t\tscope.width = attr.width;\r\n\t\t\tscope.height = attr.height;\r\n\t\t\tscope.initialising = true;\r\n\r\n\t\t\tvar resource = {};\r\n\r\n\t\t\t// Get the resource\r\n\t\t\tResourcesService.getItem(attr.resourceId).then(function (r) {\r\n\t\t\t\tscope.resource = resource = r;\r\n\t\t\t\tscope.initialising = false;\r\n\t\t\t});\r\n\r\n\t\t\t// Callback to download the image\r\n\t\t\tscope.download = function () {\r\n\r\n\t\t\t\t// Stop pizza buyers\r\n\t\t\t\tif (!resource.busyDownloading) {\r\n\t\t\t\t\tresource.busyDownloading = true;\r\n\t\t\t\t\tResourcesService.downloadResource(resource)\r\n\t\t\t\t\t.then(\r\n\t\t\t\t\t\t// Success\r\n\t\t\t\t\t\tfunction () {\r\n\t\t\t\t\t\t\tresource.busyDownloading = false;\r\n\t\t\t\t\t\t\tresource.isDownloaded = true;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t//Failed\r\n\t\t\t\t\t\tfunction (reason) {\r\n\t\t\t\t\t\t\tresource.busyDownloading = false;\r\n\t\t\t\t\t\t\tconsole.log(reason);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t// Notifications\r\n\t\t\t\t\t\tfunction (notification) {\r\n\r\n\t\t\t\t\t\t\t// Check the file download progress\r\n\t\t\t\t\t\t\tif (notification instanceof ProgressEvent) {\r\n\t\t\t\t\t\t\t\tif (notification.lengthComputable) {\r\n\t\t\t\t\t\t\t\t\tresource.downloadProgress = (notification.loaded / notification.total) * 100;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tresource.downloadProgress = (notification.loaded / resource.size) * 100;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n};\r\nresourceImg.$inject = ['ResourcesService'];\r\nexport default resourceImg;\r\n"
  },
  {
    "__docId__": 314,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "resourceImg",
    "memberof": "js/tools/resources/directives/resourceImg.js",
    "longname": "js/tools/resources/directives/resourceImg.js~resourceImg",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/resources/directives/resourceImg.js",
    "importStyle": "resourceImg",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/resources/directives/resourceListItem.js",
    "memberof": null,
    "longname": "js/tools/resources/directives/resourceListItem.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar resourceListItem = () => {\r\n\treturn {\r\n\t\t'restrict' : 'A',\r\n\t\t'templateUrl' : 'tools/resources/partials/resourceListItem.html',\r\n\t\t/*'replace' : true,*/\r\n\t\t'link' : function (scope){\r\n\r\n\t\t\t// If the resource is an url, we can pretent that it is downloaded\r\n\t\t\tif (scope.resource.mime_type == 'text/url' || scope.resource.resourceType == 'org.sakaiproject.citation.impl.CitationList'){\r\n\t\t\t\tscope.resource.isDownloaded = true;\r\n\t\t\t\tscope.resource.noDelete = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};\r\nresourceListItem.$inject = [];\r\nexport default resourceListItem;\r\n"
  },
  {
    "__docId__": 316,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "resourceListItem",
    "memberof": "js/tools/resources/directives/resourceListItem.js",
    "longname": "js/tools/resources/directives/resourceListItem.js~resourceListItem",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/resources/directives/resourceListItem.js",
    "importStyle": "resourceListItem",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/resources/factories/ResourcesService.js",
    "memberof": null,
    "longname": "js/tools/resources/factories/ResourcesService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar ResourcesService = ($q, DataService, ModuleService, SyncAPIService, LoggerService) => {\r\n\r\n\t// A reference to a logger\r\n\tvar LOG = LoggerService('ResourcesService');\r\n\r\n\tclass ResourcesServiceImpl {\r\n\t\t_getData (moduleId){\r\n\t\t\treturn ModuleService.getMergedToolData(moduleId, 'resources');\r\n\t\t}\r\n\r\n\t\tgetItem(moduleId, id){\r\n\t\t\treturn this._getData(moduleId).then(function(data){\r\n\t\t\t\treturn data[id];\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Get the parent directory object from the parent id\r\n\t\t*/\r\n\t\tgetParent(moduleId, id){\r\n\t\t\tvar pid = id;\r\n\t\t\t/**\r\n\t\t\t* This is a bit of a hack to get resources to work between Moodle and Sakai\r\n\t\t\t* Is the module id that we are working with is not fully numeric, it is assumed\r\n\t\t\t* to be a sakai module, therefore we have to add the /group id for the resource\r\n\t\t\t*\r\n\t\t\t* Else, if the number is fully numeric, it is a moodle module.\r\n\t\t\t*/\r\n\t\t\tif(pid == null){\r\n\t\t\t\t// 1 Check\r\n\t\t\t\tif (isNaN(moduleId)) {\r\n\t\t\t\t\tpid = '/group/' + moduleId + '/';\r\n\t\t\t\t\treturn this.getItem(moduleId, pid);\r\n\t\t\t\t}\r\n\t\t\t\t// 2 Do moodle fancy stuff, and set pid to the resource you want\r\n\t\t\t\treturn this._getData(moduleId).then(function (data) {\r\n\t\t\t\t\tfor (var idx in data) {\r\n\t\t\t\t\t\tif (data.hasOwnProperty(idx)) {\r\n\t\t\t\t\t\t\tvar item = data[idx];\r\n\t\t\t\t\t\t\tif (item.treeId.lastIndexOf(item.treeParentId, 0) === 0) {\r\n\t\t\t\t\t\t\t\treturn item;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn this.getItem(moduleId, pid);\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t* Gets all the children recursively that still needs to be downloaded\r\n\t\t*/\r\n\t\tgetUndownloadedChildren(moduleId, parentId){\r\n\t\t\tvar self = this;\r\n\t\t\t/*\r\n\t\t\t* Returns a promise to get the parent\r\n\t\t\t*/\r\n\t\t\tfunction getParentPromise(){\r\n\t\t\t\treturn self.getParent(moduleId, parentId);\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t* A promise that will return a list of resources that must still be downloaded\r\n\t\t\t*/\r\n\t\t\tfunction findResourcesPromise(parentObject){\r\n\t\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\t\tself._getData(moduleId).then(function(data){\r\n\t\t\t\t\tvar directoryStack = [parentObject]; // List of directories still to be scanned\r\n\t\t\t\t\tvar currentDirectory = null;\r\n\t\t\t\t\tvar downloadObject = {\r\n\t\t\t\t\t\t'size' : 0,\t\t\t\t// Total size of what we need to download\r\n\t\t\t\t\t\t'downloaded' : 0,\t\t// Amount of data that we have downloaded\r\n\t\t\t\t\t\t'progress' : 0,\t\t\t// Percentage of completion\r\n\t\t\t\t\t\t'downloadedFiles' : 0,\t// Number of files that has been downloaded\r\n\t\t\t\t\t\t'resources' : []\t\t// Resources we need to download\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Loop until there is nothing more\r\n\t\t\t\t\twhile(directoryStack.length > 0){\r\n\r\n\t\t\t\t\t\t// Find the next directory in the stack\r\n\t\t\t\t\t\tcurrentDirectory = directoryStack.splice(0, 1)[0];\r\n\t\t\t\t\t\tLOG.debug('Currently looking at directory : ' + JSON.stringify(currentDirectory));\r\n\r\n\t\t\t\t\t\t// Loop through all of the data to find children\r\n\t\t\t\t\t\tfor(var idx in data){\r\n\t\t\t\t\t\t\tvar item = data[idx];\r\n\r\n\t\t\t\t\t\t\t// If this is a child from the parent\r\n\t\t\t\t\t\t\tif(item.treeParentId == currentDirectory.treeId){\r\n\t\t\t\t\t\t\t\tif(item.directory == true){\r\n\t\t\t\t\t\t\t\t\tLOG.debug('Adding directory to stack: ' + JSON.stringify(item));\r\n\t\t\t\t\t\t\t\t\tdirectoryStack.push(item);\r\n\r\n\t\t\t\t\t\t\t\t// Ignore urls and citations, we won't be downloading them\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if(item.mime_type == 'text/url' || item.resourceType == 'org.sakaiproject.citation.impl.CitationList'){\r\n\t\t\t\t\t\t\t\t\tdelete data[item.id]; // remove this item from the big list\r\n\r\n\t\t\t\t\t\t\t\t// Add files that are not downloaded, ignoring urls\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if(!item.isDownloaded){\r\n\t\t\t\t\t\t\t\t\tLOG.debug('Adding file to list: ' + JSON.stringify(item));\r\n\t\t\t\t\t\t\t\t\tdownloadObject.size += item.size;\r\n\t\t\t\t\t\t\t\t\tdownloadObject.resources.push(item);\r\n\t\t\t\t\t\t\t\t\tdelete data[item.id]; // remove this item from the big list\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdeferred.resolve(downloadObject);\r\n\t\t\t\t});\r\n\t\t\t\treturn deferred.promise;\r\n\t\t\t}\r\n\r\n\t\t\treturn getParentPromise()\r\n\t\t\t.then(findResourcesPromise);\r\n\t\t}\r\n\r\n\r\n\t\tgetDirectChildren(moduleId, parentId){\r\n\t\t\tvar self = this;\r\n\r\n\t\t\t/*\r\n\t\t\t* Returns a promise to get the parent\r\n\t\t\t*/\r\n\t\t\tfunction getParentPromise(){\r\n\t\t\t\treturn self.getParent(moduleId, parentId);\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t* Returns a promise to get the children\r\n\t\t\t*/\r\n\t\t\tfunction getChildrenPromise(parent){\r\n\t\t\t\treturn self._getData(moduleId).then(function(data){\r\n\t\t\t\t\tvar pId = parent == null ? null : parent.treeId;\r\n\r\n\t\t\t\t\t/* remove the trailing slash if there is one\r\n\t\t\t\t\tif(pId.lastIndexOf('/')+1 === pId.length){\r\n\t\t\t\t\tpId = pId.substring(0,pId.length-1);\r\n\t\t\t\t}*/\r\n\r\n\t\t\t\t\tvar items = [];\r\n\t\t\t\t\tfor(var key in data){\r\n\t\t\t\t\t\tvar item = data[key];\r\n\t\t\t\t\t\tif(item.treeParentId === pId){\r\n\t\t\t\t\t\t\titems.push(item);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn items;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn getParentPromise()\r\n\t\t\t.then(getChildrenPromise);\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t* Returns a promise to physically delete and update the resources tool content for the\r\n\t\t* specified resource ID\r\n\t\t*/\r\n\t\tdeleteResource(moduleId, resourceId){\r\n\t\t\tvar self = this;\t\t// A reference to ourself\r\n\t\t\tvar resource = null; \t// The resource we are working with\r\n\r\n\t\t\t/**\r\n\t\t\t* Returns a promise to get the resource for an ID\r\n\t\t\t*/\r\n\t\t\tfunction getResourcePromise(){\r\n\t\t\t\treturn self.getItem(moduleId, resourceId).then(function(theResource){\r\n\t\t\t\t\tresource = theResource;\r\n\t\t\t\t\tif(resource.isDownloaded !== undefined){\r\n\t\t\t\t\t\tdelete resource.isDownloaded;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn theResource;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t* Returns a promise to physically delete the file from the filesystem\r\n\t\t\t*/\r\n\t\t\tfunction getDeleteFilePromise(resourceToDelete){\r\n\t\t\t\tvar deletePath = resourceToDelete.treeId.replace(/[|&:;$%@'<>()+,]/g, '_');\r\n\t\t\t\treturn DataService.deleteToolFile(moduleId, 'resources', deletePath);\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t* Returns a promise to persist the changes made to the resource to the filesystem\r\n\t\t\t*/\r\n\t\t\tfunction getSaveContentPromise(){\r\n\t\t\t\tvar mergeData = {};\r\n\t\t\t\tmergeData[resource.id] = resource;\r\n\t\t\t\treturn ModuleService.mergeToToolData(moduleId, 'resources', mergeData, false);\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Start the chain of actions\r\n\t\t\treturn getResourcePromise()\r\n\t\t\t.then(getDeleteFilePromise)\r\n\t\t\t.then(getSaveContentPromise);\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t* Downloads a resource to the tool's data.\r\n\t\t* This function will also update the tool data to indicate that the resource\r\n\t\t* has been downloaded.\r\n\t\t*/\r\n\t\tdownloadResource(moduleId, resource){\r\n\t\t\tvar resourceAttachment;\r\n\t\t\t/*\r\n\t\t\t* Returns a promise to create an array of attachments to download.\r\n\t\t\t* This array will only contain one attachment for this resource\r\n\t\t\t*/\r\n\t\t\tfunction getAttachmentPromise(){\r\n\t\t\t\tvar filename = resource.name;\r\n\t\t\t\treturn DataService.createNewFile(filename).then((fileEntry) => {\r\n\t\t\t\t\tresourceAttachment = {\r\n\t\t\t\t\t\t'downloadKey' : resource.downloadKey,\r\n\t\t\t\t\t\t'downloadPath' : fileEntry.toInternalURL()\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Returns a promise to download the file\r\n\t\t\tfunction getDownloadAttachmentsPromise(){\r\n\t\t\t\treturn SyncAPIService.getFileFromServer(resourceAttachment.downloadKey, resourceAttachment.downloadPath);\r\n\t\t\t}\r\n\r\n\t\t\t// Returns a promise to update the tool data that the resource is downloaded\r\n\t\t\tfunction getUpdateToolDataPromise(){\r\n\t\t\t\tvar mergeData = {};\r\n\t\t\t\tmergeData[resource.id] = {\r\n\t\t\t\t\t'isDownloaded' : true,\r\n\t\t\t\t\t'downloadPath' : resourceAttachment.downloadPath\r\n\t\t\t\t};\r\n\t\t\t\treturn ModuleService.mergeToToolData(moduleId, 'resources', mergeData, false).then(function(){\r\n\t\t\t\t\treturn mergeData[resource.id];\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn getAttachmentPromise()\r\n\t\t\t.then(getDownloadAttachmentsPromise)\r\n\t\t\t.then(getUpdateToolDataPromise);\r\n\t\t}\r\n\r\n\t}\r\n\treturn new ResourcesServiceImpl();\r\n};\r\nResourcesService.$inject = ['$q', 'DataService', 'ModuleService', 'SyncAPIService', 'LoggerService'];\r\nexport default ResourcesService;\r\n"
  },
  {
    "__docId__": 318,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ResourcesService",
    "memberof": "js/tools/resources/factories/ResourcesService.js",
    "longname": "js/tools/resources/factories/ResourcesService.js~ResourcesService",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/resources/factories/ResourcesService.js",
    "importStyle": "ResourcesService",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/resources/handlers/ResourcesDeleteHandler.js",
    "memberof": null,
    "longname": "js/tools/resources/handlers/ResourcesDeleteHandler.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar ResourcesDeleteHandler = ($q, $timeout) => {\r\n\r\n\treturn function(data){\r\n\t\tif(data == null || Object.keys(data).length === 0){\r\n\t\t\treturn $q.when({\r\n\t\t\t\tdata : data,\r\n\t\t\t\tdeleted : []\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar deferred = $q.defer();\r\n\t\t$timeout(function(){\r\n\t\t\tvar returnData = {\r\n\t\t\t\tdata : {},\r\n\t\t\t\tdeleted : []\r\n\t\t\t};\r\n\t\t\t// Step through each item\r\n\t\t\tfor (var resourceKey in data) {\r\n\t\t\t\tvar resource = data[resourceKey];\r\n\r\n\t\t\t\t// If one is found with 'DELETE'\r\n\t\t\t\tif(resource.status || resource.status == 'DELETED'){\r\n\t\t\t\t\t// If we don't have a path for it we can't delete it\r\n\t\t\t\t\tif(resource.downloadPath != null){\r\n\t\t\t\t\t\treturnData.deleted.push(resource.downloadPath);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep the item in the data list\r\n\t\t\t\t\treturnData.data[resourceKey] = resource;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// return the fixed data\r\n\t\t\tdeferred.resolve(returnData);\r\n\t\t});\r\n\t\treturn deferred.promise;\r\n\t};\r\n\r\n};\r\n\r\nResourcesDeleteHandler.$inject = ['$q', '$timeout'];\r\nexport default ResourcesDeleteHandler;\r\n"
  },
  {
    "__docId__": 320,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ResourcesDeleteHandler",
    "memberof": "js/tools/resources/handlers/ResourcesDeleteHandler.js",
    "longname": "js/tools/resources/handlers/ResourcesDeleteHandler.js~ResourcesDeleteHandler",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/resources/handlers/ResourcesDeleteHandler.js",
    "importStyle": "ResourcesDeleteHandler",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/resources/index.js",
    "memberof": null,
    "longname": "js/tools/resources/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nimport ResourcesCtrl from './controllers/ResourcesCtrl';\r\n\r\nimport ResourcesService from './factories/ResourcesService';\r\n\r\nimport resourceImg from './directives/resourceImg';\r\nimport resourceListItem from './directives/resourceListItem';\r\n\r\nimport Config from './config';\r\n\r\nimport ResourcesDeleteHandler from './handlers/ResourcesDeleteHandler';\r\n\r\nvar ResourcesTool = 'synthesis.tools.resources',\r\n\tcontrollers = 'synthesis.tools.resources.controllers',\r\n\tfactories = 'synthesis.tools.resources.factories',\r\n\tdirectives = 'synthesis.tools.resources.directives',\r\n\thandlers = 'synthesis.tools.resources.handlers';\r\n\r\n\r\nangular.module(controllers, [])\r\n\t.controller('ResourcesCtrl', ResourcesCtrl);\r\n\r\nangular.module(factories, [])\r\n\t.factory('ResourcesService', ResourcesService);\r\n\r\nangular.module(directives, [])\r\n\t.directive('resourceImg', resourceImg)\r\n\t.directive('resourceListItem', resourceListItem);\r\n\r\nangular.module(handlers, [])\r\n\t.factory('ResourcesDeleteHandler', ResourcesDeleteHandler);\r\n\r\nangular.module(ResourcesTool, [\r\n\tcontrollers,\r\n\tfactories,\r\n\tdirectives,\r\n\thandlers\r\n]).config(Config);\r\n\r\nexport default ResourcesTool;\r\n"
  },
  {
    "__docId__": 322,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ResourcesTool",
    "memberof": "js/tools/resources/index.js",
    "longname": "js/tools/resources/index.js~ResourcesTool",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/resources/index.js",
    "importStyle": "ResourcesTool",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/schedule/config.js",
    "memberof": null,
    "longname": "js/tools/schedule/config.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar Config = ($routeProvider, SynthLinkHandlerProvider, SynthAttachmentMinerProvider) => {\r\n\r\n\tSynthLinkHandlerProvider.addHandler('schedule', 'ScheduleLinkHandler');\r\n\tSynthAttachmentMinerProvider.addHandler('schedule', 'default');\r\n\r\n\t$routeProvider\r\n\t\t.when('/tool/schedule/:moduleId', {templateUrl : 'tools/schedule/partials/schedule.html'});\r\n};\r\nConfig.$inject = ['$routeProvider', 'SynthLinkHandlerProvider', 'SynthAttachmentMinerProvider'];\r\nexport default Config;\r\n"
  },
  {
    "__docId__": 324,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Config",
    "memberof": "js/tools/schedule/config.js",
    "longname": "js/tools/schedule/config.js~Config",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/schedule/config.js",
    "importStyle": "Config",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/schedule/controllers/ScheduleCtrl.js",
    "memberof": null,
    "longname": "js/tools/schedule/controllers/ScheduleCtrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar ScheduleCtrl = ($scope, $rootScope, $routeParams, $filter, $timeout, ScheduleService, SynthErrorHandler) => {\r\n\r\n\t$rootScope.activePage = 'schedule';\r\n\t$rootScope.breadcrumbs = [{'name' : 'Schedule'}];\r\n\r\n\tvar entireSchedule = [];\r\n\t// Add default values to scope\r\n\tangular.extend($scope, {\r\n\t\t// Filtering option we are currently using\r\n\t\tfilterOption : 'today',\r\n\r\n\t\t// Start date of the entries to display\r\n\t\tstartCalendar : new Date(),\r\n\r\n\t\t// Last date of an entry to display\r\n\t\tendCalendar : new Date(),\r\n\r\n\t\t// Flag if we are busy loading the Schedule\r\n\t\tloadingSchedule : true,\r\n\r\n\t\t// Current filtered schedule\r\n\t\tschedule : [],\r\n\r\n\t\t// Get function used for sorting events by date\r\n\t\torderDateFunc : function(event){\r\n\t\t\treturn moment(event.start).valueOf();\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t* Function for when the calendar get opened.\r\n\t*/\r\n\t$scope.open = function($event, cal) {\r\n\t\t$event.preventDefault();\r\n\t\t$event.stopPropagation();\r\n\r\n\t\tif(cal === 'start'){\r\n\t\t\t$scope.startCalendarOpen = true;\r\n\t\t\t$scope.endCalendarOpen = false;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t$scope.endCalendarOpen = true;\r\n\t\t\t$scope.startCalendarOpen = false;\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t* Function for when the user changes the filter option\r\n\t*/\r\n\t$scope.changedFilterOption = function(){\r\n\t\t$scope.loadingSchedule = true;\r\n\t\t// Start in new \"thread\"\r\n\t\t$timeout(() => {\r\n\t\t\tvar filterType = $scope.filterOption;\r\n\t\t\tvar fromDate = moment();\r\n\t\t\tvar toDate = moment();\r\n\r\n\t\t\tif (filterType === 'all') {\r\n\t\t\t\t$scope.schedule = entireSchedule;\r\n\t\t\t\t$scope.loadingSchedule = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse if (filterType === 'startEnd') {\r\n\t\t\t\tif ($scope.startCalendar === undefined || $scope.startCalendar === ''){\r\n\t\t\t\t\t$scope.schedule = [];\r\n\t\t\t\t\t$scope.loadingSchedule = false;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfromDate = moment($scope.startCalendar);\r\n\t\t\t\tif ($scope.endCalendar === undefined || $scope.endCalendar === ''){\r\n\t\t\t\t\ttoDate = moment(fromDate).add(50, 'years');\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\ttoDate = moment($scope.endCalendar);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse if (filterType === 'today') {\r\n\t\t\t\tfromDate = moment().startOf('day');\r\n\t\t\t\ttoDate = moment().endOf('day');\r\n\t\t\t}\r\n\t\t\telse if (filterType === 'week') {\r\n\t\t\t\tfromDate = moment().startOf('week');\r\n\t\t\t\ttoDate = moment().endOf('week');\r\n\t\t\t}\r\n\t\t\telse if (filterType === 'month') {\r\n\t\t\t\tfromDate = moment().startOf('month');\r\n\t\t\t\ttoDate = moment().endOf('month');\r\n\t\t\t}\r\n\t\t\telse if (filterType === 'year') {\r\n\t\t\t\tfromDate = moment().startOf('year');\r\n\t\t\t\ttoDate = moment().endOf('year');\r\n\t\t\t}\r\n\t\t\telse if(filterType === 'specific'){\r\n\r\n\t\t\t\tvar days = [];\r\n\r\n\t\t\t\t// If there is atleast a year\r\n\t\t\t\tif ($scope.specificYear !== undefined && $scope.specificYear !== ''){\r\n\t\t\t\t\t$scope.specificMonthDisabled = false;\r\n\t\t\t\t\tfromDate = moment($scope.specificYear, 'YYYY');\r\n\r\n\t\t\t\t\tif ($scope.specificMonth !== undefined && $scope.specificMonth !== ''){\r\n\t\t\t\t\t\t$scope.specificDayDisabled = false;\r\n\t\t\t\t\t\tfromDate = moment($scope.specificYear + '-' + $scope.specificMonth, 'YYYY-M');\r\n\r\n\t\t\t\t\t\tvar daycount = moment($scope.specificYear + '-' + $scope.specificMonth).daysInMonth();\r\n\t\t\t\t\t\tif ($scope.specificDay !== undefined && $scope.specificDay !== ''){\r\n\t\t\t\t\t\t\tif ($scope.specificDay > daycount){\r\n\t\t\t\t\t\t\t\t$scope.specificDay = 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfromDate = moment($scope.specificYear + '-' + $scope.specificMonth + '-' + $scope.specificDay, 'YYYY-M-D');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor(var idx = 1 ; idx <= daycount ; idx++){\r\n\t\t\t\t\t\t\tdays.push(idx);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$scope.days = days;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttoDate = moment(fromDate).add(50, 'years');\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t$scope.specificMonthDisabled = true;\r\n\t\t\t\t\t$scope.specificDayDisabled = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$scope.days = days;\r\n\t\t\t}\r\n\t\t\t$scope.loadingSchedule = false;\r\n\t\t\t$scope.schedule = filterEvents(fromDate, toDate);\r\n\t\t}, 500);\r\n\r\n\r\n\t};\r\n\r\n\tScheduleService\r\n\t\t.getAll($routeParams.moduleId)\r\n\t\t.then((schedule) => {\r\n\t\t\tentireSchedule = $filter('object2Array')(schedule);\r\n\t\t\t$scope.changedFilterOption(); // Do the initial filter\r\n\t\t},\r\n\t\t// Fail\r\n\t\tSynthErrorHandler\r\n\t\t);\r\n\r\n\r\n\t/**\r\n\t* Filters events between 2 dates\r\n\t*\r\n\t* @param {Date} fromDate\r\n\t* @param {Date} toDate\r\n\t* @returns Array of events\r\n\t*/\r\n\tfunction filterEvents(fromDate, toDate) {\r\n\t\tvar filteredEvents = [];\r\n\r\n\t\tfor (var eIdx in entireSchedule) {\r\n\t\t\tvar currentEvent = entireSchedule[eIdx];\r\n\t\t\tif (currentEvent.end === null) {\r\n\t\t\t\tcurrentEvent.end = currentEvent.start + 1;\r\n\t\t\t}\r\n\t\t\tif (fromDate.isBefore(currentEvent.start) && toDate.isAfter(currentEvent.end)) {\r\n\t\t\t\tfilteredEvents.push(currentEvent);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn filteredEvents;\r\n\t}\r\n\r\n};\r\nScheduleCtrl.$inject = ['$scope', '$rootScope', '$routeParams', '$filter', '$timeout', 'ScheduleService', 'SynthErrorHandler'];\r\nexport default ScheduleCtrl;\r\n"
  },
  {
    "__docId__": 326,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ScheduleCtrl",
    "memberof": "js/tools/schedule/controllers/ScheduleCtrl.js",
    "longname": "js/tools/schedule/controllers/ScheduleCtrl.js~ScheduleCtrl",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/schedule/controllers/ScheduleCtrl.js",
    "importStyle": "ScheduleCtrl",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/schedule/factories/ScheduleService.js",
    "memberof": null,
    "longname": "js/tools/schedule/factories/ScheduleService.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\nvar ScheduleService = ($q, $filter, ModuleService) => {\r\n\r\n\r\n\t/**\r\n\t* Check for events with frequency and then add the events that must be generated\r\n\t*\r\n\t* @param {type} eventData\r\n\t*/\r\n\tfunction addRecurringEvents(eventData) {\r\n\t\tvar newEvents = [];\r\n\t\tfor (var eventId in eventData) {\r\n\t\t\tassignFrequencyHandler(newEvents, eventData[eventId]);\r\n\t\t}\r\n\t\tfor (var j = 0; j < newEvents.length; j++) {\r\n\t\t\teventData[newEvents[j].id] = newEvents[j];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Checks which logic to use for the repeating\r\n\t*\r\n\t* @param {type} newEvents\r\n\t* @param {type} event\r\n\t*/\r\n\tfunction assignFrequencyHandler(newEvents, event) {\r\n\t\tswitch (event.frequency) {\r\n\t\tcase 'day':\r\n\t\t\taddEvents(newEvents, event, 'days', 1);\r\n\t\t\tbreak;\r\n\t\tcase 'MWF':\r\n\t\t\taddEvents(newEvents, event, 'days', 1, [1, 3, 5]);\r\n\t\t\tbreak;\r\n\t\tcase 'TT':\r\n\t\t\taddEvents(newEvents, event, 'days', 1, [2, 4]);\r\n\t\t\tbreak;\r\n\t\tcase 'week':\r\n\t\t\taddEvents(newEvents, event, 'weeks', 1);\r\n\t\t\tbreak;\r\n\t\tcase 'month':\r\n\t\t\taddEvents(newEvents, event, 'months', 1);\r\n\t\t\tbreak;\r\n\t\tcase 'year':\r\n\t\t\taddEvents(newEvents, event, 'years', 1);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* Adds the repeating events to the event list\r\n\t*\r\n\t* @param {type} newEvents\r\n\t* @param {type} event\r\n\t* @param {type} addType - 'days', 'months', 'weeks' or 'years'\r\n\t* @param {type} multiply - use 2 to make it every second day\r\n\t* @param {Array} allowedDays array of day numbers allowed starting Sunday at 0\r\n\t* to Saturday at 6\r\n\t*/\r\n\tfunction addEvents(newEvents, event, addType, multiply, allowedDays) {\r\n\t\tif (event.recurs_until) {\r\n\t\t\tvar endDate = moment(event.recurs_until);\r\n\t\t\tvar count = 1;\r\n\t\t\twhile (endDate.isAfter(moment(event.start).add(count * multiply, addType))) {\r\n\t\t\t\tvar start = moment(event.start).add(count * multiply, addType);\r\n\r\n\t\t\t\tif (!allowedDays || (jQuery.inArray(start.day(), allowedDays)) > -1) {\r\n\t\t\t\t\tvar copiedRecurringEvent = {};\r\n\t\t\t\t\tangular.extend(copiedRecurringEvent, event);\r\n\t\t\t\t\tcopiedRecurringEvent.start = start.toDate();\r\n\t\t\t\t\tcopiedRecurringEvent.end = moment(event.end).add(count * multiply, addType).toDate();\r\n\t\t\t\t\tcopiedRecurringEvent.id = event.id + '_' + count++;\r\n\t\t\t\t\tnewEvents.push(copiedRecurringEvent);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar count2 = 1;\r\n\t\t\tfor (var i = 0; count2 < event.recurrence_count; i++) {\r\n\t\t\t\tvar start2 = moment(event.start).add((i + 1) * multiply, addType);\r\n\t\t\t\tif (!allowedDays || (jQuery.inArray(start2.day(), allowedDays)) > -1) {\r\n\t\t\t\t\tvar copiedEvent = {};\r\n\t\t\t\t\tjQuery.extend(copiedEvent, event);\r\n\t\t\t\t\tcopiedEvent.start = start2.toDate();\r\n\t\t\t\t\tcopiedEvent.end = moment(event.end).add((i + 1) * multiply, addType).toDate();\r\n\t\t\t\t\tcopiedEvent.id = event.id + '_' + i;\r\n\t\t\t\t\tnewEvents.push(copiedEvent);\r\n\t\t\t\t\tcount2++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tclass ScheduleServiceImpl {\r\n\r\n\t\tconstructor(){}\r\n\r\n\t\t/**\r\n\t\t* Gets ALL the schedule events\r\n\t\t*/\r\n\t\tgetAll(moduleId) {\r\n\t\t\treturn ModuleService.getToolData(moduleId, 'schedule')\r\n\t\t\t.then((events) => {\r\n\t\t\t\taddRecurringEvents(events);\r\n\t\t\t\treturn events;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Gets a specific event\r\n\t\t*/\r\n\t\tgetEvent(moduleId, eventId) {\r\n\t\t\treturn this.getAll()\r\n\t\t\t.then((events) => {\r\n\t\t\t\treturn events[eventId];\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn new ScheduleServiceImpl();\r\n};\r\nScheduleService.$inject = ['$q', '$filter', 'ModuleService', 'SynthFail'];\r\nexport default ScheduleService;\r\n"
  },
  {
    "__docId__": 328,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ScheduleService",
    "memberof": "js/tools/schedule/factories/ScheduleService.js",
    "longname": "js/tools/schedule/factories/ScheduleService.js~ScheduleService",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/schedule/factories/ScheduleService.js",
    "importStyle": "ScheduleService",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/schedule/handlers/ScheduleLinkHandler.js",
    "memberof": null,
    "longname": "js/tools/schedule/handlers/ScheduleLinkHandler.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nvar ScheduleLinkHandler = ($q, SynthLinkHandler) => {\r\n\treturn (toolContent) => {\r\n\r\n\t\t// If there is not data to look at\r\n\t\tif(toolContent == null || Object.keys(toolContent).length === 0){\r\n\t\t\treturn $q.when(toolContent);\r\n\t\t}\r\n\t\tvar sheduleKeys = Object.keys(toolContent);\r\n\t\tlet promise = $q.when();\r\n\t\tangular.forEach(sheduleKeys, function(scheduleId){\r\n\t\t\tpromise = promise.then(function(){\r\n\t\t\t\tlet schedule = toolContent[scheduleId];\r\n\t\t\t\treturn SynthLinkHandler.fixContent(schedule.description).then((fixedContent)=>{\r\n\t\t\t\t\tschedule.body = fixedContent;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn promise.then(function(){\r\n\t\t\treturn toolContent;\r\n\t\t});\r\n\t};\r\n};\r\nScheduleLinkHandler.$inject = ['$q', 'SynthLinkHandler'];\r\nexport default ScheduleLinkHandler;\r\n"
  },
  {
    "__docId__": 330,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ScheduleLinkHandler",
    "memberof": "js/tools/schedule/handlers/ScheduleLinkHandler.js",
    "longname": "js/tools/schedule/handlers/ScheduleLinkHandler.js~ScheduleLinkHandler",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/schedule/handlers/ScheduleLinkHandler.js",
    "importStyle": "ScheduleLinkHandler",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/tools/schedule/index.js",
    "memberof": null,
    "longname": "js/tools/schedule/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\r\n\r\nimport ScheduleCtrl from './controllers/ScheduleCtrl';\r\nimport ScheduleService from './factories/ScheduleService';\r\nimport Config from './config';\r\n\r\nimport ScheduleLinkHandler from './handlers/ScheduleLinkHandler';\r\n\r\nvar ScheduleTool = 'synthesis.tools.schedule',\r\n\tcontrollers = 'synthesis.tools.schedule.controllers',\r\n\tfactories = 'synthesis.tools.schedule.factories',\r\n\thandlers = 'synthesis.tools.schedule.handlers';\r\n\r\nangular.module(controllers, [])\r\n\t.controller('ScheduleCtrl', ScheduleCtrl);\r\n\r\nangular.module(factories, [])\r\n\t.factory('ScheduleService', ScheduleService);\r\n\r\nangular.module(handlers, [])\r\n\t.factory('ScheduleLinkHandler', ScheduleLinkHandler);\r\n\r\n\r\nangular.module(ScheduleTool, [\r\n\tcontrollers,\r\n\tfactories,\r\n\thandlers\r\n]).config(Config);\r\n\r\nexport default ScheduleTool;\r\n"
  },
  {
    "__docId__": 332,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ScheduleTool",
    "memberof": "js/tools/schedule/index.js",
    "longname": "js/tools/schedule/index.js~ScheduleTool",
    "access": null,
    "export": true,
    "importPath": "synthesis-mobile/js/tools/schedule/index.js",
    "importStyle": "ScheduleTool",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 335,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 336,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 337,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 338,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 339,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 340,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 341,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 342,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 343,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 344,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 345,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 346,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 347,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 348,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 349,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 350,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 351,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 352,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 353,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 354,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 355,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 356,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 357,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 358,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 359,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 360,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 361,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 362,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 363,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 364,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 365,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 366,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 367,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 368,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 369,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 370,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 371,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 372,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 373,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 374,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 375,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 376,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 377,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 378,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 379,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 380,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 382,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 383,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 384,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 385,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 386,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 387,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 388,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 389,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]